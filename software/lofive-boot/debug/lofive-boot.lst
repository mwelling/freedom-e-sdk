
/home/michael/projects/freedom-e-sdk/software/lofive-boot/debug/lofive-boot.elf:     file format elf32-littleriscv
/home/michael/projects/freedom-e-sdk/software/lofive-boot/debug/lofive-boot.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20000000

Program Header:
    LOAD off    0x00001000 vaddr 0x20000000 paddr 0x20000000 align 2**12
         filesz 0x00006dc2 memsz 0x00006dc2 flags rwx
    LOAD off    0x00008ad0 vaddr 0x80000ad0 paddr 0x80000ad0 align 2**12
         filesz 0x00000000 memsz 0x00000ca4 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x20006dc8 align 2**12
         filesz 0x00000ad0 memsz 0x00000ad0 flags rw-
    LOAD off    0x00008ad0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00008ad0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             000001cc  20000000  20000000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005e44  20000200  20000200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000cf4  20006044  20006044  00007044  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000010  20006d38  20006d38  00007d38  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .ctors            0000007a  20006d48  20006d48  00007d48  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data             00000ad0  80000000  20006dc8  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              000000a4  80000ad0  80000ad0  00008ad0  2**3  ALLOC
  7 .stack            00000400  80000b74  80000b74  00008ad0  2**0  ALLOC
  8 .heap             00000800  80000f74  80000f74  00008ad0  2**0  ALLOC
  9 .debug_info       00023d59  00000000  00000000  00008ad0  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev     0000325f  00000000  00000000  0002c829  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges    00000b18  00000000  00000000  0002fa88  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges     00000958  00000000  00000000  000305a0  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_line       0000ad65  00000000  00000000  00030ef8  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_str        00004936  00000000  00000000  0003bc5d  2**0  CONTENTS, READONLY, DEBUGGING
 15 .comment          00000011  00000000  00000000  00040593  2**0  CONTENTS, READONLY
 16 .riscv.attributes 00000029  00000000  00000000  000405a4  2**0  CONTENTS, READONLY
 17 .debug_frame      00002950  00000000  00000000  000405d0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20000000 l    d  .init	00000000 .init
20000200 l    d  .text	00000000 .text
20006044 l    d  .rodata	00000000 .rodata
20006d38 l    d  .init_array	00000000 .init_array
20006d48 l    d  .ctors	00000000 .ctors
80000000 l    d  .data	00000000 .data
80000ad0 l    d  .bss	00000000 .bss
80000b74 l    d  .stack	00000000 .stack
80000f74 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20000148 l       .init	00000000 _skip_init
2000610c l       .rodata	00000000 argv
20006110 l       .rodata	00000000 envp
20006114 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 __call_atexit.c
20000200 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lofive-boot.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
200006f4 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20000c44 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000a90 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000ae4 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 init.c
80000adc l     O .bss	00000004 init_done.1531
80000ae0 l     O .bss	00000004 fini_done.1540
00000000 l    df *ABS*	00000000 tty.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20001ab8 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20001ade l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20001b02 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20001b3e l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20001c9e l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
200021d8 l     F .text	00000024 __metal_driver_cpu_hartid
200021fc l     F .text	0000002a __metal_driver_cpu_timebase
20002226 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
200039aa l     F .text	0000002a __metal_driver_sifive_plic0_control_base
200039d4 l     F .text	0000002a __metal_driver_sifive_plic0_num_interrupts
200039fe l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20003a26 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20003a4e l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
20003a70 l     F .text	0000001e __metal_driver_sifive_plic0_context_ids
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
20004250 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
2000426a l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
20004280 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
20004294 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
2000434c l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20004366 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
2000437c l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
20004390 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20004438 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20004452 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
2000446c l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
20004482 l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
20004496 l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
200044a8 l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
200044b8 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
200044ce l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
200044e0 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
200063f0 l     O .rodata	00000880 pll_configs
200044f2 l     F .text	0000004e get_pll_config_freq
20004754 l     F .text	000000ac find_closest_config
20004800 l     F .text	00000132 configure_pll
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
20004a98 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20004b10 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20004b36 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20004b60 l     F .text	0000035e __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20005574 l     F .text	00000040 __metal_driver_sifive_uart0_control_base
200055b4 l     F .text	00000042 __metal_driver_sifive_uart0_interrupt_parent
200055f6 l     F .text	0000003c __metal_driver_sifive_uart0_interrupt_line
20005632 l     F .text	00000048 __metal_driver_sifive_uart0_clock
2000567a l     F .text	00000040 __metal_driver_sifive_uart0_pinmux
200056ba l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_output_selector
200056fa l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_source_selector
20005ade l     F .text	000000d8 pre_rate_change_callback_func
20005bb6 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__lofive-r1-bootloader_a-vector.o
20005f00 l       .text	00000000 IRQ_0
20005f04 l       .text	00000000 IRQ_1
20005f08 l       .text	00000000 IRQ_2
20005f0c l       .text	00000000 IRQ_3
20005f10 l       .text	00000000 IRQ_4
20005f14 l       .text	00000000 IRQ_5
20005f18 l       .text	00000000 IRQ_6
20005f1c l       .text	00000000 IRQ_7
20005f20 l       .text	00000000 IRQ_8
20005f24 l       .text	00000000 IRQ_9
20005f28 l       .text	00000000 IRQ_10
20005f2c l       .text	00000000 IRQ_11
20005f30 l       .text	00000000 IRQ_12
20005f34 l       .text	00000000 IRQ_13
20005f38 l       .text	00000000 IRQ_14
20005f3c l       .text	00000000 IRQ_15
20005f40 l       .text	00000000 IRQ_LC0
20005f44 l       .text	00000000 IRQ_LC1
20005f48 l       .text	00000000 IRQ_LC2
20005f4c l       .text	00000000 IRQ_LC3
20005f50 l       .text	00000000 IRQ_LC4
20005f54 l       .text	00000000 IRQ_LC5
20005f58 l       .text	00000000 IRQ_LC6
20005f5c l       .text	00000000 IRQ_LC7
20005f60 l       .text	00000000 IRQ_LC8
20005f64 l       .text	00000000 IRQ_LC9
20005f68 l       .text	00000000 IRQ_LC10
20005f6c l       .text	00000000 IRQ_LC11
20005f70 l       .text	00000000 IRQ_LC12
20005f74 l       .text	00000000 IRQ_LC13
20005f78 l       .text	00000000 IRQ_LC14
20005f7c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20005f80 l     F .text	00000070 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20006d48 l       .init_array	00000000 metal_constructors_end
20006d48 l       .init_array	00000000 __fini_array_end
20006d48 l       .init_array	00000000 metal_destructors_end
20006d48 l       .init_array	00000000 metal_destructors_start
20006d48 l       .init_array	00000000 __fini_array_start
20006d3c l       .init_array	00000000 __init_array_end
20006d38 l       .init_array	00000000 __preinit_array_end
20006d38 l       .init_array	00000000 __init_array_start
20006d3c l       .init_array	00000000 metal_constructors_start
20006d38 l       .init_array	00000000 __preinit_array_start
20006cf8 g     O .rodata	00000040 __metal_driver_vtable_sifive_uart0
200010a8 g     F .text	00000028 _isatty_r
200029ba  w    F .text	00000092 metal_lc4_interrupt_vector_handler
2000029c g     F .text	000000da _puts_r
200010d0 g     F .text	0000002c _lseek_r
20005d4c g     F .text	00000026 metal_clock_get_rate_hz
20005a3e g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20001e7a g     F .text	0000005e __metal_driver_riscv_clint0_set_vector_mode
20005892 g     F .text	0000004a __metal_driver_sifive_uart0_set_tx_watermark
20002928  w    F .text	00000092 metal_lc3_interrupt_vector_handler
2000317a g     F .text	00000038 __metal_valid_interrupt_id
20000258 g     F .text	00000044 printf
20006d44 g     O .init_array	00000004 _use_hfxosc_ptr
20003540 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001288 g       .data	00000000 __global_pointer$
20006d48 g     F .ctors	00000024 metal_tty_init
20005cf8 g     F .text	00000054 _metal_clock_append_to_callbacks
20003aca g     F .text	00000046 __metal_plic0_complete_interrupt
2000339e g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20006d40 g     O .init_array	00000004 _metal_sifive_fe310_g000_pll_init_ptr
20000fee g     F .text	00000036 __sseek
200007aa g     F .text	0000006a __sinit
20000384 g     F .text	000000c0 __swbuf_r
20000766 g     F .text	00000044 __sfmoreglue
20001118 g     F .text	00000002 __malloc_unlock
20005e46 g     F .text	0000002a metal_cpu_get
80000a20 g     O .data	00000020 __metal_dt_serial_10013000
2000514e g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20006120 g     O .rodata	0000005c __metal_driver_vtable_riscv_clint0
80000b74 g       .bss	00000000 metal_segment_bss_target_end
20001b6e g     F .text	0000009a __metal_clint0_mtime_get
2000393e g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20005956 g     F .text	00000030 __metal_driver_sifive_uart0_get_rx_watermark
20004efe g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20001696 g     F .text	0000000c __errno
08000000 g       .data	00000000 metal_segment_itim_target_start
2000585e g     F .text	00000034 __metal_driver_sifive_uart0_txready
200057ec g     F .text	0000003a __metal_driver_sifive_uart0_rx_interrupt_enable
20000072 g     F .init	0000000e __metal_synchronize_harts
80000ad0 g       .bss	00000000 metal_segment_bss_target_start
20001c08 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
2000107e g     F .text	0000002a _fstat_r
2000539e g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000b70 g     O .bss	00000004 errno
200045e4 g     F .text	00000170 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
20005dbc g     F .text	00000032 metal_clock_register_pre_rate_change_callback
20002c94  w    F .text	00000092 metal_lc9_interrupt_vector_handler
200019b6  w    F .text	00000014 metal_init_run
80000a40 g     O .data	00000020 __metal_dt_serial_10023000
20006394 g     O .rodata	0000005c __metal_driver_vtable_riscv_plic0
20006354 g     O .rodata	00000040 __metal_driver_vtable_cpu
20001a8a g     F .text	0000002e metal_uart_set_baud_rate
20005be6 g     F .text	000000d2 __metal_driver_sifive_uart0_init
200035cc g     F .text	00000072 __metal_driver_cpu_mcycle_get
20006c70 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
80000f74 g       .heap	00000000 metal_segment_heap_target_start
2000075c g     F .text	0000000a _cleanup_r
80000aa0 g     O .data	00000004 __metal_dt_cpu_0
20002c02  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20004932 g     F .text	00000166 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
200041b8 g     F .text	00000070 __metal_driver_riscv_plic0_affinity_set_threshold
20000376 g     F .text	0000000e puts
20002edc  w    F .text	00000092 metal_lc13_interrupt_vector_handler
200023ba g     F .text	00000018 __metal_default_exception_handler
20001516 g     F .text	00000026 _fstat
200021a4 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
2000355c g     F .text	00000054 __metal_driver_riscv_cpu_controller_set_vector_mode
20002250 g     F .text	0000002c __metal_driver_cpu_get
200062f8 g     O .rodata	0000005c __metal_driver_vtable_riscv_cpu_intc
200022ae g     F .text	00000018 __metal_interrupt_global_disable
20004228 g     F .text	00000028 __metal_driver_riscv_plic0_affinity_get_threshold
20002b70  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20002d26  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20000f48 g     F .text	00000028 _sbrk_r
20003fe0 g     F .text	00000050 __metal_driver_riscv_plic0_disable
2000326e g     F .text	0000004e __metal_exception_register
200018c6 g     F .text	00000078 metal_init
200014c8 g     F .text	0000002c _read_r
20003760 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20004fe0 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
200024a6 g     F .text	00000064 __metal_default_sw_handler
20005dee g     F .text	00000032 metal_clock_register_post_rate_change_callback
8000006c g     O .data	0000000c __metal_dt_clock_2
2000573a g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
2000153c g     F .text	00000020 _isatty
200050a6 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
2000577a g     F .text	0000003a __metal_driver_sifive_uart0_tx_interrupt_enable
80000ac4 g     O .data	00000008 __metal_driver_vtable_fixed_clock
80000a8c g     O .data	00000004 _global_impure_ptr
2000250a  w    F .text	0000008e metal_timer_interrupt_vector_handler
20001708 g     F .text	0000006e __libc_init_array
20005020 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20002db8  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20004416 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
200034ec g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
200015b0 g     F .text	0000006e _sbrk
20004f9a g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20005cb8 g     F .text	00000040 _metal_clock_call_all_callbacks
200001ac g     F .init	00000002 _init
20002310 g     F .text	0000001a __metal_interrupt_timer_disable
20005198 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20003816 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20006cbc g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
200057b4 g     F .text	00000038 __metal_driver_sifive_uart0_tx_interrupt_disable
200050e6 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
200016ce g     F .text	0000003a __libc_fini_array
80000a78 g     O .data	0000000c __metal_dt_clock_4
20005526 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
2000193e g     F .text	00000078 metal_fini
200037a0 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20002362 g     F .text	0000002c __metal_interrupt_local_enable
20002170 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
200019de g     F .text	0000002c metal_tty_putc
20003cc8 g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20004030 g     F .text	00000030 __metal_driver_riscv_plic0_set_threshold
20006070 g     O .rodata	00000020 __sf_fake_stderr
20002346 g     F .text	0000001c __metal_interrupt_external_disable
2000575a g     F .text	00000020 __metal_driver_sifive_uart0_get_interrupt_id
200035b0 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
200032bc g     F .text	000000e2 __metal_driver_riscv_cpu_controller_interrupt_init
20000c6e g     F .text	00000042 __sfputs_r
200038f8 g     F .text	00000046 __metal_driver_cpu_exception_register
200022c6 g     F .text	00000018 __metal_interrupt_software_enable
20002804  w    F .text	00000092 metal_lc1_interrupt_vector_handler
200010fc g     F .text	0000001a memchr
20000aba g     F .text	000000ac _free_r
80000ad8 g     O .bss	00000004 _global_atexit
20003b90 g     F .text	00000062 __metal_driver_riscv_plic0_set_priority
20003092 g     F .text	00000050 __metal_controller_interrupt_vector_mode
200017fe g     F .text	000000c8 __call_exitprocs
80000f74 g       .stack	00000000 _sp
20006d3c g     O .init_array	00000004 _metal_tty_init_ptr
20000080 g     F .init	00000000 _start
200042a6 g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
2000155c g     F .text	0000002a _lseek
200038d8 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
2000396c g     F .text	0000001e __metal_driver_cpu_get_exception_pc
2000232a g     F .text	0000001c __metal_interrupt_external_enable
20001776 g     F .text	00000088 __register_exitproc
20005986 g     F .text	00000042 __metal_driver_sifive_uart0_putc
20003d84 g     F .text	0000014a __metal_driver_riscv_plic0_init
20003f90 g     F .text	00000050 __metal_driver_riscv_plic0_enable
20004f6e g     F .text	0000002c __metal_driver_sifive_gpio0_output
20002ade  w    F .text	00000092 metal_lc6_interrupt_vector_handler
2000227c g     F .text	0000001a __metal_myhart_id
20005546 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20002418  w    F .text	0000008e metal_software_interrupt_vector_handler
20003516 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20001056 g     F .text	00000028 _close_r
20005a1e g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20001d5c g     F .text	000000da __metal_driver_riscv_clint0_register
80000a98 g     O .data	00000008 __metal_dt_clint_2000000
20000444 g     F .text	00000110 __swsetup_r
20000814 g     F .text	0000009e __sfp
20005d72 g     F .text	0000004a metal_clock_set_rate_hz
20000f70 g     F .text	00000030 __sread
20004ebe g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
200001ae  w    F .init	00000000 secondary_main
200023ea  w    F .text	0000002e metal_interrupt_vector_handler
20001116 g     F .text	00000002 __malloc_lock
20005826 g     F .text	00000038 __metal_driver_sifive_uart0_rx_interrupt_disable
20000690 g     F .text	00000064 _fflush_r
20003b56 g     F .text	0000003a __metal_plic0_get_threshold
20004aaa g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
20006090 g     O .rodata	00000020 __sf_fake_stdin
200031b2 g     F .text	000000bc __metal_local_interrupt_enable
2000203c g     F .text	00000134 __metal_driver_riscv_clint0_command_request
20000a12 g     F .text	000000a8 memset
20002a4c  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20000218 g     F .text	00000040 main
80000ad0 g       .data	00000000 metal_segment_data_target_end
2000590c g     F .text	0000004a __metal_driver_sifive_uart0_set_rx_watermark
80000aac g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
200037b4 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20003878 g     F .text	00000060 __metal_driver_cpu_get_msip
20005e8a g     F .text	0000000e metal_shutdown
08000000 g       .data	00000000 metal_segment_itim_target_end
2000398a g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20003a8e g     F .text	0000003c __metal_plic0_claim_interrupt
200058dc g     F .text	00000030 __metal_driver_sifive_uart0_get_tx_watermark
20001024 g     F .text	00000006 __sclose
20002e4a  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20000b66 g     F .text	000000de _malloc_r
20001e5e g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
80000aa8 g     O .data	00000004 __metal_dt_prci_10008000
2000363e g     F .text	00000046 __metal_driver_cpu_timebase_get
20004120 g     F .text	00000098 __metal_driver_riscv_plic0_affinity_disable
20000000 g       .init	00000000 _enter
20005e70 g     F .text	0000001a metal_cpu_get_current_hartid
200043a2 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20005f00 g       .text	00000000 __metal_vector_table
20006dc8 g       *ABS*	00000000 metal_segment_itim_source_start
80000a94  w    O .data	00000004 __metal_cpu_table
80000090 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
200001ac g     F .init	00000002 _fini
20000258 g     F .text	00000044 iprintf
20003bf2 g     F .text	00000034 __metal_driver_riscv_plic0_get_priority
20006d98 g     F .ctors	0000002a use_hfxosc
20002296 g     F .text	00000018 __metal_interrupt_global_enable
2000168c g     F .text	0000000a atexit
20001a0a g     F .text	00000026 metal_tty_putc_raw
2000102a g     F .text	0000002c _write_r
200022f6 g     F .text	0000001a __metal_interrupt_timer_enable
200059c8 g     F .text	00000056 __metal_driver_sifive_uart0_getc
20001f8a g     F .text	000000b2 __metal_driver_riscv_clint0_disable
2000111a g     F .text	0000010c _printf_common
80000a88 g     O .data	00000004 _impure_ptr
200036ea g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20000554 g     F .text	0000013c __sflush_r
20004060 g     F .text	00000028 __metal_driver_riscv_plic0_get_threshold
20004540 g     F .text	000000a4 __metal_driver_sifive_fe310_g000_pll_init
80000078 g     O .data	0000000c __metal_dt_clock_5
20004ad8 g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
20005ff0 g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20001ed8 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20006dc8 g       *ABS*	00000000 metal_segment_data_source_start
20000064 g       .init	00000000 early_trap_vector
80001774 g       .heap	00000000 metal_segment_heap_target_end
200030e2 g     F .text	00000098 __metal_controller_interrupt_vector
80000a6c g     O .data	0000000c __metal_dt_clock_1
80000448 g     O .data	000005d8 __metal_dt_interrupt_controller_c000000
2000091e g     F .text	00000058 __swhatbuf_r
20005060 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20002598 g     F .text	00000066 __metal_default_timer_handler
2000161e g     F .text	0000006e _write
20003ce0 g     F .text	000000a4 __metal_plic0_handler
20002896  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20003000  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20005e20 g     F .text	00000026 metal_cpu_interrupt_controller
20000fa0 g     F .text	0000004e __swrite
200016a2 g     F .text	0000002c exit
20000cb0 g     F .text	00000298 _vfiprintf_r
200008b2 g     F .text	0000006c _fwalk_reent
2000600e g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
200060b0 g     O .rodata	00000020 __sf_fake_stdout
80000aa4 g     O .data	00000004 __metal_dt_gpio_10012000
200023d2 g     F .text	00000018 __metal_default_interrupt_handler
20001a5c g     F .text	0000002e metal_uart_putc
20001586 g     F .text	0000002a _read
200019ca  w    F .text	00000014 metal_fini_run
20004f44 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20002600 g     F .text	0000014c __metal_exception_handler
20002772  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20006030 g     F .text	00000014 _exit
20003684 g     F .text	00000066 __metal_driver_cpu_mtime_get
20000976 g     F .text	0000009c __smakebuf_r
20001e36 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20001226 g     F .text	000002a2 _printf_i
80000ad4 g     O .bss	00000004 __malloc_sbrk_start
20002f6e  w    F .text	00000092 metal_lc14_interrupt_vector_handler
80000ab4 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
20001cd4 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000ad0 g     O .bss	00000004 __malloc_free_list
20006d6c g     F .ctors	0000002c metal_sifive_fe310_g000_pll_init
20000cb0 g     F .text	00000298 _vfprintf_r
20003776 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20003c26 g     F .text	000000a2 __metal_plic0_enable
20000060  w      .init	00000000 __register_frame_info
2000432a g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
2000378a g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
2000238e g     F .text	0000002c __metal_interrupt_local_disable
200022de g     F .text	00000018 __metal_interrupt_software_disable
20001a30 g     F .text	0000002c metal_uart_init
80000a60 g     O .data	0000000c __metal_dt_clock_3
80000084 g     O .data	0000000c __metal_dt_clock_6
20003b10 g     F .text	00000046 __metal_plic0_set_threshold
20004088 g     F .text	00000098 __metal_driver_riscv_plic0_affinity_enable
200014f4 g     F .text	00000022 _close
80000abc g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
20003ece g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20000000 <_enter>:
_enter():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20000000:	60001197          	auipc	gp,0x60001
20000004:	28818193          	addi	gp,gp,648 # 80001288 <__global_pointer$>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20000008:	00000297          	auipc	t0,0x0
2000000c:	05c28293          	addi	t0,t0,92 # 20000064 <early_trap_vector>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20000010:	30529073          	csrw	mtvec,t0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20000014:	00000293          	li	t0,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20000018:	00028463          	beqz	t0,20000020 <_enter+0x20>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2000001c:	7c105073          	csrwi	0x7c1,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20000020:	e0000117          	auipc	sp,0xe0000
20000024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20000028:	e0000097          	auipc	ra,0xe0000
2000002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20000030:	00008363          	beqz	ra,20000036 <_enter+0x36>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20000034:	9082                	jalr	ra
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20000036:	f1402573          	csrr	a0,mhartid
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2000003a:	4581                	li	a1,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2000003c:	4601                	li	a2,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2000003e:	2089                	jal	20000080 <_start>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20000040:	e0000097          	auipc	ra,0xe0000
20000044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20000048:	00008363          	beqz	ra,2000004e <_enter+0x4e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2000004c:	9082                	jalr	ra
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2000004e:	00000297          	auipc	t0,0x0
20000052:	00c28293          	addi	t0,t0,12 # 2000005a <_enter+0x5a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20000056:	30529073          	csrw	mtvec,t0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2000005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2000005e:	bff5                	j	2000005a <_enter+0x5a>

20000060 <__register_frame_info>:
__register_frame_info():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/entry.S:93
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
20000060:	8082                	ret
	...

20000064 <early_trap_vector>:
early_trap_vector():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/trap.S:64
.section .text.metal.init.trapvec
.global early_trap_vector
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20000064:	342022f3          	csrr	t0,mcause
/home/michael/projects/freedom-e-sdk/freedom-metal/src/trap.S:65
    csrr t1, mepc
20000068:	34102373          	csrr	t1,mepc
/home/michael/projects/freedom-e-sdk/freedom-metal/src/trap.S:66
    csrr t2, mtval
2000006c:	343023f3          	csrr	t2,mtval
/home/michael/projects/freedom-e-sdk/freedom-metal/src/trap.S:67
    j early_trap_vector
20000070:	bfd5                	j	20000064 <early_trap_vector>

20000072 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
/*
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init"))) void __metal_synchronize_harts() {
20000072:	1141                	addi	sp,sp,-16
20000074:	c622                	sw	s0,12(sp)
20000076:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:66
        while (METAL_MSIP(msip_base, hart) == 1)
            ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20000078:	0001                	nop
2000007a:	4432                	lw	s0,12(sp)
2000007c:	0141                	addi	sp,sp,16
2000007e:	8082                	ret

20000080 <_start>:
_start():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20000080:	8406                	mv	s0,ra
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20000082:	60001197          	auipc	gp,0x60001
20000086:	20618193          	addi	gp,gp,518 # 80001288 <__global_pointer$>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
2000008a:	cec18113          	addi	sp,gp,-788 # 80000f74 <_sp>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2000008e:	4281                	li	t0,0
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20000090:	40000313          	li	t1,1024
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20000094:	00a28563          	beq	t0,a0,2000009e <_start+0x1e>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20000098:	911a                	add	sp,sp,t1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2000009a:	0285                	addi	t0,t0,1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2000009c:	bfe5                	j	20000094 <_start+0x14>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2000009e:	ff017113          	andi	sp,sp,-16
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
200000a2:	00000293          	li	t0,0
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
200000a6:	0a551163          	bne	a0,t0,20000148 <_skip_init>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
200000aa:	00007297          	auipc	t0,0x7
200000ae:	d1e28293          	addi	t0,t0,-738 # 20006dc8 <metal_segment_data_source_start>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
200000b2:	60000317          	auipc	t1,0x60000
200000b6:	f4e30313          	addi	t1,t1,-178 # 80000000 <metal_segment_data_target_start>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
200000ba:	84818393          	addi	t2,gp,-1976 # 80000ad0 <metal_segment_data_target_end>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
200000be:	00628c63          	beq	t0,t1,200000d6 <_start+0x56>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
200000c2:	00735a63          	bge	t1,t2,200000d6 <_start+0x56>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200000c6:	0002a503          	lw	a0,0(t0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
200000ca:	0291                	addi	t0,t0,4
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
200000cc:	00a32023          	sw	a0,0(t1)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
200000d0:	0311                	addi	t1,t1,4
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
200000d2:	fe734ae3          	blt	t1,t2,200000c6 <_start+0x46>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
200000d6:	00007297          	auipc	t0,0x7
200000da:	cf228293          	addi	t0,t0,-782 # 20006dc8 <metal_segment_data_source_start>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
200000de:	e8000317          	auipc	t1,0xe8000
200000e2:	f2230313          	addi	t1,t1,-222 # 8000000 <metal_segment_itim_target_end>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
200000e6:	e8000397          	auipc	t2,0xe8000
200000ea:	f1a38393          	addi	t2,t2,-230 # 8000000 <metal_segment_itim_target_end>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
200000ee:	00628c63          	beq	t0,t1,20000106 <_start+0x86>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
200000f2:	00735a63          	bge	t1,t2,20000106 <_start+0x86>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200000f6:	0002a503          	lw	a0,0(t0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
200000fa:	0291                	addi	t0,t0,4
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
200000fc:	00a32023          	sw	a0,0(t1)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20000100:	0311                	addi	t1,t1,4
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20000102:	fe734ae3          	blt	t1,t2,200000f6 <_start+0x76>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20000106:	0000100f          	fence.i
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2000010a:	60001317          	auipc	t1,0x60001
2000010e:	9c630313          	addi	t1,t1,-1594 # 80000ad0 <metal_segment_data_target_end>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20000112:	8ec18393          	addi	t2,gp,-1812 # 80000b74 <metal_segment_bss_target_end>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20000116:	00735763          	bge	t1,t2,20000124 <_start+0xa4>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
2000011a:	00032023          	sw	zero,0(t1)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2000011e:	0311                	addi	t1,t1,4
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20000120:	fe734de3          	blt	t1,t2,2000011a <_start+0x9a>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20000124:	c211                	beqz	a2,20000128 <_start+0xa8>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20000126:	9602                	jalr	a2
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20000128:	00001517          	auipc	a0,0x1
2000012c:	5a650513          	addi	a0,a0,1446 # 200016ce <__libc_fini_array>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20000130:	55c010ef          	jal	ra,2000168c <atexit>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20000134:	5d4010ef          	jal	ra,20001708 <__libc_init_array>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:158

  /* Register metal_fini_run as a destructor and call metal_init_run to
   * run and setup Metal constructors */
  la a0, metal_fini_run
20000138:	00002517          	auipc	a0,0x2
2000013c:	89250513          	addi	a0,a0,-1902 # 200019ca <metal_fini_run>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:159
  call atexit
20000140:	54c010ef          	jal	ra,2000168c <atexit>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:160
  call metal_init_run
20000144:	073010ef          	jal	ra,200019b6 <metal_init_run>

20000148 <_skip_init>:
_skip_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:166

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20000148:	372d                	jal	20000072 <__metal_synchronize_harts>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:169

  /* Disable and clear all interrupt sources */
  li   a3, -1
2000014a:	56fd                	li	a3,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrc mie, a3
2000014c:	3046b073          	csrc	mie,a3
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrc mip, a3
20000150:	3446b073          	csrc	mip,a3
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:175

  /* The delegation CSRs exist if user mode interrupts (N extension) or
   * supervisor mode (S extension) are supported */
  csrr a5, misa
20000154:	301027f3          	csrr	a5,misa
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:176
  lui  a4, 0x42
20000158:	00042737          	lui	a4,0x42
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
  and  a4, a4, a5
2000015c:	8f7d                	and	a4,a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  beqz a4, 1f
2000015e:	c709                	beqz	a4,20000168 <_skip_init+0x20>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  csrc mideleg, a3
20000160:	3036b073          	csrc	mideleg,a3
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  csrc medeleg, a3
20000164:	3026b073          	csrc	medeleg,a3
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:184
1:

  /* The satp CSR exists if supervisor mode (S extension) is supported */
  lui  a4, 0x40
20000168:	00040737          	lui	a4,0x40
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:185
  and  a4, a4, a5
2000016c:	8f7d                	and	a4,a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:186
  beqz a4, 1f
2000016e:	c319                	beqz	a4,20000174 <_skip_init+0x2c>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:187
  csrc satp, a3
20000170:	1806b073          	csrc	satp,a3
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:191
1:

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  li   a4, 0x10028
20000174:	00010737          	lui	a4,0x10
20000178:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  and  a5, a5, a4
2000017c:	8ff9                	and	a5,a5,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:193
  beqz a5, 1f
2000017e:	cb89                	beqz	a5,20000190 <_skip_init+0x48>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:194
  csrr a5, mstatus
20000180:	300027f3          	csrr	a5,mstatus
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:195
  lui  a4, 0x2
20000184:	6709                	lui	a4,0x2
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:196
  or   a5, a5, a4
20000186:	8fd9                	or	a5,a5,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:197
  csrw mstatus, a5
20000188:	30079073          	csrw	mstatus,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:198
  csrwi fcsr, 0
2000018c:	00305073          	csrwi	fcsr,0
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20000190:	4505                	li	a0,1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:205
  la a1, argv  /* argv = {"libgloss", NULL} */
20000192:	00006597          	auipc	a1,0x6
20000196:	f7a58593          	addi	a1,a1,-134 # 2000610c <argv>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:206
  la a2, envp  /* envp = {NULL} */
2000019a:	00006617          	auipc	a2,0x6
2000019e:	f7660613          	addi	a2,a2,-138 # 20006110 <envp>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:207
  call secondary_main
200001a2:	2031                	jal	200001ae <secondary_main>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:213

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
200001a4:	4fe010ef          	jal	ra,200016a2 <exit>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:218

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
200001a8:	80a2                	mv	ra,s0
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:219
  ret
200001aa:	8082                	ret

200001ac <_fini>:
_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:231
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
200001ac:	8082                	ret

200001ae <secondary_main>:
secondary_main():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:242
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
200001ae:	1141                	addi	sp,sp,-16
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:244
#if __riscv_xlen == 32
  sw ra, 4(sp)
200001b0:	c206                	sw	ra,4(sp)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:248
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
200001b2:	f14022f3          	csrr	t0,mhartid
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:249
  la t1, __metal_boot_hart
200001b6:	00000313          	li	t1,0
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:250
  beq t0, t1, 2f
200001ba:	00628563          	beq	t0,t1,200001c4 <secondary_main+0x16>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:252
1:
  wfi
200001be:	10500073          	wfi
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:253
  j 1b
200001c2:	bff5                	j	200001be <secondary_main+0x10>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:255
2:
  call main
200001c4:	2891                	jal	20000218 <main>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:257
#if __riscv_xlen == 32
  lw ra, 4(sp)
200001c6:	4092                	lw	ra,4(sp)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:261
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
200001c8:	0141                	addi	sp,sp,16
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/crt0.S:262
  ret
200001ca:	8082                	ret

Disassembly of section .text:

20000200 <register_fini>:
register_fini():
20000200:	e0000797          	auipc	a5,0xe0000
20000204:	e0078793          	addi	a5,a5,-512 # 0 <__metal_boot_hart>
20000208:	c799                	beqz	a5,20000216 <register_fini+0x16>
2000020a:	00001517          	auipc	a0,0x1
2000020e:	4c450513          	addi	a0,a0,1220 # 200016ce <__libc_fini_array>
20000212:	47a0106f          	j	2000168c <atexit>
20000216:	8082                	ret

20000218 <main>:
main():
/home/michael/projects/freedom-e-sdk/software/lofive-boot/lofive-boot.c:10
#include <metal/init.h>

#define FINAL_ADDRESS 0x20400000

int main()
{
20000218:	1101                	addi	sp,sp,-32
2000021a:	ce06                	sw	ra,28(sp)
2000021c:	cc22                	sw	s0,24(sp)
2000021e:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/software/lofive-boot/lofive-boot.c:11
    printf("=== LoFive Bootloader ===\n");
20000220:	200067b7          	lui	a5,0x20006
20000224:	04478513          	addi	a0,a5,68 # 20006044 <_exit+0x14>
20000228:	22b9                	jal	20000376 <puts>
/home/michael/projects/freedom-e-sdk/software/lofive-boot/lofive-boot.c:12
    printf("Jumping to %x\n", FINAL_ADDRESS);
2000022a:	204005b7          	lui	a1,0x20400
2000022e:	200067b7          	lui	a5,0x20006
20000232:	06078513          	addi	a0,a5,96 # 20006060 <_exit+0x30>
20000236:	200d                	jal	20000258 <iprintf>
/home/michael/projects/freedom-e-sdk/software/lofive-boot/lofive-boot.c:14

    void (*pgm_start)(void) = (void*) FINAL_ADDRESS;
20000238:	204007b7          	lui	a5,0x20400
2000023c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/software/lofive-boot/lofive-boot.c:15
    pgm_start();
20000240:	fec42783          	lw	a5,-20(s0)
20000244:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/software/lofive-boot/lofive-boot.c:17

    return 0xDEADBEEF;
20000246:	deadc7b7          	lui	a5,0xdeadc
2000024a:	eef78793          	addi	a5,a5,-273 # deadbeef <metal_segment_heap_target_end+0x5eada77b>
/home/michael/projects/freedom-e-sdk/software/lofive-boot/lofive-boot.c:18
}
2000024e:	853e                	mv	a0,a5
20000250:	40f2                	lw	ra,28(sp)
20000252:	4462                	lw	s0,24(sp)
20000254:	6105                	addi	sp,sp,32
20000256:	8082                	ret

20000258 <iprintf>:
printf():
20000258:	7139                	addi	sp,sp,-64
2000025a:	da3e                	sw	a5,52(sp)
2000025c:	d22e                	sw	a1,36(sp)
2000025e:	d432                	sw	a2,40(sp)
20000260:	d636                	sw	a3,44(sp)
20000262:	d83a                	sw	a4,48(sp)
20000264:	dc42                	sw	a6,56(sp)
20000266:	de46                	sw	a7,60(sp)
20000268:	60001797          	auipc	a5,0x60001
2000026c:	82078793          	addi	a5,a5,-2016 # 80000a88 <_impure_ptr>
20000270:	cc22                	sw	s0,24(sp)
20000272:	4380                	lw	s0,0(a5)
20000274:	ca26                	sw	s1,20(sp)
20000276:	ce06                	sw	ra,28(sp)
20000278:	84aa                	mv	s1,a0
2000027a:	c409                	beqz	s0,20000284 <iprintf+0x2c>
2000027c:	4c1c                	lw	a5,24(s0)
2000027e:	e399                	bnez	a5,20000284 <iprintf+0x2c>
20000280:	8522                	mv	a0,s0
20000282:	2325                	jal	200007aa <__sinit>
20000284:	440c                	lw	a1,8(s0)
20000286:	1054                	addi	a3,sp,36
20000288:	8626                	mv	a2,s1
2000028a:	8522                	mv	a0,s0
2000028c:	c636                	sw	a3,12(sp)
2000028e:	223000ef          	jal	ra,20000cb0 <_vfiprintf_r>
20000292:	40f2                	lw	ra,28(sp)
20000294:	4462                	lw	s0,24(sp)
20000296:	44d2                	lw	s1,20(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	8082                	ret

2000029c <_puts_r>:
_puts_r():
2000029c:	1101                	addi	sp,sp,-32
2000029e:	ca26                	sw	s1,20(sp)
200002a0:	c84a                	sw	s2,16(sp)
200002a2:	ce06                	sw	ra,28(sp)
200002a4:	cc22                	sw	s0,24(sp)
200002a6:	c64e                	sw	s3,12(sp)
200002a8:	c452                	sw	s4,8(sp)
200002aa:	84aa                	mv	s1,a0
200002ac:	892e                	mv	s2,a1
200002ae:	c501                	beqz	a0,200002b6 <_puts_r+0x1a>
200002b0:	4d1c                	lw	a5,24(a0)
200002b2:	e391                	bnez	a5,200002b6 <_puts_r+0x1a>
200002b4:	29dd                	jal	200007aa <__sinit>
200002b6:	4c9c                	lw	a5,24(s1)
200002b8:	4480                	lw	s0,8(s1)
200002ba:	e399                	bnez	a5,200002c0 <_puts_r+0x24>
200002bc:	8526                	mv	a0,s1
200002be:	21f5                	jal	200007aa <__sinit>
200002c0:	00006797          	auipc	a5,0x6
200002c4:	dd078793          	addi	a5,a5,-560 # 20006090 <__sf_fake_stdin>
200002c8:	02f41c63          	bne	s0,a5,20000300 <_puts_r+0x64>
200002cc:	40c0                	lw	s0,4(s1)
200002ce:	00c45783          	lhu	a5,12(s0)
200002d2:	8ba1                	andi	a5,a5,8
200002d4:	c7b1                	beqz	a5,20000320 <_puts_r+0x84>
200002d6:	481c                	lw	a5,16(s0)
200002d8:	c7a1                	beqz	a5,20000320 <_puts_r+0x84>
200002da:	59fd                	li	s3,-1
200002dc:	4a29                	li	s4,10
200002de:	441c                	lw	a5,8(s0)
200002e0:	00094583          	lbu	a1,0(s2)
200002e4:	17fd                	addi	a5,a5,-1
200002e6:	e9b1                	bnez	a1,2000033a <_puts_r+0x9e>
200002e8:	c41c                	sw	a5,8(s0)
200002ea:	0607de63          	bgez	a5,20000366 <_puts_r+0xca>
200002ee:	8622                	mv	a2,s0
200002f0:	45a9                	li	a1,10
200002f2:	8526                	mv	a0,s1
200002f4:	2841                	jal	20000384 <__swbuf_r>
200002f6:	57fd                	li	a5,-1
200002f8:	02f50863          	beq	a0,a5,20000328 <_puts_r+0x8c>
200002fc:	4529                	li	a0,10
200002fe:	a035                	j	2000032a <_puts_r+0x8e>
20000300:	00006797          	auipc	a5,0x6
20000304:	db078793          	addi	a5,a5,-592 # 200060b0 <__sf_fake_stdout>
20000308:	00f41463          	bne	s0,a5,20000310 <_puts_r+0x74>
2000030c:	4480                	lw	s0,8(s1)
2000030e:	b7c1                	j	200002ce <_puts_r+0x32>
20000310:	00006797          	auipc	a5,0x6
20000314:	d6078793          	addi	a5,a5,-672 # 20006070 <__sf_fake_stderr>
20000318:	faf41be3          	bne	s0,a5,200002ce <_puts_r+0x32>
2000031c:	44c0                	lw	s0,12(s1)
2000031e:	bf45                	j	200002ce <_puts_r+0x32>
20000320:	85a2                	mv	a1,s0
20000322:	8526                	mv	a0,s1
20000324:	2205                	jal	20000444 <__swsetup_r>
20000326:	d955                	beqz	a0,200002da <_puts_r+0x3e>
20000328:	557d                	li	a0,-1
2000032a:	40f2                	lw	ra,28(sp)
2000032c:	4462                	lw	s0,24(sp)
2000032e:	44d2                	lw	s1,20(sp)
20000330:	4942                	lw	s2,16(sp)
20000332:	49b2                	lw	s3,12(sp)
20000334:	4a22                	lw	s4,8(sp)
20000336:	6105                	addi	sp,sp,32
20000338:	8082                	ret
2000033a:	c41c                	sw	a5,8(s0)
2000033c:	0905                	addi	s2,s2,1
2000033e:	0007d763          	bgez	a5,2000034c <_puts_r+0xb0>
20000342:	4c18                	lw	a4,24(s0)
20000344:	00e7cb63          	blt	a5,a4,2000035a <_puts_r+0xbe>
20000348:	01458963          	beq	a1,s4,2000035a <_puts_r+0xbe>
2000034c:	401c                	lw	a5,0(s0)
2000034e:	00178713          	addi	a4,a5,1
20000352:	c018                	sw	a4,0(s0)
20000354:	00b78023          	sb	a1,0(a5)
20000358:	b759                	j	200002de <_puts_r+0x42>
2000035a:	8622                	mv	a2,s0
2000035c:	8526                	mv	a0,s1
2000035e:	201d                	jal	20000384 <__swbuf_r>
20000360:	f7351fe3          	bne	a0,s3,200002de <_puts_r+0x42>
20000364:	b7d1                	j	20000328 <_puts_r+0x8c>
20000366:	401c                	lw	a5,0(s0)
20000368:	00178713          	addi	a4,a5,1
2000036c:	c018                	sw	a4,0(s0)
2000036e:	4729                	li	a4,10
20000370:	00e78023          	sb	a4,0(a5)
20000374:	b761                	j	200002fc <_puts_r+0x60>

20000376 <puts>:
puts():
20000376:	60000797          	auipc	a5,0x60000
2000037a:	71278793          	addi	a5,a5,1810 # 80000a88 <_impure_ptr>
2000037e:	85aa                	mv	a1,a0
20000380:	4388                	lw	a0,0(a5)
20000382:	bf29                	j	2000029c <_puts_r>

20000384 <__swbuf_r>:
__swbuf_r():
20000384:	1101                	addi	sp,sp,-32
20000386:	cc22                	sw	s0,24(sp)
20000388:	ca26                	sw	s1,20(sp)
2000038a:	c84a                	sw	s2,16(sp)
2000038c:	ce06                	sw	ra,28(sp)
2000038e:	c64e                	sw	s3,12(sp)
20000390:	84aa                	mv	s1,a0
20000392:	892e                	mv	s2,a1
20000394:	8432                	mv	s0,a2
20000396:	c501                	beqz	a0,2000039e <__swbuf_r+0x1a>
20000398:	4d1c                	lw	a5,24(a0)
2000039a:	e391                	bnez	a5,2000039e <__swbuf_r+0x1a>
2000039c:	2139                	jal	200007aa <__sinit>
2000039e:	00006797          	auipc	a5,0x6
200003a2:	cf278793          	addi	a5,a5,-782 # 20006090 <__sf_fake_stdin>
200003a6:	06f41963          	bne	s0,a5,20000418 <__swbuf_r+0x94>
200003aa:	40c0                	lw	s0,4(s1)
200003ac:	4c1c                	lw	a5,24(s0)
200003ae:	c41c                	sw	a5,8(s0)
200003b0:	00c45783          	lhu	a5,12(s0)
200003b4:	8ba1                	andi	a5,a5,8
200003b6:	c3c9                	beqz	a5,20000438 <__swbuf_r+0xb4>
200003b8:	481c                	lw	a5,16(s0)
200003ba:	cfbd                	beqz	a5,20000438 <__swbuf_r+0xb4>
200003bc:	481c                	lw	a5,16(s0)
200003be:	4008                	lw	a0,0(s0)
200003c0:	0ff97993          	andi	s3,s2,255
200003c4:	0ff97913          	andi	s2,s2,255
200003c8:	8d1d                	sub	a0,a0,a5
200003ca:	485c                	lw	a5,20(s0)
200003cc:	00f54663          	blt	a0,a5,200003d8 <__swbuf_r+0x54>
200003d0:	85a2                	mv	a1,s0
200003d2:	8526                	mv	a0,s1
200003d4:	2c75                	jal	20000690 <_fflush_r>
200003d6:	e52d                	bnez	a0,20000440 <__swbuf_r+0xbc>
200003d8:	441c                	lw	a5,8(s0)
200003da:	0505                	addi	a0,a0,1
200003dc:	17fd                	addi	a5,a5,-1
200003de:	c41c                	sw	a5,8(s0)
200003e0:	401c                	lw	a5,0(s0)
200003e2:	00178713          	addi	a4,a5,1
200003e6:	c018                	sw	a4,0(s0)
200003e8:	01378023          	sb	s3,0(a5)
200003ec:	485c                	lw	a5,20(s0)
200003ee:	00a78963          	beq	a5,a0,20000400 <__swbuf_r+0x7c>
200003f2:	00c45783          	lhu	a5,12(s0)
200003f6:	8b85                	andi	a5,a5,1
200003f8:	cb81                	beqz	a5,20000408 <__swbuf_r+0x84>
200003fa:	47a9                	li	a5,10
200003fc:	00f91663          	bne	s2,a5,20000408 <__swbuf_r+0x84>
20000400:	85a2                	mv	a1,s0
20000402:	8526                	mv	a0,s1
20000404:	2471                	jal	20000690 <_fflush_r>
20000406:	ed0d                	bnez	a0,20000440 <__swbuf_r+0xbc>
20000408:	40f2                	lw	ra,28(sp)
2000040a:	4462                	lw	s0,24(sp)
2000040c:	854a                	mv	a0,s2
2000040e:	44d2                	lw	s1,20(sp)
20000410:	4942                	lw	s2,16(sp)
20000412:	49b2                	lw	s3,12(sp)
20000414:	6105                	addi	sp,sp,32
20000416:	8082                	ret
20000418:	00006797          	auipc	a5,0x6
2000041c:	c9878793          	addi	a5,a5,-872 # 200060b0 <__sf_fake_stdout>
20000420:	00f41463          	bne	s0,a5,20000428 <__swbuf_r+0xa4>
20000424:	4480                	lw	s0,8(s1)
20000426:	b759                	j	200003ac <__swbuf_r+0x28>
20000428:	00006797          	auipc	a5,0x6
2000042c:	c4878793          	addi	a5,a5,-952 # 20006070 <__sf_fake_stderr>
20000430:	f6f41ee3          	bne	s0,a5,200003ac <__swbuf_r+0x28>
20000434:	44c0                	lw	s0,12(s1)
20000436:	bf9d                	j	200003ac <__swbuf_r+0x28>
20000438:	85a2                	mv	a1,s0
2000043a:	8526                	mv	a0,s1
2000043c:	2021                	jal	20000444 <__swsetup_r>
2000043e:	dd3d                	beqz	a0,200003bc <__swbuf_r+0x38>
20000440:	597d                	li	s2,-1
20000442:	b7d9                	j	20000408 <__swbuf_r+0x84>

20000444 <__swsetup_r>:
__swsetup_r():
20000444:	1141                	addi	sp,sp,-16
20000446:	60000797          	auipc	a5,0x60000
2000044a:	64278793          	addi	a5,a5,1602 # 80000a88 <_impure_ptr>
2000044e:	c226                	sw	s1,4(sp)
20000450:	4384                	lw	s1,0(a5)
20000452:	c422                	sw	s0,8(sp)
20000454:	c04a                	sw	s2,0(sp)
20000456:	c606                	sw	ra,12(sp)
20000458:	892a                	mv	s2,a0
2000045a:	842e                	mv	s0,a1
2000045c:	c489                	beqz	s1,20000466 <__swsetup_r+0x22>
2000045e:	4c9c                	lw	a5,24(s1)
20000460:	e399                	bnez	a5,20000466 <__swsetup_r+0x22>
20000462:	8526                	mv	a0,s1
20000464:	2699                	jal	200007aa <__sinit>
20000466:	00006797          	auipc	a5,0x6
2000046a:	c2a78793          	addi	a5,a5,-982 # 20006090 <__sf_fake_stdin>
2000046e:	02f41c63          	bne	s0,a5,200004a6 <__swsetup_r+0x62>
20000472:	40c0                	lw	s0,4(s1)
20000474:	00c41703          	lh	a4,12(s0)
20000478:	01071793          	slli	a5,a4,0x10
2000047c:	83c1                	srli	a5,a5,0x10
2000047e:	0087f693          	andi	a3,a5,8
20000482:	eeb5                	bnez	a3,200004fe <__swsetup_r+0xba>
20000484:	0107f693          	andi	a3,a5,16
20000488:	ee9d                	bnez	a3,200004c6 <__swsetup_r+0x82>
2000048a:	47a5                	li	a5,9
2000048c:	00f92023          	sw	a5,0(s2)
20000490:	04076713          	ori	a4,a4,64
20000494:	00e41623          	sh	a4,12(s0)
20000498:	557d                	li	a0,-1
2000049a:	40b2                	lw	ra,12(sp)
2000049c:	4422                	lw	s0,8(sp)
2000049e:	4492                	lw	s1,4(sp)
200004a0:	4902                	lw	s2,0(sp)
200004a2:	0141                	addi	sp,sp,16
200004a4:	8082                	ret
200004a6:	00006797          	auipc	a5,0x6
200004aa:	c0a78793          	addi	a5,a5,-1014 # 200060b0 <__sf_fake_stdout>
200004ae:	00f41463          	bne	s0,a5,200004b6 <__swsetup_r+0x72>
200004b2:	4480                	lw	s0,8(s1)
200004b4:	b7c1                	j	20000474 <__swsetup_r+0x30>
200004b6:	00006797          	auipc	a5,0x6
200004ba:	bba78793          	addi	a5,a5,-1094 # 20006070 <__sf_fake_stderr>
200004be:	faf41be3          	bne	s0,a5,20000474 <__swsetup_r+0x30>
200004c2:	44c0                	lw	s0,12(s1)
200004c4:	bf45                	j	20000474 <__swsetup_r+0x30>
200004c6:	8b91                	andi	a5,a5,4
200004c8:	c78d                	beqz	a5,200004f2 <__swsetup_r+0xae>
200004ca:	584c                	lw	a1,52(s0)
200004cc:	c989                	beqz	a1,200004de <__swsetup_r+0x9a>
200004ce:	04440793          	addi	a5,s0,68
200004d2:	00f58463          	beq	a1,a5,200004da <__swsetup_r+0x96>
200004d6:	854a                	mv	a0,s2
200004d8:	23cd                	jal	20000aba <_free_r>
200004da:	02042a23          	sw	zero,52(s0)
200004de:	00c45783          	lhu	a5,12(s0)
200004e2:	00042223          	sw	zero,4(s0)
200004e6:	fdb7f793          	andi	a5,a5,-37
200004ea:	00f41623          	sh	a5,12(s0)
200004ee:	481c                	lw	a5,16(s0)
200004f0:	c01c                	sw	a5,0(s0)
200004f2:	00c45783          	lhu	a5,12(s0)
200004f6:	0087e793          	ori	a5,a5,8
200004fa:	00f41623          	sh	a5,12(s0)
200004fe:	481c                	lw	a5,16(s0)
20000500:	ef81                	bnez	a5,20000518 <__swsetup_r+0xd4>
20000502:	00c45783          	lhu	a5,12(s0)
20000506:	20000713          	li	a4,512
2000050a:	2807f793          	andi	a5,a5,640
2000050e:	00e78563          	beq	a5,a4,20000518 <__swsetup_r+0xd4>
20000512:	85a2                	mv	a1,s0
20000514:	854a                	mv	a0,s2
20000516:	2185                	jal	20000976 <__smakebuf_r>
20000518:	00c45783          	lhu	a5,12(s0)
2000051c:	0017f713          	andi	a4,a5,1
20000520:	c705                	beqz	a4,20000548 <__swsetup_r+0x104>
20000522:	485c                	lw	a5,20(s0)
20000524:	00042423          	sw	zero,8(s0)
20000528:	40f007b3          	neg	a5,a5
2000052c:	cc1c                	sw	a5,24(s0)
2000052e:	481c                	lw	a5,16(s0)
20000530:	4501                	li	a0,0
20000532:	f7a5                	bnez	a5,2000049a <__swsetup_r+0x56>
20000534:	00c41783          	lh	a5,12(s0)
20000538:	0807f713          	andi	a4,a5,128
2000053c:	df39                	beqz	a4,2000049a <__swsetup_r+0x56>
2000053e:	0407e793          	ori	a5,a5,64
20000542:	00f41623          	sh	a5,12(s0)
20000546:	bf89                	j	20000498 <__swsetup_r+0x54>
20000548:	8b89                	andi	a5,a5,2
2000054a:	4701                	li	a4,0
2000054c:	e391                	bnez	a5,20000550 <__swsetup_r+0x10c>
2000054e:	4858                	lw	a4,20(s0)
20000550:	c418                	sw	a4,8(s0)
20000552:	bff1                	j	2000052e <__swsetup_r+0xea>

20000554 <__sflush_r>:
__sflush_r():
20000554:	00c5d783          	lhu	a5,12(a1) # 2040000c <metal_segment_data_source_start+0x3f9244>
20000558:	1101                	addi	sp,sp,-32
2000055a:	cc22                	sw	s0,24(sp)
2000055c:	ca26                	sw	s1,20(sp)
2000055e:	ce06                	sw	ra,28(sp)
20000560:	c84a                	sw	s2,16(sp)
20000562:	c64e                	sw	s3,12(sp)
20000564:	0087f713          	andi	a4,a5,8
20000568:	84aa                	mv	s1,a0
2000056a:	842e                	mv	s0,a1
2000056c:	ef71                	bnez	a4,20000648 <__sflush_r+0xf4>
2000056e:	41d8                	lw	a4,4(a1)
20000570:	00e04d63          	bgtz	a4,2000058a <__sflush_r+0x36>
20000574:	41b8                	lw	a4,64(a1)
20000576:	00e04a63          	bgtz	a4,2000058a <__sflush_r+0x36>
2000057a:	4501                	li	a0,0
2000057c:	40f2                	lw	ra,28(sp)
2000057e:	4462                	lw	s0,24(sp)
20000580:	44d2                	lw	s1,20(sp)
20000582:	4942                	lw	s2,16(sp)
20000584:	49b2                	lw	s3,12(sp)
20000586:	6105                	addi	sp,sp,32
20000588:	8082                	ret
2000058a:	5458                	lw	a4,44(s0)
2000058c:	d77d                	beqz	a4,2000057a <__sflush_r+0x26>
2000058e:	0004a903          	lw	s2,0(s1)
20000592:	01379693          	slli	a3,a5,0x13
20000596:	0004a023          	sw	zero,0(s1)
2000059a:	0606dd63          	bgez	a3,20000614 <__sflush_r+0xc0>
2000059e:	4870                	lw	a2,84(s0)
200005a0:	00c45783          	lhu	a5,12(s0)
200005a4:	8b91                	andi	a5,a5,4
200005a6:	c799                	beqz	a5,200005b4 <__sflush_r+0x60>
200005a8:	405c                	lw	a5,4(s0)
200005aa:	8e1d                	sub	a2,a2,a5
200005ac:	585c                	lw	a5,52(s0)
200005ae:	c399                	beqz	a5,200005b4 <__sflush_r+0x60>
200005b0:	403c                	lw	a5,64(s0)
200005b2:	8e1d                	sub	a2,a2,a5
200005b4:	545c                	lw	a5,44(s0)
200005b6:	500c                	lw	a1,32(s0)
200005b8:	4681                	li	a3,0
200005ba:	8526                	mv	a0,s1
200005bc:	9782                	jalr	a5
200005be:	57fd                	li	a5,-1
200005c0:	00c45703          	lhu	a4,12(s0)
200005c4:	00f51d63          	bne	a0,a5,200005de <__sflush_r+0x8a>
200005c8:	4094                	lw	a3,0(s1)
200005ca:	47f5                	li	a5,29
200005cc:	06d7e863          	bltu	a5,a3,2000063c <__sflush_r+0xe8>
200005d0:	204007b7          	lui	a5,0x20400
200005d4:	0785                	addi	a5,a5,1
200005d6:	00d7d7b3          	srl	a5,a5,a3
200005da:	8b85                	andi	a5,a5,1
200005dc:	c3a5                	beqz	a5,2000063c <__sflush_r+0xe8>
200005de:	481c                	lw	a5,16(s0)
200005e0:	00042223          	sw	zero,4(s0)
200005e4:	c01c                	sw	a5,0(s0)
200005e6:	01371793          	slli	a5,a4,0x13
200005ea:	0007d863          	bgez	a5,200005fa <__sflush_r+0xa6>
200005ee:	57fd                	li	a5,-1
200005f0:	00f51463          	bne	a0,a5,200005f8 <__sflush_r+0xa4>
200005f4:	409c                	lw	a5,0(s1)
200005f6:	e391                	bnez	a5,200005fa <__sflush_r+0xa6>
200005f8:	c868                	sw	a0,84(s0)
200005fa:	584c                	lw	a1,52(s0)
200005fc:	0124a023          	sw	s2,0(s1)
20000600:	ddad                	beqz	a1,2000057a <__sflush_r+0x26>
20000602:	04440793          	addi	a5,s0,68
20000606:	00f58463          	beq	a1,a5,2000060e <__sflush_r+0xba>
2000060a:	8526                	mv	a0,s1
2000060c:	217d                	jal	20000aba <_free_r>
2000060e:	02042a23          	sw	zero,52(s0)
20000612:	b7a5                	j	2000057a <__sflush_r+0x26>
20000614:	500c                	lw	a1,32(s0)
20000616:	4601                	li	a2,0
20000618:	4685                	li	a3,1
2000061a:	8526                	mv	a0,s1
2000061c:	9702                	jalr	a4
2000061e:	57fd                	li	a5,-1
20000620:	862a                	mv	a2,a0
20000622:	f6f51fe3          	bne	a0,a5,200005a0 <__sflush_r+0x4c>
20000626:	409c                	lw	a5,0(s1)
20000628:	dfa5                	beqz	a5,200005a0 <__sflush_r+0x4c>
2000062a:	4775                	li	a4,29
2000062c:	00e78563          	beq	a5,a4,20000636 <__sflush_r+0xe2>
20000630:	4759                	li	a4,22
20000632:	04e79463          	bne	a5,a4,2000067a <__sflush_r+0x126>
20000636:	0124a023          	sw	s2,0(s1)
2000063a:	b781                	j	2000057a <__sflush_r+0x26>
2000063c:	04076713          	ori	a4,a4,64
20000640:	00e41623          	sh	a4,12(s0)
20000644:	557d                	li	a0,-1
20000646:	bf1d                	j	2000057c <__sflush_r+0x28>
20000648:	0105a983          	lw	s3,16(a1)
2000064c:	f20987e3          	beqz	s3,2000057a <__sflush_r+0x26>
20000650:	0005a903          	lw	s2,0(a1)
20000654:	8b8d                	andi	a5,a5,3
20000656:	0135a023          	sw	s3,0(a1)
2000065a:	41390933          	sub	s2,s2,s3
2000065e:	4701                	li	a4,0
20000660:	e391                	bnez	a5,20000664 <__sflush_r+0x110>
20000662:	49d8                	lw	a4,20(a1)
20000664:	c418                	sw	a4,8(s0)
20000666:	f1205ae3          	blez	s2,2000057a <__sflush_r+0x26>
2000066a:	541c                	lw	a5,40(s0)
2000066c:	500c                	lw	a1,32(s0)
2000066e:	86ca                	mv	a3,s2
20000670:	864e                	mv	a2,s3
20000672:	8526                	mv	a0,s1
20000674:	9782                	jalr	a5
20000676:	00a04963          	bgtz	a0,20000688 <__sflush_r+0x134>
2000067a:	00c45783          	lhu	a5,12(s0)
2000067e:	0407e793          	ori	a5,a5,64
20000682:	00f41623          	sh	a5,12(s0)
20000686:	bf7d                	j	20000644 <__sflush_r+0xf0>
20000688:	99aa                	add	s3,s3,a0
2000068a:	40a90933          	sub	s2,s2,a0
2000068e:	bfe1                	j	20000666 <__sflush_r+0x112>

20000690 <_fflush_r>:
_fflush_r():
20000690:	499c                	lw	a5,16(a1)
20000692:	cfb9                	beqz	a5,200006f0 <_fflush_r+0x60>
20000694:	1101                	addi	sp,sp,-32
20000696:	cc22                	sw	s0,24(sp)
20000698:	ce06                	sw	ra,28(sp)
2000069a:	842a                	mv	s0,a0
2000069c:	c511                	beqz	a0,200006a8 <_fflush_r+0x18>
2000069e:	4d1c                	lw	a5,24(a0)
200006a0:	e781                	bnez	a5,200006a8 <_fflush_r+0x18>
200006a2:	c62e                	sw	a1,12(sp)
200006a4:	2219                	jal	200007aa <__sinit>
200006a6:	45b2                	lw	a1,12(sp)
200006a8:	00006797          	auipc	a5,0x6
200006ac:	9e878793          	addi	a5,a5,-1560 # 20006090 <__sf_fake_stdin>
200006b0:	00f59b63          	bne	a1,a5,200006c6 <_fflush_r+0x36>
200006b4:	404c                	lw	a1,4(s0)
200006b6:	00c59783          	lh	a5,12(a1)
200006ba:	c795                	beqz	a5,200006e6 <_fflush_r+0x56>
200006bc:	8522                	mv	a0,s0
200006be:	4462                	lw	s0,24(sp)
200006c0:	40f2                	lw	ra,28(sp)
200006c2:	6105                	addi	sp,sp,32
200006c4:	bd41                	j	20000554 <__sflush_r>
200006c6:	00006797          	auipc	a5,0x6
200006ca:	9ea78793          	addi	a5,a5,-1558 # 200060b0 <__sf_fake_stdout>
200006ce:	00f59463          	bne	a1,a5,200006d6 <_fflush_r+0x46>
200006d2:	440c                	lw	a1,8(s0)
200006d4:	b7cd                	j	200006b6 <_fflush_r+0x26>
200006d6:	00006797          	auipc	a5,0x6
200006da:	99a78793          	addi	a5,a5,-1638 # 20006070 <__sf_fake_stderr>
200006de:	fcf59ce3          	bne	a1,a5,200006b6 <_fflush_r+0x26>
200006e2:	444c                	lw	a1,12(s0)
200006e4:	bfc9                	j	200006b6 <_fflush_r+0x26>
200006e6:	40f2                	lw	ra,28(sp)
200006e8:	4462                	lw	s0,24(sp)
200006ea:	4501                	li	a0,0
200006ec:	6105                	addi	sp,sp,32
200006ee:	8082                	ret
200006f0:	4501                	li	a0,0
200006f2:	8082                	ret

200006f4 <std>:
std():
200006f4:	1141                	addi	sp,sp,-16
200006f6:	c422                	sw	s0,8(sp)
200006f8:	c606                	sw	ra,12(sp)
200006fa:	842a                	mv	s0,a0
200006fc:	00b51623          	sh	a1,12(a0)
20000700:	00c51723          	sh	a2,14(a0)
20000704:	00052023          	sw	zero,0(a0)
20000708:	00052223          	sw	zero,4(a0)
2000070c:	00052423          	sw	zero,8(a0)
20000710:	06052223          	sw	zero,100(a0)
20000714:	00052823          	sw	zero,16(a0)
20000718:	00052a23          	sw	zero,20(a0)
2000071c:	00052c23          	sw	zero,24(a0)
20000720:	4621                	li	a2,8
20000722:	4581                	li	a1,0
20000724:	05c50513          	addi	a0,a0,92
20000728:	24ed                	jal	20000a12 <memset>
2000072a:	00001797          	auipc	a5,0x1
2000072e:	84678793          	addi	a5,a5,-1978 # 20000f70 <__sread>
20000732:	d05c                	sw	a5,36(s0)
20000734:	00001797          	auipc	a5,0x1
20000738:	86c78793          	addi	a5,a5,-1940 # 20000fa0 <__swrite>
2000073c:	d41c                	sw	a5,40(s0)
2000073e:	00001797          	auipc	a5,0x1
20000742:	8b078793          	addi	a5,a5,-1872 # 20000fee <__sseek>
20000746:	d45c                	sw	a5,44(s0)
20000748:	00001797          	auipc	a5,0x1
2000074c:	8dc78793          	addi	a5,a5,-1828 # 20001024 <__sclose>
20000750:	d000                	sw	s0,32(s0)
20000752:	d81c                	sw	a5,48(s0)
20000754:	40b2                	lw	ra,12(sp)
20000756:	4422                	lw	s0,8(sp)
20000758:	0141                	addi	sp,sp,16
2000075a:	8082                	ret

2000075c <_cleanup_r>:
_cleanup_r():
2000075c:	00000597          	auipc	a1,0x0
20000760:	f3458593          	addi	a1,a1,-204 # 20000690 <_fflush_r>
20000764:	a2b9                	j	200008b2 <_fwalk_reent>

20000766 <__sfmoreglue>:
__sfmoreglue():
20000766:	1141                	addi	sp,sp,-16
20000768:	c226                	sw	s1,4(sp)
2000076a:	06800613          	li	a2,104
2000076e:	fff58493          	addi	s1,a1,-1
20000772:	02c484b3          	mul	s1,s1,a2
20000776:	c04a                	sw	s2,0(sp)
20000778:	892e                	mv	s2,a1
2000077a:	c422                	sw	s0,8(sp)
2000077c:	c606                	sw	ra,12(sp)
2000077e:	07448593          	addi	a1,s1,116
20000782:	26d5                	jal	20000b66 <_malloc_r>
20000784:	842a                	mv	s0,a0
20000786:	c919                	beqz	a0,2000079c <__sfmoreglue+0x36>
20000788:	00052023          	sw	zero,0(a0)
2000078c:	01252223          	sw	s2,4(a0)
20000790:	0531                	addi	a0,a0,12
20000792:	c408                	sw	a0,8(s0)
20000794:	06848613          	addi	a2,s1,104
20000798:	4581                	li	a1,0
2000079a:	2ca5                	jal	20000a12 <memset>
2000079c:	8522                	mv	a0,s0
2000079e:	40b2                	lw	ra,12(sp)
200007a0:	4422                	lw	s0,8(sp)
200007a2:	4492                	lw	s1,4(sp)
200007a4:	4902                	lw	s2,0(sp)
200007a6:	0141                	addi	sp,sp,16
200007a8:	8082                	ret

200007aa <__sinit>:
__sinit():
200007aa:	4d1c                	lw	a5,24(a0)
200007ac:	e3bd                	bnez	a5,20000812 <__sinit+0x68>
200007ae:	1141                	addi	sp,sp,-16
200007b0:	c606                	sw	ra,12(sp)
200007b2:	c422                	sw	s0,8(sp)
200007b4:	00000797          	auipc	a5,0x0
200007b8:	fa878793          	addi	a5,a5,-88 # 2000075c <_cleanup_r>
200007bc:	d51c                	sw	a5,40(a0)
200007be:	60000797          	auipc	a5,0x60000
200007c2:	2ce78793          	addi	a5,a5,718 # 80000a8c <_global_impure_ptr>
200007c6:	439c                	lw	a5,0(a5)
200007c8:	04052423          	sw	zero,72(a0)
200007cc:	04052623          	sw	zero,76(a0)
200007d0:	04052823          	sw	zero,80(a0)
200007d4:	00f51463          	bne	a0,a5,200007dc <__sinit+0x32>
200007d8:	4785                	li	a5,1
200007da:	cd1c                	sw	a5,24(a0)
200007dc:	842a                	mv	s0,a0
200007de:	281d                	jal	20000814 <__sfp>
200007e0:	c048                	sw	a0,4(s0)
200007e2:	8522                	mv	a0,s0
200007e4:	2805                	jal	20000814 <__sfp>
200007e6:	c408                	sw	a0,8(s0)
200007e8:	8522                	mv	a0,s0
200007ea:	202d                	jal	20000814 <__sfp>
200007ec:	c448                	sw	a0,12(s0)
200007ee:	4048                	lw	a0,4(s0)
200007f0:	4601                	li	a2,0
200007f2:	4591                	li	a1,4
200007f4:	3701                	jal	200006f4 <std>
200007f6:	4408                	lw	a0,8(s0)
200007f8:	4605                	li	a2,1
200007fa:	45a5                	li	a1,9
200007fc:	3de5                	jal	200006f4 <std>
200007fe:	4448                	lw	a0,12(s0)
20000800:	4609                	li	a2,2
20000802:	45c9                	li	a1,18
20000804:	3dc5                	jal	200006f4 <std>
20000806:	4785                	li	a5,1
20000808:	cc1c                	sw	a5,24(s0)
2000080a:	40b2                	lw	ra,12(sp)
2000080c:	4422                	lw	s0,8(sp)
2000080e:	0141                	addi	sp,sp,16
20000810:	8082                	ret
20000812:	8082                	ret

20000814 <__sfp>:
__sfp():
20000814:	1141                	addi	sp,sp,-16
20000816:	60000797          	auipc	a5,0x60000
2000081a:	27678793          	addi	a5,a5,630 # 80000a8c <_global_impure_ptr>
2000081e:	c226                	sw	s1,4(sp)
20000820:	4384                	lw	s1,0(a5)
20000822:	c04a                	sw	s2,0(sp)
20000824:	c606                	sw	ra,12(sp)
20000826:	4c9c                	lw	a5,24(s1)
20000828:	c422                	sw	s0,8(sp)
2000082a:	892a                	mv	s2,a0
2000082c:	e399                	bnez	a5,20000832 <__sfp+0x1e>
2000082e:	8526                	mv	a0,s1
20000830:	3fad                	jal	200007aa <__sinit>
20000832:	04848493          	addi	s1,s1,72
20000836:	4480                	lw	s0,8(s1)
20000838:	40dc                	lw	a5,4(s1)
2000083a:	17fd                	addi	a5,a5,-1
2000083c:	0007d663          	bgez	a5,20000848 <__sfp+0x34>
20000840:	409c                	lw	a5,0(s1)
20000842:	cfb1                	beqz	a5,2000089e <__sfp+0x8a>
20000844:	4084                	lw	s1,0(s1)
20000846:	bfc5                	j	20000836 <__sfp+0x22>
20000848:	00c41703          	lh	a4,12(s0)
2000084c:	e731                	bnez	a4,20000898 <__sfp+0x84>
2000084e:	77c1                	lui	a5,0xffff0
20000850:	0785                	addi	a5,a5,1
20000852:	06042223          	sw	zero,100(s0)
20000856:	00042023          	sw	zero,0(s0)
2000085a:	00042223          	sw	zero,4(s0)
2000085e:	00042423          	sw	zero,8(s0)
20000862:	c45c                	sw	a5,12(s0)
20000864:	00042823          	sw	zero,16(s0)
20000868:	00042a23          	sw	zero,20(s0)
2000086c:	00042c23          	sw	zero,24(s0)
20000870:	4621                	li	a2,8
20000872:	4581                	li	a1,0
20000874:	05c40513          	addi	a0,s0,92
20000878:	2a69                	jal	20000a12 <memset>
2000087a:	02042a23          	sw	zero,52(s0)
2000087e:	02042c23          	sw	zero,56(s0)
20000882:	04042423          	sw	zero,72(s0)
20000886:	04042623          	sw	zero,76(s0)
2000088a:	8522                	mv	a0,s0
2000088c:	40b2                	lw	ra,12(sp)
2000088e:	4422                	lw	s0,8(sp)
20000890:	4492                	lw	s1,4(sp)
20000892:	4902                	lw	s2,0(sp)
20000894:	0141                	addi	sp,sp,16
20000896:	8082                	ret
20000898:	06840413          	addi	s0,s0,104
2000089c:	bf79                	j	2000083a <__sfp+0x26>
2000089e:	4591                	li	a1,4
200008a0:	854a                	mv	a0,s2
200008a2:	35d1                	jal	20000766 <__sfmoreglue>
200008a4:	c088                	sw	a0,0(s1)
200008a6:	fd59                	bnez	a0,20000844 <__sfp+0x30>
200008a8:	47b1                	li	a5,12
200008aa:	00f92023          	sw	a5,0(s2)
200008ae:	4401                	li	s0,0
200008b0:	bfe9                	j	2000088a <__sfp+0x76>

200008b2 <_fwalk_reent>:
_fwalk_reent():
200008b2:	7179                	addi	sp,sp,-48
200008b4:	d422                	sw	s0,40(sp)
200008b6:	d04a                	sw	s2,32(sp)
200008b8:	cc52                	sw	s4,24(sp)
200008ba:	ca56                	sw	s5,20(sp)
200008bc:	c85a                	sw	s6,16(sp)
200008be:	c65e                	sw	s7,12(sp)
200008c0:	d606                	sw	ra,44(sp)
200008c2:	d226                	sw	s1,36(sp)
200008c4:	ce4e                	sw	s3,28(sp)
200008c6:	8a2a                	mv	s4,a0
200008c8:	8aae                	mv	s5,a1
200008ca:	04850413          	addi	s0,a0,72
200008ce:	4901                	li	s2,0
200008d0:	4b05                	li	s6,1
200008d2:	5bfd                	li	s7,-1
200008d4:	ec09                	bnez	s0,200008ee <_fwalk_reent+0x3c>
200008d6:	50b2                	lw	ra,44(sp)
200008d8:	5422                	lw	s0,40(sp)
200008da:	854a                	mv	a0,s2
200008dc:	5492                	lw	s1,36(sp)
200008de:	5902                	lw	s2,32(sp)
200008e0:	49f2                	lw	s3,28(sp)
200008e2:	4a62                	lw	s4,24(sp)
200008e4:	4ad2                	lw	s5,20(sp)
200008e6:	4b42                	lw	s6,16(sp)
200008e8:	4bb2                	lw	s7,12(sp)
200008ea:	6145                	addi	sp,sp,48
200008ec:	8082                	ret
200008ee:	4404                	lw	s1,8(s0)
200008f0:	00442983          	lw	s3,4(s0)
200008f4:	19fd                	addi	s3,s3,-1
200008f6:	0009d463          	bgez	s3,200008fe <_fwalk_reent+0x4c>
200008fa:	4000                	lw	s0,0(s0)
200008fc:	bfe1                	j	200008d4 <_fwalk_reent+0x22>
200008fe:	00c4d783          	lhu	a5,12(s1)
20000902:	00fb7b63          	bgeu	s6,a5,20000918 <_fwalk_reent+0x66>
20000906:	00e49783          	lh	a5,14(s1)
2000090a:	01778763          	beq	a5,s7,20000918 <_fwalk_reent+0x66>
2000090e:	85a6                	mv	a1,s1
20000910:	8552                	mv	a0,s4
20000912:	9a82                	jalr	s5
20000914:	00a96933          	or	s2,s2,a0
20000918:	06848493          	addi	s1,s1,104
2000091c:	bfe1                	j	200008f4 <_fwalk_reent+0x42>

2000091e <__swhatbuf_r>:
__swhatbuf_r():
2000091e:	7119                	addi	sp,sp,-128
20000920:	daa6                	sw	s1,116(sp)
20000922:	84ae                	mv	s1,a1
20000924:	00e59583          	lh	a1,14(a1)
20000928:	dca2                	sw	s0,120(sp)
2000092a:	de86                	sw	ra,124(sp)
2000092c:	8432                	mv	s0,a2
2000092e:	0005dc63          	bgez	a1,20000946 <__swhatbuf_r+0x28>
20000932:	00c4d783          	lhu	a5,12(s1)
20000936:	0006a023          	sw	zero,0(a3)
2000093a:	0807f793          	andi	a5,a5,128
2000093e:	e39d                	bnez	a5,20000964 <__swhatbuf_r+0x46>
20000940:	40000793          	li	a5,1024
20000944:	a015                	j	20000968 <__swhatbuf_r+0x4a>
20000946:	0830                	addi	a2,sp,24
20000948:	c636                	sw	a3,12(sp)
2000094a:	2f15                	jal	2000107e <_fstat_r>
2000094c:	46b2                	lw	a3,12(sp)
2000094e:	fe0542e3          	bltz	a0,20000932 <__swhatbuf_r+0x14>
20000952:	4772                	lw	a4,28(sp)
20000954:	67bd                	lui	a5,0xf
20000956:	8ff9                	and	a5,a5,a4
20000958:	7779                	lui	a4,0xffffe
2000095a:	97ba                	add	a5,a5,a4
2000095c:	0017b793          	seqz	a5,a5
20000960:	c29c                	sw	a5,0(a3)
20000962:	bff9                	j	20000940 <__swhatbuf_r+0x22>
20000964:	04000793          	li	a5,64
20000968:	c01c                	sw	a5,0(s0)
2000096a:	50f6                	lw	ra,124(sp)
2000096c:	5466                	lw	s0,120(sp)
2000096e:	54d6                	lw	s1,116(sp)
20000970:	4501                	li	a0,0
20000972:	6109                	addi	sp,sp,128
20000974:	8082                	ret

20000976 <__smakebuf_r>:
__smakebuf_r():
20000976:	00c5d783          	lhu	a5,12(a1)
2000097a:	1101                	addi	sp,sp,-32
2000097c:	cc22                	sw	s0,24(sp)
2000097e:	ce06                	sw	ra,28(sp)
20000980:	ca26                	sw	s1,20(sp)
20000982:	c84a                	sw	s2,16(sp)
20000984:	8b89                	andi	a5,a5,2
20000986:	842e                	mv	s0,a1
20000988:	cf89                	beqz	a5,200009a2 <__smakebuf_r+0x2c>
2000098a:	04740793          	addi	a5,s0,71
2000098e:	c01c                	sw	a5,0(s0)
20000990:	c81c                	sw	a5,16(s0)
20000992:	4785                	li	a5,1
20000994:	c85c                	sw	a5,20(s0)
20000996:	40f2                	lw	ra,28(sp)
20000998:	4462                	lw	s0,24(sp)
2000099a:	44d2                	lw	s1,20(sp)
2000099c:	4942                	lw	s2,16(sp)
2000099e:	6105                	addi	sp,sp,32
200009a0:	8082                	ret
200009a2:	0074                	addi	a3,sp,12
200009a4:	0030                	addi	a2,sp,8
200009a6:	84aa                	mv	s1,a0
200009a8:	3f9d                	jal	2000091e <__swhatbuf_r>
200009aa:	45a2                	lw	a1,8(sp)
200009ac:	892a                	mv	s2,a0
200009ae:	8526                	mv	a0,s1
200009b0:	2a5d                	jal	20000b66 <_malloc_r>
200009b2:	ed01                	bnez	a0,200009ca <__smakebuf_r+0x54>
200009b4:	00c41783          	lh	a5,12(s0)
200009b8:	2007f713          	andi	a4,a5,512
200009bc:	ff69                	bnez	a4,20000996 <__smakebuf_r+0x20>
200009be:	9bf1                	andi	a5,a5,-4
200009c0:	0027e793          	ori	a5,a5,2
200009c4:	00f41623          	sh	a5,12(s0)
200009c8:	b7c9                	j	2000098a <__smakebuf_r+0x14>
200009ca:	00000797          	auipc	a5,0x0
200009ce:	d9278793          	addi	a5,a5,-622 # 2000075c <_cleanup_r>
200009d2:	d49c                	sw	a5,40(s1)
200009d4:	00c45783          	lhu	a5,12(s0)
200009d8:	c008                	sw	a0,0(s0)
200009da:	c808                	sw	a0,16(s0)
200009dc:	0807e793          	ori	a5,a5,128
200009e0:	00f41623          	sh	a5,12(s0)
200009e4:	47a2                	lw	a5,8(sp)
200009e6:	c85c                	sw	a5,20(s0)
200009e8:	47b2                	lw	a5,12(sp)
200009ea:	cf89                	beqz	a5,20000a04 <__smakebuf_r+0x8e>
200009ec:	00e41583          	lh	a1,14(s0)
200009f0:	8526                	mv	a0,s1
200009f2:	2d5d                	jal	200010a8 <_isatty_r>
200009f4:	c901                	beqz	a0,20000a04 <__smakebuf_r+0x8e>
200009f6:	00c45783          	lhu	a5,12(s0)
200009fa:	9bf1                	andi	a5,a5,-4
200009fc:	0017e793          	ori	a5,a5,1
20000a00:	00f41623          	sh	a5,12(s0)
20000a04:	00c45783          	lhu	a5,12(s0)
20000a08:	00f96933          	or	s2,s2,a5
20000a0c:	01241623          	sh	s2,12(s0)
20000a10:	b759                	j	20000996 <__smakebuf_r+0x20>

20000a12 <memset>:
memset():
20000a12:	433d                	li	t1,15
20000a14:	872a                	mv	a4,a0
20000a16:	02c37363          	bgeu	t1,a2,20000a3c <memset+0x2a>
20000a1a:	00f77793          	andi	a5,a4,15
20000a1e:	efbd                	bnez	a5,20000a9c <memset+0x8a>
20000a20:	e5ad                	bnez	a1,20000a8a <memset+0x78>
20000a22:	ff067693          	andi	a3,a2,-16
20000a26:	8a3d                	andi	a2,a2,15
20000a28:	96ba                	add	a3,a3,a4
20000a2a:	c30c                	sw	a1,0(a4)
20000a2c:	c34c                	sw	a1,4(a4)
20000a2e:	c70c                	sw	a1,8(a4)
20000a30:	c74c                	sw	a1,12(a4)
20000a32:	0741                	addi	a4,a4,16
20000a34:	fed76be3          	bltu	a4,a3,20000a2a <memset+0x18>
20000a38:	e211                	bnez	a2,20000a3c <memset+0x2a>
20000a3a:	8082                	ret
20000a3c:	40c306b3          	sub	a3,t1,a2
20000a40:	068a                	slli	a3,a3,0x2
20000a42:	00000297          	auipc	t0,0x0
20000a46:	9696                	add	a3,a3,t0
20000a48:	00a68067          	jr	10(a3)
20000a4c:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffc89a>
20000a50:	00b706a3          	sb	a1,13(a4)
20000a54:	00b70623          	sb	a1,12(a4)
20000a58:	00b705a3          	sb	a1,11(a4)
20000a5c:	00b70523          	sb	a1,10(a4)
20000a60:	00b704a3          	sb	a1,9(a4)
20000a64:	00b70423          	sb	a1,8(a4)
20000a68:	00b703a3          	sb	a1,7(a4)
20000a6c:	00b70323          	sb	a1,6(a4)
20000a70:	00b702a3          	sb	a1,5(a4)
20000a74:	00b70223          	sb	a1,4(a4)
20000a78:	00b701a3          	sb	a1,3(a4)
20000a7c:	00b70123          	sb	a1,2(a4)
20000a80:	00b700a3          	sb	a1,1(a4)
20000a84:	00b70023          	sb	a1,0(a4)
20000a88:	8082                	ret
20000a8a:	0ff5f593          	andi	a1,a1,255
20000a8e:	00859693          	slli	a3,a1,0x8
20000a92:	8dd5                	or	a1,a1,a3
20000a94:	01059693          	slli	a3,a1,0x10
20000a98:	8dd5                	or	a1,a1,a3
20000a9a:	b761                	j	20000a22 <memset+0x10>
20000a9c:	00279693          	slli	a3,a5,0x2
20000aa0:	00000297          	auipc	t0,0x0
20000aa4:	9696                	add	a3,a3,t0
20000aa6:	8286                	mv	t0,ra
20000aa8:	fa8680e7          	jalr	-88(a3)
20000aac:	8096                	mv	ra,t0
20000aae:	17c1                	addi	a5,a5,-16
20000ab0:	8f1d                	sub	a4,a4,a5
20000ab2:	963e                	add	a2,a2,a5
20000ab4:	f8c374e3          	bgeu	t1,a2,20000a3c <memset+0x2a>
20000ab8:	b7a5                	j	20000a20 <memset+0xe>

20000aba <_free_r>:
_free_r():
20000aba:	c5cd                	beqz	a1,20000b64 <_free_r+0xaa>
20000abc:	ffc5a783          	lw	a5,-4(a1)
20000ac0:	1141                	addi	sp,sp,-16
20000ac2:	c422                	sw	s0,8(sp)
20000ac4:	c606                	sw	ra,12(sp)
20000ac6:	c226                	sw	s1,4(sp)
20000ac8:	ffc58413          	addi	s0,a1,-4
20000acc:	0007d363          	bgez	a5,20000ad2 <_free_r+0x18>
20000ad0:	943e                	add	s0,s0,a5
20000ad2:	84aa                	mv	s1,a0
20000ad4:	2589                	jal	20001116 <__malloc_lock>
20000ad6:	60000797          	auipc	a5,0x60000
20000ada:	ffa78793          	addi	a5,a5,-6 # 80000ad0 <metal_segment_data_target_end>
20000ade:	439c                	lw	a5,0(a5)
20000ae0:	ef89                	bnez	a5,20000afa <_free_r+0x40>
20000ae2:	00042223          	sw	zero,4(s0)
20000ae6:	60000797          	auipc	a5,0x60000
20000aea:	fe87a523          	sw	s0,-22(a5) # 80000ad0 <metal_segment_data_target_end>
20000aee:	4422                	lw	s0,8(sp)
20000af0:	40b2                	lw	ra,12(sp)
20000af2:	8526                	mv	a0,s1
20000af4:	4492                	lw	s1,4(sp)
20000af6:	0141                	addi	sp,sp,16
20000af8:	a505                	j	20001118 <__malloc_unlock>
20000afa:	00f47e63          	bgeu	s0,a5,20000b16 <_free_r+0x5c>
20000afe:	4014                	lw	a3,0(s0)
20000b00:	00d40733          	add	a4,s0,a3
20000b04:	00e79663          	bne	a5,a4,20000b10 <_free_r+0x56>
20000b08:	4398                	lw	a4,0(a5)
20000b0a:	43dc                	lw	a5,4(a5)
20000b0c:	9736                	add	a4,a4,a3
20000b0e:	c018                	sw	a4,0(s0)
20000b10:	c05c                	sw	a5,4(s0)
20000b12:	bfd1                	j	20000ae6 <_free_r+0x2c>
20000b14:	87ba                	mv	a5,a4
20000b16:	43d8                	lw	a4,4(a5)
20000b18:	c319                	beqz	a4,20000b1e <_free_r+0x64>
20000b1a:	fee47de3          	bgeu	s0,a4,20000b14 <_free_r+0x5a>
20000b1e:	4394                	lw	a3,0(a5)
20000b20:	00d78633          	add	a2,a5,a3
20000b24:	00861f63          	bne	a2,s0,20000b42 <_free_r+0x88>
20000b28:	4010                	lw	a2,0(s0)
20000b2a:	96b2                	add	a3,a3,a2
20000b2c:	c394                	sw	a3,0(a5)
20000b2e:	00d78633          	add	a2,a5,a3
20000b32:	fac71ee3          	bne	a4,a2,20000aee <_free_r+0x34>
20000b36:	4310                	lw	a2,0(a4)
20000b38:	4358                	lw	a4,4(a4)
20000b3a:	96b2                	add	a3,a3,a2
20000b3c:	c394                	sw	a3,0(a5)
20000b3e:	c3d8                	sw	a4,4(a5)
20000b40:	b77d                	j	20000aee <_free_r+0x34>
20000b42:	00c47563          	bgeu	s0,a2,20000b4c <_free_r+0x92>
20000b46:	47b1                	li	a5,12
20000b48:	c09c                	sw	a5,0(s1)
20000b4a:	b755                	j	20000aee <_free_r+0x34>
20000b4c:	4010                	lw	a2,0(s0)
20000b4e:	00c406b3          	add	a3,s0,a2
20000b52:	00d71663          	bne	a4,a3,20000b5e <_free_r+0xa4>
20000b56:	4314                	lw	a3,0(a4)
20000b58:	4358                	lw	a4,4(a4)
20000b5a:	96b2                	add	a3,a3,a2
20000b5c:	c014                	sw	a3,0(s0)
20000b5e:	c058                	sw	a4,4(s0)
20000b60:	c3c0                	sw	s0,4(a5)
20000b62:	b771                	j	20000aee <_free_r+0x34>
20000b64:	8082                	ret

20000b66 <_malloc_r>:
_malloc_r():
20000b66:	1101                	addi	sp,sp,-32
20000b68:	ca26                	sw	s1,20(sp)
20000b6a:	00358493          	addi	s1,a1,3
20000b6e:	98f1                	andi	s1,s1,-4
20000b70:	ce06                	sw	ra,28(sp)
20000b72:	cc22                	sw	s0,24(sp)
20000b74:	c84a                	sw	s2,16(sp)
20000b76:	c64e                	sw	s3,12(sp)
20000b78:	04a1                	addi	s1,s1,8
20000b7a:	47b1                	li	a5,12
20000b7c:	04f4f763          	bgeu	s1,a5,20000bca <_malloc_r+0x64>
20000b80:	44b1                	li	s1,12
20000b82:	04b4e663          	bltu	s1,a1,20000bce <_malloc_r+0x68>
20000b86:	892a                	mv	s2,a0
20000b88:	2379                	jal	20001116 <__malloc_lock>
20000b8a:	60000797          	auipc	a5,0x60000
20000b8e:	f4678793          	addi	a5,a5,-186 # 80000ad0 <metal_segment_data_target_end>
20000b92:	4398                	lw	a4,0(a5)
20000b94:	843a                	mv	s0,a4
20000b96:	e431                	bnez	s0,20000be2 <_malloc_r+0x7c>
20000b98:	60000797          	auipc	a5,0x60000
20000b9c:	f3c78793          	addi	a5,a5,-196 # 80000ad4 <__malloc_sbrk_start>
20000ba0:	439c                	lw	a5,0(a5)
20000ba2:	eb81                	bnez	a5,20000bb2 <_malloc_r+0x4c>
20000ba4:	4581                	li	a1,0
20000ba6:	854a                	mv	a0,s2
20000ba8:	2645                	jal	20000f48 <_sbrk_r>
20000baa:	60000797          	auipc	a5,0x60000
20000bae:	f2a7a523          	sw	a0,-214(a5) # 80000ad4 <__malloc_sbrk_start>
20000bb2:	85a6                	mv	a1,s1
20000bb4:	854a                	mv	a0,s2
20000bb6:	2e49                	jal	20000f48 <_sbrk_r>
20000bb8:	59fd                	li	s3,-1
20000bba:	07351963          	bne	a0,s3,20000c2c <_malloc_r+0xc6>
20000bbe:	47b1                	li	a5,12
20000bc0:	00f92023          	sw	a5,0(s2)
20000bc4:	854a                	mv	a0,s2
20000bc6:	2b89                	jal	20001118 <__malloc_unlock>
20000bc8:	a029                	j	20000bd2 <_malloc_r+0x6c>
20000bca:	fa04dce3          	bgez	s1,20000b82 <_malloc_r+0x1c>
20000bce:	47b1                	li	a5,12
20000bd0:	c11c                	sw	a5,0(a0)
20000bd2:	4501                	li	a0,0
20000bd4:	40f2                	lw	ra,28(sp)
20000bd6:	4462                	lw	s0,24(sp)
20000bd8:	44d2                	lw	s1,20(sp)
20000bda:	4942                	lw	s2,16(sp)
20000bdc:	49b2                	lw	s3,12(sp)
20000bde:	6105                	addi	sp,sp,32
20000be0:	8082                	ret
20000be2:	401c                	lw	a5,0(s0)
20000be4:	8f85                	sub	a5,a5,s1
20000be6:	0407c063          	bltz	a5,20000c26 <_malloc_r+0xc0>
20000bea:	46ad                	li	a3,11
20000bec:	00f6f663          	bgeu	a3,a5,20000bf8 <_malloc_r+0x92>
20000bf0:	c01c                	sw	a5,0(s0)
20000bf2:	943e                	add	s0,s0,a5
20000bf4:	c004                	sw	s1,0(s0)
20000bf6:	a801                	j	20000c06 <_malloc_r+0xa0>
20000bf8:	405c                	lw	a5,4(s0)
20000bfa:	02871463          	bne	a4,s0,20000c22 <_malloc_r+0xbc>
20000bfe:	60000717          	auipc	a4,0x60000
20000c02:	ecf72923          	sw	a5,-302(a4) # 80000ad0 <metal_segment_data_target_end>
20000c06:	854a                	mv	a0,s2
20000c08:	2b01                	jal	20001118 <__malloc_unlock>
20000c0a:	00b40513          	addi	a0,s0,11
20000c0e:	00440793          	addi	a5,s0,4
20000c12:	9961                	andi	a0,a0,-8
20000c14:	40f50733          	sub	a4,a0,a5
20000c18:	df55                	beqz	a4,20000bd4 <_malloc_r+0x6e>
20000c1a:	943a                	add	s0,s0,a4
20000c1c:	8f89                	sub	a5,a5,a0
20000c1e:	c01c                	sw	a5,0(s0)
20000c20:	bf55                	j	20000bd4 <_malloc_r+0x6e>
20000c22:	c35c                	sw	a5,4(a4)
20000c24:	b7cd                	j	20000c06 <_malloc_r+0xa0>
20000c26:	8722                	mv	a4,s0
20000c28:	4040                	lw	s0,4(s0)
20000c2a:	b7b5                	j	20000b96 <_malloc_r+0x30>
20000c2c:	00350413          	addi	s0,a0,3
20000c30:	9871                	andi	s0,s0,-4
20000c32:	fc8501e3          	beq	a0,s0,20000bf4 <_malloc_r+0x8e>
20000c36:	40a405b3          	sub	a1,s0,a0
20000c3a:	854a                	mv	a0,s2
20000c3c:	2631                	jal	20000f48 <_sbrk_r>
20000c3e:	fb351be3          	bne	a0,s3,20000bf4 <_malloc_r+0x8e>
20000c42:	bfb5                	j	20000bbe <_malloc_r+0x58>

20000c44 <__sfputc_r>:
__sfputc_r():
20000c44:	461c                	lw	a5,8(a2)
20000c46:	17fd                	addi	a5,a5,-1
20000c48:	c61c                	sw	a5,8(a2)
20000c4a:	0007da63          	bgez	a5,20000c5e <__sfputc_r+0x1a>
20000c4e:	4e18                	lw	a4,24(a2)
20000c50:	00e7c563          	blt	a5,a4,20000c5a <__sfputc_r+0x16>
20000c54:	47a9                	li	a5,10
20000c56:	00f59463          	bne	a1,a5,20000c5e <__sfputc_r+0x1a>
20000c5a:	f2aff06f          	j	20000384 <__swbuf_r>
20000c5e:	421c                	lw	a5,0(a2)
20000c60:	852e                	mv	a0,a1
20000c62:	00178713          	addi	a4,a5,1
20000c66:	c218                	sw	a4,0(a2)
20000c68:	00b78023          	sb	a1,0(a5)
20000c6c:	8082                	ret

20000c6e <__sfputs_r>:
__sfputs_r():
20000c6e:	1101                	addi	sp,sp,-32
20000c70:	cc22                	sw	s0,24(sp)
20000c72:	ca26                	sw	s1,20(sp)
20000c74:	c84a                	sw	s2,16(sp)
20000c76:	c64e                	sw	s3,12(sp)
20000c78:	c452                	sw	s4,8(sp)
20000c7a:	ce06                	sw	ra,28(sp)
20000c7c:	892a                	mv	s2,a0
20000c7e:	89ae                	mv	s3,a1
20000c80:	8432                	mv	s0,a2
20000c82:	00d604b3          	add	s1,a2,a3
20000c86:	5a7d                	li	s4,-1
20000c88:	00941463          	bne	s0,s1,20000c90 <__sfputs_r+0x22>
20000c8c:	4501                	li	a0,0
20000c8e:	a809                	j	20000ca0 <__sfputs_r+0x32>
20000c90:	00044583          	lbu	a1,0(s0)
20000c94:	864e                	mv	a2,s3
20000c96:	854a                	mv	a0,s2
20000c98:	3775                	jal	20000c44 <__sfputc_r>
20000c9a:	0405                	addi	s0,s0,1
20000c9c:	ff4516e3          	bne	a0,s4,20000c88 <__sfputs_r+0x1a>
20000ca0:	40f2                	lw	ra,28(sp)
20000ca2:	4462                	lw	s0,24(sp)
20000ca4:	44d2                	lw	s1,20(sp)
20000ca6:	4942                	lw	s2,16(sp)
20000ca8:	49b2                	lw	s3,12(sp)
20000caa:	4a22                	lw	s4,8(sp)
20000cac:	6105                	addi	sp,sp,32
20000cae:	8082                	ret

20000cb0 <_vfiprintf_r>:
_vfiprintf_r():
20000cb0:	7135                	addi	sp,sp,-160
20000cb2:	cd22                	sw	s0,152(sp)
20000cb4:	cb26                	sw	s1,148(sp)
20000cb6:	c94a                	sw	s2,144(sp)
20000cb8:	c74e                	sw	s3,140(sp)
20000cba:	cf06                	sw	ra,156(sp)
20000cbc:	c552                	sw	s4,136(sp)
20000cbe:	c356                	sw	s5,132(sp)
20000cc0:	c15a                	sw	s6,128(sp)
20000cc2:	dede                	sw	s7,124(sp)
20000cc4:	dce2                	sw	s8,120(sp)
20000cc6:	dae6                	sw	s9,116(sp)
20000cc8:	89aa                	mv	s3,a0
20000cca:	84ae                	mv	s1,a1
20000ccc:	8932                	mv	s2,a2
20000cce:	8436                	mv	s0,a3
20000cd0:	c501                	beqz	a0,20000cd8 <_vfiprintf_r+0x28>
20000cd2:	4d1c                	lw	a5,24(a0)
20000cd4:	e391                	bnez	a5,20000cd8 <_vfiprintf_r+0x28>
20000cd6:	3cd1                	jal	200007aa <__sinit>
20000cd8:	00005797          	auipc	a5,0x5
20000cdc:	3b878793          	addi	a5,a5,952 # 20006090 <__sf_fake_stdin>
20000ce0:	0cf49b63          	bne	s1,a5,20000db6 <_vfiprintf_r+0x106>
20000ce4:	0049a483          	lw	s1,4(s3)
20000ce8:	00c4d783          	lhu	a5,12(s1)
20000cec:	8ba1                	andi	a5,a5,8
20000cee:	c7f5                	beqz	a5,20000dda <_vfiprintf_r+0x12a>
20000cf0:	489c                	lw	a5,16(s1)
20000cf2:	c7e5                	beqz	a5,20000dda <_vfiprintf_r+0x12a>
20000cf4:	02000793          	li	a5,32
20000cf8:	02f104a3          	sb	a5,41(sp)
20000cfc:	03000793          	li	a5,48
20000d00:	d202                	sw	zero,36(sp)
20000d02:	02f10523          	sb	a5,42(sp)
20000d06:	c622                	sw	s0,12(sp)
20000d08:	02500b93          	li	s7,37
20000d0c:	00005a97          	auipc	s5,0x5
20000d10:	3c4a8a93          	addi	s5,s5,964 # 200060d0 <__sf_fake_stdout+0x20>
20000d14:	4c05                	li	s8,1
20000d16:	4b29                	li	s6,10
20000d18:	844a                	mv	s0,s2
20000d1a:	00044783          	lbu	a5,0(s0)
20000d1e:	c399                	beqz	a5,20000d24 <_vfiprintf_r+0x74>
20000d20:	0f779063          	bne	a5,s7,20000e00 <_vfiprintf_r+0x150>
20000d24:	41240cb3          	sub	s9,s0,s2
20000d28:	000c8d63          	beqz	s9,20000d42 <_vfiprintf_r+0x92>
20000d2c:	86e6                	mv	a3,s9
20000d2e:	864a                	mv	a2,s2
20000d30:	85a6                	mv	a1,s1
20000d32:	854e                	mv	a0,s3
20000d34:	3f2d                	jal	20000c6e <__sfputs_r>
20000d36:	57fd                	li	a5,-1
20000d38:	1ef50663          	beq	a0,a5,20000f24 <_vfiprintf_r+0x274>
20000d3c:	5692                	lw	a3,36(sp)
20000d3e:	96e6                	add	a3,a3,s9
20000d40:	d236                	sw	a3,36(sp)
20000d42:	00044783          	lbu	a5,0(s0)
20000d46:	1c078f63          	beqz	a5,20000f24 <_vfiprintf_r+0x274>
20000d4a:	57fd                	li	a5,-1
20000d4c:	00140913          	addi	s2,s0,1
20000d50:	c802                	sw	zero,16(sp)
20000d52:	ce02                	sw	zero,28(sp)
20000d54:	ca3e                	sw	a5,20(sp)
20000d56:	cc02                	sw	zero,24(sp)
20000d58:	040109a3          	sb	zero,83(sp)
20000d5c:	d482                	sw	zero,104(sp)
20000d5e:	00094583          	lbu	a1,0(s2)
20000d62:	4615                	li	a2,5
20000d64:	8556                	mv	a0,s5
20000d66:	2e59                	jal	200010fc <memchr>
20000d68:	00190413          	addi	s0,s2,1
20000d6c:	47c2                	lw	a5,16(sp)
20000d6e:	e959                	bnez	a0,20000e04 <_vfiprintf_r+0x154>
20000d70:	0107f713          	andi	a4,a5,16
20000d74:	c709                	beqz	a4,20000d7e <_vfiprintf_r+0xce>
20000d76:	02000713          	li	a4,32
20000d7a:	04e109a3          	sb	a4,83(sp)
20000d7e:	0087f713          	andi	a4,a5,8
20000d82:	c709                	beqz	a4,20000d8c <_vfiprintf_r+0xdc>
20000d84:	02b00713          	li	a4,43
20000d88:	04e109a3          	sb	a4,83(sp)
20000d8c:	00094683          	lbu	a3,0(s2)
20000d90:	02a00713          	li	a4,42
20000d94:	08e68063          	beq	a3,a4,20000e14 <_vfiprintf_r+0x164>
20000d98:	47f2                	lw	a5,28(sp)
20000d9a:	844a                	mv	s0,s2
20000d9c:	4681                	li	a3,0
20000d9e:	4625                	li	a2,9
20000da0:	00044703          	lbu	a4,0(s0)
20000da4:	00140593          	addi	a1,s0,1
20000da8:	fd070713          	addi	a4,a4,-48
20000dac:	0ae67963          	bgeu	a2,a4,20000e5e <_vfiprintf_r+0x1ae>
20000db0:	cab5                	beqz	a3,20000e24 <_vfiprintf_r+0x174>
20000db2:	ce3e                	sw	a5,28(sp)
20000db4:	a885                	j	20000e24 <_vfiprintf_r+0x174>
20000db6:	00005797          	auipc	a5,0x5
20000dba:	2fa78793          	addi	a5,a5,762 # 200060b0 <__sf_fake_stdout>
20000dbe:	00f49563          	bne	s1,a5,20000dc8 <_vfiprintf_r+0x118>
20000dc2:	0089a483          	lw	s1,8(s3)
20000dc6:	b70d                	j	20000ce8 <_vfiprintf_r+0x38>
20000dc8:	00005797          	auipc	a5,0x5
20000dcc:	2a878793          	addi	a5,a5,680 # 20006070 <__sf_fake_stderr>
20000dd0:	f0f49ce3          	bne	s1,a5,20000ce8 <_vfiprintf_r+0x38>
20000dd4:	00c9a483          	lw	s1,12(s3)
20000dd8:	bf01                	j	20000ce8 <_vfiprintf_r+0x38>
20000dda:	85a6                	mv	a1,s1
20000ddc:	854e                	mv	a0,s3
20000dde:	e66ff0ef          	jal	ra,20000444 <__swsetup_r>
20000de2:	d909                	beqz	a0,20000cf4 <_vfiprintf_r+0x44>
20000de4:	557d                	li	a0,-1
20000de6:	40fa                	lw	ra,156(sp)
20000de8:	446a                	lw	s0,152(sp)
20000dea:	44da                	lw	s1,148(sp)
20000dec:	494a                	lw	s2,144(sp)
20000dee:	49ba                	lw	s3,140(sp)
20000df0:	4a2a                	lw	s4,136(sp)
20000df2:	4a9a                	lw	s5,132(sp)
20000df4:	4b0a                	lw	s6,128(sp)
20000df6:	5bf6                	lw	s7,124(sp)
20000df8:	5c66                	lw	s8,120(sp)
20000dfa:	5cd6                	lw	s9,116(sp)
20000dfc:	610d                	addi	sp,sp,160
20000dfe:	8082                	ret
20000e00:	0405                	addi	s0,s0,1
20000e02:	bf21                	j	20000d1a <_vfiprintf_r+0x6a>
20000e04:	41550533          	sub	a0,a0,s5
20000e08:	00ac1533          	sll	a0,s8,a0
20000e0c:	8fc9                	or	a5,a5,a0
20000e0e:	c83e                	sw	a5,16(sp)
20000e10:	8922                	mv	s2,s0
20000e12:	b7b1                	j	20000d5e <_vfiprintf_r+0xae>
20000e14:	4732                	lw	a4,12(sp)
20000e16:	00470693          	addi	a3,a4,4
20000e1a:	4318                	lw	a4,0(a4)
20000e1c:	c636                	sw	a3,12(sp)
20000e1e:	02074963          	bltz	a4,20000e50 <_vfiprintf_r+0x1a0>
20000e22:	ce3a                	sw	a4,28(sp)
20000e24:	00044703          	lbu	a4,0(s0)
20000e28:	02e00793          	li	a5,46
20000e2c:	04f71f63          	bne	a4,a5,20000e8a <_vfiprintf_r+0x1da>
20000e30:	00144703          	lbu	a4,1(s0)
20000e34:	02a00793          	li	a5,42
20000e38:	02f71b63          	bne	a4,a5,20000e6e <_vfiprintf_r+0x1be>
20000e3c:	47b2                	lw	a5,12(sp)
20000e3e:	0409                	addi	s0,s0,2
20000e40:	00478713          	addi	a4,a5,4
20000e44:	439c                	lw	a5,0(a5)
20000e46:	c63a                	sw	a4,12(sp)
20000e48:	0207c163          	bltz	a5,20000e6a <_vfiprintf_r+0x1ba>
20000e4c:	ca3e                	sw	a5,20(sp)
20000e4e:	a835                	j	20000e8a <_vfiprintf_r+0x1da>
20000e50:	40e00733          	neg	a4,a4
20000e54:	0027e793          	ori	a5,a5,2
20000e58:	ce3a                	sw	a4,28(sp)
20000e5a:	c83e                	sw	a5,16(sp)
20000e5c:	b7e1                	j	20000e24 <_vfiprintf_r+0x174>
20000e5e:	036787b3          	mul	a5,a5,s6
20000e62:	4685                	li	a3,1
20000e64:	842e                	mv	s0,a1
20000e66:	97ba                	add	a5,a5,a4
20000e68:	bf25                	j	20000da0 <_vfiprintf_r+0xf0>
20000e6a:	57fd                	li	a5,-1
20000e6c:	b7c5                	j	20000e4c <_vfiprintf_r+0x19c>
20000e6e:	0405                	addi	s0,s0,1
20000e70:	ca02                	sw	zero,20(sp)
20000e72:	4681                	li	a3,0
20000e74:	4781                	li	a5,0
20000e76:	4625                	li	a2,9
20000e78:	00044703          	lbu	a4,0(s0)
20000e7c:	00140593          	addi	a1,s0,1
20000e80:	fd070713          	addi	a4,a4,-48
20000e84:	06e67663          	bgeu	a2,a4,20000ef0 <_vfiprintf_r+0x240>
20000e88:	f2f1                	bnez	a3,20000e4c <_vfiprintf_r+0x19c>
20000e8a:	00044583          	lbu	a1,0(s0)
20000e8e:	460d                	li	a2,3
20000e90:	00005517          	auipc	a0,0x5
20000e94:	24850513          	addi	a0,a0,584 # 200060d8 <__sf_fake_stdout+0x28>
20000e98:	2495                	jal	200010fc <memchr>
20000e9a:	cd11                	beqz	a0,20000eb6 <_vfiprintf_r+0x206>
20000e9c:	00005797          	auipc	a5,0x5
20000ea0:	23c78793          	addi	a5,a5,572 # 200060d8 <__sf_fake_stdout+0x28>
20000ea4:	8d1d                	sub	a0,a0,a5
20000ea6:	04000793          	li	a5,64
20000eaa:	00a797b3          	sll	a5,a5,a0
20000eae:	4542                	lw	a0,16(sp)
20000eb0:	0405                	addi	s0,s0,1
20000eb2:	8d5d                	or	a0,a0,a5
20000eb4:	c82a                	sw	a0,16(sp)
20000eb6:	00044583          	lbu	a1,0(s0)
20000eba:	4619                	li	a2,6
20000ebc:	00005517          	auipc	a0,0x5
20000ec0:	22050513          	addi	a0,a0,544 # 200060dc <__sf_fake_stdout+0x2c>
20000ec4:	00140913          	addi	s2,s0,1
20000ec8:	02b10423          	sb	a1,40(sp)
20000ecc:	2c05                	jal	200010fc <memchr>
20000ece:	c13d                	beqz	a0,20000f34 <_vfiprintf_r+0x284>
20000ed0:	dffff797          	auipc	a5,0xdffff
20000ed4:	13078793          	addi	a5,a5,304 # 0 <__metal_boot_hart>
20000ed8:	e795                	bnez	a5,20000f04 <_vfiprintf_r+0x254>
20000eda:	4742                	lw	a4,16(sp)
20000edc:	47b2                	lw	a5,12(sp)
20000ede:	10077713          	andi	a4,a4,256
20000ee2:	cf09                	beqz	a4,20000efc <_vfiprintf_r+0x24c>
20000ee4:	0791                	addi	a5,a5,4
20000ee6:	c63e                	sw	a5,12(sp)
20000ee8:	5792                	lw	a5,36(sp)
20000eea:	97d2                	add	a5,a5,s4
20000eec:	d23e                	sw	a5,36(sp)
20000eee:	b52d                	j	20000d18 <_vfiprintf_r+0x68>
20000ef0:	036787b3          	mul	a5,a5,s6
20000ef4:	4685                	li	a3,1
20000ef6:	842e                	mv	s0,a1
20000ef8:	97ba                	add	a5,a5,a4
20000efa:	bfbd                	j	20000e78 <_vfiprintf_r+0x1c8>
20000efc:	079d                	addi	a5,a5,7
20000efe:	9be1                	andi	a5,a5,-8
20000f00:	07a1                	addi	a5,a5,8
20000f02:	b7d5                	j	20000ee6 <_vfiprintf_r+0x236>
20000f04:	0078                	addi	a4,sp,12
20000f06:	00000697          	auipc	a3,0x0
20000f0a:	d6868693          	addi	a3,a3,-664 # 20000c6e <__sfputs_r>
20000f0e:	8626                	mv	a2,s1
20000f10:	080c                	addi	a1,sp,16
20000f12:	854e                	mv	a0,s3
20000f14:	00000097          	auipc	ra,0x0
20000f18:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20000f1c:	57fd                	li	a5,-1
20000f1e:	8a2a                	mv	s4,a0
20000f20:	fcf514e3          	bne	a0,a5,20000ee8 <_vfiprintf_r+0x238>
20000f24:	00c4d783          	lhu	a5,12(s1)
20000f28:	0407f793          	andi	a5,a5,64
20000f2c:	ea079ce3          	bnez	a5,20000de4 <_vfiprintf_r+0x134>
20000f30:	5512                	lw	a0,36(sp)
20000f32:	bd55                	j	20000de6 <_vfiprintf_r+0x136>
20000f34:	0078                	addi	a4,sp,12
20000f36:	00000697          	auipc	a3,0x0
20000f3a:	d3868693          	addi	a3,a3,-712 # 20000c6e <__sfputs_r>
20000f3e:	8626                	mv	a2,s1
20000f40:	080c                	addi	a1,sp,16
20000f42:	854e                	mv	a0,s3
20000f44:	24cd                	jal	20001226 <_printf_i>
20000f46:	bfd9                	j	20000f1c <_vfiprintf_r+0x26c>

20000f48 <_sbrk_r>:
_sbrk_r():
20000f48:	1141                	addi	sp,sp,-16
20000f4a:	c422                	sw	s0,8(sp)
20000f4c:	842a                	mv	s0,a0
20000f4e:	852e                	mv	a0,a1
20000f50:	8e01a423          	sw	zero,-1816(gp) # 80000b70 <errno>
20000f54:	c606                	sw	ra,12(sp)
20000f56:	2da9                	jal	200015b0 <_sbrk>
20000f58:	57fd                	li	a5,-1
20000f5a:	00f51763          	bne	a0,a5,20000f68 <_sbrk_r+0x20>
20000f5e:	8e818793          	addi	a5,gp,-1816 # 80000b70 <errno>
20000f62:	439c                	lw	a5,0(a5)
20000f64:	c391                	beqz	a5,20000f68 <_sbrk_r+0x20>
20000f66:	c01c                	sw	a5,0(s0)
20000f68:	40b2                	lw	ra,12(sp)
20000f6a:	4422                	lw	s0,8(sp)
20000f6c:	0141                	addi	sp,sp,16
20000f6e:	8082                	ret

20000f70 <__sread>:
__sread():
20000f70:	1141                	addi	sp,sp,-16
20000f72:	c422                	sw	s0,8(sp)
20000f74:	842e                	mv	s0,a1
20000f76:	00e59583          	lh	a1,14(a1)
20000f7a:	c606                	sw	ra,12(sp)
20000f7c:	23b1                	jal	200014c8 <_read_r>
20000f7e:	00054963          	bltz	a0,20000f90 <__sread+0x20>
20000f82:	487c                	lw	a5,84(s0)
20000f84:	97aa                	add	a5,a5,a0
20000f86:	c87c                	sw	a5,84(s0)
20000f88:	40b2                	lw	ra,12(sp)
20000f8a:	4422                	lw	s0,8(sp)
20000f8c:	0141                	addi	sp,sp,16
20000f8e:	8082                	ret
20000f90:	00c45783          	lhu	a5,12(s0)
20000f94:	777d                	lui	a4,0xfffff
20000f96:	177d                	addi	a4,a4,-1
20000f98:	8ff9                	and	a5,a5,a4
20000f9a:	00f41623          	sh	a5,12(s0)
20000f9e:	b7ed                	j	20000f88 <__sread+0x18>

20000fa0 <__swrite>:
__swrite():
20000fa0:	00c5d783          	lhu	a5,12(a1)
20000fa4:	1101                	addi	sp,sp,-32
20000fa6:	cc22                	sw	s0,24(sp)
20000fa8:	ca26                	sw	s1,20(sp)
20000faa:	c84a                	sw	s2,16(sp)
20000fac:	c64e                	sw	s3,12(sp)
20000fae:	ce06                	sw	ra,28(sp)
20000fb0:	1007f793          	andi	a5,a5,256
20000fb4:	84aa                	mv	s1,a0
20000fb6:	842e                	mv	s0,a1
20000fb8:	8932                	mv	s2,a2
20000fba:	89b6                	mv	s3,a3
20000fbc:	c791                	beqz	a5,20000fc8 <__swrite+0x28>
20000fbe:	00e59583          	lh	a1,14(a1)
20000fc2:	4689                	li	a3,2
20000fc4:	4601                	li	a2,0
20000fc6:	2229                	jal	200010d0 <_lseek_r>
20000fc8:	00c45783          	lhu	a5,12(s0)
20000fcc:	777d                	lui	a4,0xfffff
20000fce:	177d                	addi	a4,a4,-1
20000fd0:	8ff9                	and	a5,a5,a4
20000fd2:	00f41623          	sh	a5,12(s0)
20000fd6:	00e41583          	lh	a1,14(s0)
20000fda:	4462                	lw	s0,24(sp)
20000fdc:	40f2                	lw	ra,28(sp)
20000fde:	86ce                	mv	a3,s3
20000fe0:	864a                	mv	a2,s2
20000fe2:	49b2                	lw	s3,12(sp)
20000fe4:	4942                	lw	s2,16(sp)
20000fe6:	8526                	mv	a0,s1
20000fe8:	44d2                	lw	s1,20(sp)
20000fea:	6105                	addi	sp,sp,32
20000fec:	a83d                	j	2000102a <_write_r>

20000fee <__sseek>:
__sseek():
20000fee:	1141                	addi	sp,sp,-16
20000ff0:	c422                	sw	s0,8(sp)
20000ff2:	842e                	mv	s0,a1
20000ff4:	00e59583          	lh	a1,14(a1)
20000ff8:	c606                	sw	ra,12(sp)
20000ffa:	28d9                	jal	200010d0 <_lseek_r>
20000ffc:	57fd                	li	a5,-1
20000ffe:	00c45703          	lhu	a4,12(s0)
20001002:	00f51b63          	bne	a0,a5,20001018 <__sseek+0x2a>
20001006:	77fd                	lui	a5,0xfffff
20001008:	17fd                	addi	a5,a5,-1
2000100a:	8ff9                	and	a5,a5,a4
2000100c:	00f41623          	sh	a5,12(s0)
20001010:	40b2                	lw	ra,12(sp)
20001012:	4422                	lw	s0,8(sp)
20001014:	0141                	addi	sp,sp,16
20001016:	8082                	ret
20001018:	6785                	lui	a5,0x1
2000101a:	8fd9                	or	a5,a5,a4
2000101c:	00f41623          	sh	a5,12(s0)
20001020:	c868                	sw	a0,84(s0)
20001022:	b7fd                	j	20001010 <__sseek+0x22>

20001024 <__sclose>:
__sclose():
20001024:	00e59583          	lh	a1,14(a1)
20001028:	a03d                	j	20001056 <_close_r>

2000102a <_write_r>:
_write_r():
2000102a:	1141                	addi	sp,sp,-16
2000102c:	c422                	sw	s0,8(sp)
2000102e:	842a                	mv	s0,a0
20001030:	852e                	mv	a0,a1
20001032:	85b2                	mv	a1,a2
20001034:	8636                	mv	a2,a3
20001036:	8e01a423          	sw	zero,-1816(gp) # 80000b70 <errno>
2000103a:	c606                	sw	ra,12(sp)
2000103c:	23cd                	jal	2000161e <_write>
2000103e:	57fd                	li	a5,-1
20001040:	00f51763          	bne	a0,a5,2000104e <_write_r+0x24>
20001044:	8e818793          	addi	a5,gp,-1816 # 80000b70 <errno>
20001048:	439c                	lw	a5,0(a5)
2000104a:	c391                	beqz	a5,2000104e <_write_r+0x24>
2000104c:	c01c                	sw	a5,0(s0)
2000104e:	40b2                	lw	ra,12(sp)
20001050:	4422                	lw	s0,8(sp)
20001052:	0141                	addi	sp,sp,16
20001054:	8082                	ret

20001056 <_close_r>:
_close_r():
20001056:	1141                	addi	sp,sp,-16
20001058:	c422                	sw	s0,8(sp)
2000105a:	842a                	mv	s0,a0
2000105c:	852e                	mv	a0,a1
2000105e:	8e01a423          	sw	zero,-1816(gp) # 80000b70 <errno>
20001062:	c606                	sw	ra,12(sp)
20001064:	2941                	jal	200014f4 <_close>
20001066:	57fd                	li	a5,-1
20001068:	00f51763          	bne	a0,a5,20001076 <_close_r+0x20>
2000106c:	8e818793          	addi	a5,gp,-1816 # 80000b70 <errno>
20001070:	439c                	lw	a5,0(a5)
20001072:	c391                	beqz	a5,20001076 <_close_r+0x20>
20001074:	c01c                	sw	a5,0(s0)
20001076:	40b2                	lw	ra,12(sp)
20001078:	4422                	lw	s0,8(sp)
2000107a:	0141                	addi	sp,sp,16
2000107c:	8082                	ret

2000107e <_fstat_r>:
_fstat_r():
2000107e:	1141                	addi	sp,sp,-16
20001080:	c422                	sw	s0,8(sp)
20001082:	842a                	mv	s0,a0
20001084:	852e                	mv	a0,a1
20001086:	85b2                	mv	a1,a2
20001088:	8e01a423          	sw	zero,-1816(gp) # 80000b70 <errno>
2000108c:	c606                	sw	ra,12(sp)
2000108e:	2161                	jal	20001516 <_fstat>
20001090:	57fd                	li	a5,-1
20001092:	00f51763          	bne	a0,a5,200010a0 <_fstat_r+0x22>
20001096:	8e818793          	addi	a5,gp,-1816 # 80000b70 <errno>
2000109a:	439c                	lw	a5,0(a5)
2000109c:	c391                	beqz	a5,200010a0 <_fstat_r+0x22>
2000109e:	c01c                	sw	a5,0(s0)
200010a0:	40b2                	lw	ra,12(sp)
200010a2:	4422                	lw	s0,8(sp)
200010a4:	0141                	addi	sp,sp,16
200010a6:	8082                	ret

200010a8 <_isatty_r>:
_isatty_r():
200010a8:	1141                	addi	sp,sp,-16
200010aa:	c422                	sw	s0,8(sp)
200010ac:	842a                	mv	s0,a0
200010ae:	852e                	mv	a0,a1
200010b0:	8e01a423          	sw	zero,-1816(gp) # 80000b70 <errno>
200010b4:	c606                	sw	ra,12(sp)
200010b6:	2159                	jal	2000153c <_isatty>
200010b8:	57fd                	li	a5,-1
200010ba:	00f51763          	bne	a0,a5,200010c8 <_isatty_r+0x20>
200010be:	8e818793          	addi	a5,gp,-1816 # 80000b70 <errno>
200010c2:	439c                	lw	a5,0(a5)
200010c4:	c391                	beqz	a5,200010c8 <_isatty_r+0x20>
200010c6:	c01c                	sw	a5,0(s0)
200010c8:	40b2                	lw	ra,12(sp)
200010ca:	4422                	lw	s0,8(sp)
200010cc:	0141                	addi	sp,sp,16
200010ce:	8082                	ret

200010d0 <_lseek_r>:
_lseek_r():
200010d0:	1141                	addi	sp,sp,-16
200010d2:	c422                	sw	s0,8(sp)
200010d4:	842a                	mv	s0,a0
200010d6:	852e                	mv	a0,a1
200010d8:	85b2                	mv	a1,a2
200010da:	8636                	mv	a2,a3
200010dc:	8e01a423          	sw	zero,-1816(gp) # 80000b70 <errno>
200010e0:	c606                	sw	ra,12(sp)
200010e2:	29ad                	jal	2000155c <_lseek>
200010e4:	57fd                	li	a5,-1
200010e6:	00f51763          	bne	a0,a5,200010f4 <_lseek_r+0x24>
200010ea:	8e818793          	addi	a5,gp,-1816 # 80000b70 <errno>
200010ee:	439c                	lw	a5,0(a5)
200010f0:	c391                	beqz	a5,200010f4 <_lseek_r+0x24>
200010f2:	c01c                	sw	a5,0(s0)
200010f4:	40b2                	lw	ra,12(sp)
200010f6:	4422                	lw	s0,8(sp)
200010f8:	0141                	addi	sp,sp,16
200010fa:	8082                	ret

200010fc <memchr>:
memchr():
200010fc:	0ff5f593          	andi	a1,a1,255
20001100:	962a                	add	a2,a2,a0
20001102:	00c51463          	bne	a0,a2,2000110a <memchr+0xe>
20001106:	4501                	li	a0,0
20001108:	8082                	ret
2000110a:	00054783          	lbu	a5,0(a0)
2000110e:	feb78de3          	beq	a5,a1,20001108 <memchr+0xc>
20001112:	0505                	addi	a0,a0,1
20001114:	b7fd                	j	20001102 <memchr+0x6>

20001116 <__malloc_lock>:
__malloc_lock():
20001116:	8082                	ret

20001118 <__malloc_unlock>:
__malloc_unlock():
20001118:	8082                	ret

2000111a <_printf_common>:
_printf_common():
2000111a:	7179                	addi	sp,sp,-48
2000111c:	ca56                	sw	s5,20(sp)
2000111e:	499c                	lw	a5,16(a1)
20001120:	8aba                	mv	s5,a4
20001122:	4598                	lw	a4,8(a1)
20001124:	d422                	sw	s0,40(sp)
20001126:	d226                	sw	s1,36(sp)
20001128:	ce4e                	sw	s3,28(sp)
2000112a:	cc52                	sw	s4,24(sp)
2000112c:	d606                	sw	ra,44(sp)
2000112e:	d04a                	sw	s2,32(sp)
20001130:	c85a                	sw	s6,16(sp)
20001132:	c65e                	sw	s7,12(sp)
20001134:	89aa                	mv	s3,a0
20001136:	842e                	mv	s0,a1
20001138:	84b2                	mv	s1,a2
2000113a:	8a36                	mv	s4,a3
2000113c:	00e7d363          	bge	a5,a4,20001142 <_printf_common+0x28>
20001140:	87ba                	mv	a5,a4
20001142:	c09c                	sw	a5,0(s1)
20001144:	04344703          	lbu	a4,67(s0)
20001148:	c319                	beqz	a4,2000114e <_printf_common+0x34>
2000114a:	0785                	addi	a5,a5,1
2000114c:	c09c                	sw	a5,0(s1)
2000114e:	401c                	lw	a5,0(s0)
20001150:	0207f793          	andi	a5,a5,32
20001154:	c781                	beqz	a5,2000115c <_printf_common+0x42>
20001156:	409c                	lw	a5,0(s1)
20001158:	0789                	addi	a5,a5,2
2000115a:	c09c                	sw	a5,0(s1)
2000115c:	00042903          	lw	s2,0(s0)
20001160:	00697913          	andi	s2,s2,6
20001164:	00091a63          	bnez	s2,20001178 <_printf_common+0x5e>
20001168:	01940b13          	addi	s6,s0,25
2000116c:	5bfd                	li	s7,-1
2000116e:	445c                	lw	a5,12(s0)
20001170:	4098                	lw	a4,0(s1)
20001172:	8f99                	sub	a5,a5,a4
20001174:	04f94c63          	blt	s2,a5,200011cc <_printf_common+0xb2>
20001178:	401c                	lw	a5,0(s0)
2000117a:	04344683          	lbu	a3,67(s0)
2000117e:	0207f793          	andi	a5,a5,32
20001182:	00d036b3          	snez	a3,a3
20001186:	eba5                	bnez	a5,200011f6 <_printf_common+0xdc>
20001188:	04340613          	addi	a2,s0,67
2000118c:	85d2                	mv	a1,s4
2000118e:	854e                	mv	a0,s3
20001190:	9a82                	jalr	s5
20001192:	57fd                	li	a5,-1
20001194:	04f50363          	beq	a0,a5,200011da <_printf_common+0xc0>
20001198:	401c                	lw	a5,0(s0)
2000119a:	4611                	li	a2,4
2000119c:	4098                	lw	a4,0(s1)
2000119e:	8b99                	andi	a5,a5,6
200011a0:	4454                	lw	a3,12(s0)
200011a2:	4481                	li	s1,0
200011a4:	00c79763          	bne	a5,a2,200011b2 <_printf_common+0x98>
200011a8:	40e684b3          	sub	s1,a3,a4
200011ac:	0004d363          	bgez	s1,200011b2 <_printf_common+0x98>
200011b0:	4481                	li	s1,0
200011b2:	441c                	lw	a5,8(s0)
200011b4:	4818                	lw	a4,16(s0)
200011b6:	00f75463          	bge	a4,a5,200011be <_printf_common+0xa4>
200011ba:	8f99                	sub	a5,a5,a4
200011bc:	94be                	add	s1,s1,a5
200011be:	4901                	li	s2,0
200011c0:	0469                	addi	s0,s0,26
200011c2:	5b7d                	li	s6,-1
200011c4:	05249863          	bne	s1,s2,20001214 <_printf_common+0xfa>
200011c8:	4501                	li	a0,0
200011ca:	a809                	j	200011dc <_printf_common+0xc2>
200011cc:	4685                	li	a3,1
200011ce:	865a                	mv	a2,s6
200011d0:	85d2                	mv	a1,s4
200011d2:	854e                	mv	a0,s3
200011d4:	9a82                	jalr	s5
200011d6:	01751e63          	bne	a0,s7,200011f2 <_printf_common+0xd8>
200011da:	557d                	li	a0,-1
200011dc:	50b2                	lw	ra,44(sp)
200011de:	5422                	lw	s0,40(sp)
200011e0:	5492                	lw	s1,36(sp)
200011e2:	5902                	lw	s2,32(sp)
200011e4:	49f2                	lw	s3,28(sp)
200011e6:	4a62                	lw	s4,24(sp)
200011e8:	4ad2                	lw	s5,20(sp)
200011ea:	4b42                	lw	s6,16(sp)
200011ec:	4bb2                	lw	s7,12(sp)
200011ee:	6145                	addi	sp,sp,48
200011f0:	8082                	ret
200011f2:	0905                	addi	s2,s2,1
200011f4:	bfad                	j	2000116e <_printf_common+0x54>
200011f6:	00d40733          	add	a4,s0,a3
200011fa:	03000613          	li	a2,48
200011fe:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffd8cf>
20001202:	04544703          	lbu	a4,69(s0)
20001206:	00168793          	addi	a5,a3,1
2000120a:	97a2                	add	a5,a5,s0
2000120c:	0689                	addi	a3,a3,2
2000120e:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20001212:	bf9d                	j	20001188 <_printf_common+0x6e>
20001214:	4685                	li	a3,1
20001216:	8622                	mv	a2,s0
20001218:	85d2                	mv	a1,s4
2000121a:	854e                	mv	a0,s3
2000121c:	9a82                	jalr	s5
2000121e:	fb650ee3          	beq	a0,s6,200011da <_printf_common+0xc0>
20001222:	0905                	addi	s2,s2,1
20001224:	b745                	j	200011c4 <_printf_common+0xaa>

20001226 <_printf_i>:
_printf_i():
20001226:	7179                	addi	sp,sp,-48
20001228:	d422                	sw	s0,40(sp)
2000122a:	d226                	sw	s1,36(sp)
2000122c:	d04a                	sw	s2,32(sp)
2000122e:	ce4e                	sw	s3,28(sp)
20001230:	d606                	sw	ra,44(sp)
20001232:	cc52                	sw	s4,24(sp)
20001234:	ca56                	sw	s5,20(sp)
20001236:	c85a                	sw	s6,16(sp)
20001238:	89b6                	mv	s3,a3
2000123a:	0185c683          	lbu	a3,24(a1)
2000123e:	06e00793          	li	a5,110
20001242:	8932                	mv	s2,a2
20001244:	84aa                	mv	s1,a0
20001246:	842e                	mv	s0,a1
20001248:	04358613          	addi	a2,a1,67
2000124c:	1ef68063          	beq	a3,a5,2000142c <_printf_i+0x206>
20001250:	06d7e263          	bltu	a5,a3,200012b4 <_printf_i+0x8e>
20001254:	06300793          	li	a5,99
20001258:	0af68263          	beq	a3,a5,200012fc <_printf_i+0xd6>
2000125c:	00d7ed63          	bltu	a5,a3,20001276 <_printf_i+0x50>
20001260:	1e068a63          	beqz	a3,20001454 <_printf_i+0x22e>
20001264:	05800793          	li	a5,88
20001268:	16f68663          	beq	a3,a5,200013d4 <_printf_i+0x1ae>
2000126c:	04240a93          	addi	s5,s0,66
20001270:	04d40123          	sb	a3,66(s0)
20001274:	a869                	j	2000130e <_printf_i+0xe8>
20001276:	06400793          	li	a5,100
2000127a:	00f68663          	beq	a3,a5,20001286 <_printf_i+0x60>
2000127e:	06900793          	li	a5,105
20001282:	fef695e3          	bne	a3,a5,2000126c <_printf_i+0x46>
20001286:	401c                	lw	a5,0(s0)
20001288:	4308                	lw	a0,0(a4)
2000128a:	0807f693          	andi	a3,a5,128
2000128e:	00450593          	addi	a1,a0,4
20001292:	c2c1                	beqz	a3,20001312 <_printf_i+0xec>
20001294:	411c                	lw	a5,0(a0)
20001296:	c30c                	sw	a1,0(a4)
20001298:	0007d863          	bgez	a5,200012a8 <_printf_i+0x82>
2000129c:	02d00713          	li	a4,45
200012a0:	40f007b3          	neg	a5,a5
200012a4:	04e401a3          	sb	a4,67(s0)
200012a8:	00005697          	auipc	a3,0x5
200012ac:	e3c68693          	addi	a3,a3,-452 # 200060e4 <__sf_fake_stdout+0x34>
200012b0:	4729                	li	a4,10
200012b2:	a065                	j	2000135a <_printf_i+0x134>
200012b4:	07300793          	li	a5,115
200012b8:	1af68263          	beq	a3,a5,2000145c <_printf_i+0x236>
200012bc:	00d7ef63          	bltu	a5,a3,200012da <_printf_i+0xb4>
200012c0:	06f00793          	li	a5,111
200012c4:	04f68f63          	beq	a3,a5,20001322 <_printf_i+0xfc>
200012c8:	07000793          	li	a5,112
200012cc:	faf690e3          	bne	a3,a5,2000126c <_printf_i+0x46>
200012d0:	419c                	lw	a5,0(a1)
200012d2:	0207e793          	ori	a5,a5,32
200012d6:	c19c                	sw	a5,0(a1)
200012d8:	a809                	j	200012ea <_printf_i+0xc4>
200012da:	07500793          	li	a5,117
200012de:	04f68263          	beq	a3,a5,20001322 <_printf_i+0xfc>
200012e2:	07800793          	li	a5,120
200012e6:	f8f693e3          	bne	a3,a5,2000126c <_printf_i+0x46>
200012ea:	07800793          	li	a5,120
200012ee:	04f402a3          	sb	a5,69(s0)
200012f2:	00005697          	auipc	a3,0x5
200012f6:	e0668693          	addi	a3,a3,-506 # 200060f8 <__sf_fake_stdout+0x48>
200012fa:	a0dd                	j	200013e0 <_printf_i+0x1ba>
200012fc:	431c                	lw	a5,0(a4)
200012fe:	04258a93          	addi	s5,a1,66
20001302:	00478693          	addi	a3,a5,4
20001306:	439c                	lw	a5,0(a5)
20001308:	c314                	sw	a3,0(a4)
2000130a:	04f58123          	sb	a5,66(a1)
2000130e:	4785                	li	a5,1
20001310:	a2ad                	j	2000147a <_printf_i+0x254>
20001312:	0407f693          	andi	a3,a5,64
20001316:	411c                	lw	a5,0(a0)
20001318:	c30c                	sw	a1,0(a4)
2000131a:	debd                	beqz	a3,20001298 <_printf_i+0x72>
2000131c:	07c2                	slli	a5,a5,0x10
2000131e:	87c1                	srai	a5,a5,0x10
20001320:	bfa5                	j	20001298 <_printf_i+0x72>
20001322:	400c                	lw	a1,0(s0)
20001324:	431c                	lw	a5,0(a4)
20001326:	0805f813          	andi	a6,a1,128
2000132a:	00478513          	addi	a0,a5,4
2000132e:	00080563          	beqz	a6,20001338 <_printf_i+0x112>
20001332:	c308                	sw	a0,0(a4)
20001334:	439c                	lw	a5,0(a5)
20001336:	a039                	j	20001344 <_printf_i+0x11e>
20001338:	0405f593          	andi	a1,a1,64
2000133c:	c308                	sw	a0,0(a4)
2000133e:	d9fd                	beqz	a1,20001334 <_printf_i+0x10e>
20001340:	0007d783          	lhu	a5,0(a5)
20001344:	06f00713          	li	a4,111
20001348:	0ce68a63          	beq	a3,a4,2000141c <_printf_i+0x1f6>
2000134c:	00005697          	auipc	a3,0x5
20001350:	d9868693          	addi	a3,a3,-616 # 200060e4 <__sf_fake_stdout+0x34>
20001354:	4729                	li	a4,10
20001356:	040401a3          	sb	zero,67(s0)
2000135a:	404c                	lw	a1,4(s0)
2000135c:	c40c                	sw	a1,8(s0)
2000135e:	0005c563          	bltz	a1,20001368 <_printf_i+0x142>
20001362:	4008                	lw	a0,0(s0)
20001364:	996d                	andi	a0,a0,-5
20001366:	c008                	sw	a0,0(s0)
20001368:	e399                	bnez	a5,2000136e <_printf_i+0x148>
2000136a:	8ab2                	mv	s5,a2
2000136c:	cd91                	beqz	a1,20001388 <_printf_i+0x162>
2000136e:	8ab2                	mv	s5,a2
20001370:	02e7f5b3          	remu	a1,a5,a4
20001374:	1afd                	addi	s5,s5,-1
20001376:	95b6                	add	a1,a1,a3
20001378:	0005c583          	lbu	a1,0(a1)
2000137c:	00ba8023          	sb	a1,0(s5)
20001380:	02e7d5b3          	divu	a1,a5,a4
20001384:	0ae7f263          	bgeu	a5,a4,20001428 <_printf_i+0x202>
20001388:	47a1                	li	a5,8
2000138a:	00f71e63          	bne	a4,a5,200013a6 <_printf_i+0x180>
2000138e:	401c                	lw	a5,0(s0)
20001390:	8b85                	andi	a5,a5,1
20001392:	cb91                	beqz	a5,200013a6 <_printf_i+0x180>
20001394:	4058                	lw	a4,4(s0)
20001396:	481c                	lw	a5,16(s0)
20001398:	00e7c763          	blt	a5,a4,200013a6 <_printf_i+0x180>
2000139c:	03000793          	li	a5,48
200013a0:	fefa8fa3          	sb	a5,-1(s5)
200013a4:	1afd                	addi	s5,s5,-1
200013a6:	41560633          	sub	a2,a2,s5
200013aa:	c810                	sw	a2,16(s0)
200013ac:	874e                	mv	a4,s3
200013ae:	86ca                	mv	a3,s2
200013b0:	0070                	addi	a2,sp,12
200013b2:	85a2                	mv	a1,s0
200013b4:	8526                	mv	a0,s1
200013b6:	3395                	jal	2000111a <_printf_common>
200013b8:	5a7d                	li	s4,-1
200013ba:	0d451463          	bne	a0,s4,20001482 <_printf_i+0x25c>
200013be:	557d                	li	a0,-1
200013c0:	50b2                	lw	ra,44(sp)
200013c2:	5422                	lw	s0,40(sp)
200013c4:	5492                	lw	s1,36(sp)
200013c6:	5902                	lw	s2,32(sp)
200013c8:	49f2                	lw	s3,28(sp)
200013ca:	4a62                	lw	s4,24(sp)
200013cc:	4ad2                	lw	s5,20(sp)
200013ce:	4b42                	lw	s6,16(sp)
200013d0:	6145                	addi	sp,sp,48
200013d2:	8082                	ret
200013d4:	04d582a3          	sb	a3,69(a1)
200013d8:	00005697          	auipc	a3,0x5
200013dc:	d0c68693          	addi	a3,a3,-756 # 200060e4 <__sf_fake_stdout+0x34>
200013e0:	400c                	lw	a1,0(s0)
200013e2:	4308                	lw	a0,0(a4)
200013e4:	0805f813          	andi	a6,a1,128
200013e8:	411c                	lw	a5,0(a0)
200013ea:	0511                	addi	a0,a0,4
200013ec:	02080063          	beqz	a6,2000140c <_printf_i+0x1e6>
200013f0:	c308                	sw	a0,0(a4)
200013f2:	0015f713          	andi	a4,a1,1
200013f6:	c701                	beqz	a4,200013fe <_printf_i+0x1d8>
200013f8:	0205e593          	ori	a1,a1,32
200013fc:	c00c                	sw	a1,0(s0)
200013fe:	4741                	li	a4,16
20001400:	fbb9                	bnez	a5,20001356 <_printf_i+0x130>
20001402:	400c                	lw	a1,0(s0)
20001404:	fdf5f593          	andi	a1,a1,-33
20001408:	c00c                	sw	a1,0(s0)
2000140a:	b7b1                	j	20001356 <_printf_i+0x130>
2000140c:	0405f813          	andi	a6,a1,64
20001410:	c308                	sw	a0,0(a4)
20001412:	fe0800e3          	beqz	a6,200013f2 <_printf_i+0x1cc>
20001416:	07c2                	slli	a5,a5,0x10
20001418:	83c1                	srli	a5,a5,0x10
2000141a:	bfe1                	j	200013f2 <_printf_i+0x1cc>
2000141c:	00005697          	auipc	a3,0x5
20001420:	cc868693          	addi	a3,a3,-824 # 200060e4 <__sf_fake_stdout+0x34>
20001424:	4721                	li	a4,8
20001426:	bf05                	j	20001356 <_printf_i+0x130>
20001428:	87ae                	mv	a5,a1
2000142a:	b799                	j	20001370 <_printf_i+0x14a>
2000142c:	4194                	lw	a3,0(a1)
2000142e:	431c                	lw	a5,0(a4)
20001430:	49cc                	lw	a1,20(a1)
20001432:	0806f813          	andi	a6,a3,128
20001436:	00478513          	addi	a0,a5,4
2000143a:	00080663          	beqz	a6,20001446 <_printf_i+0x220>
2000143e:	c308                	sw	a0,0(a4)
20001440:	439c                	lw	a5,0(a5)
20001442:	c38c                	sw	a1,0(a5)
20001444:	a801                	j	20001454 <_printf_i+0x22e>
20001446:	c308                	sw	a0,0(a4)
20001448:	0406f693          	andi	a3,a3,64
2000144c:	439c                	lw	a5,0(a5)
2000144e:	daf5                	beqz	a3,20001442 <_printf_i+0x21c>
20001450:	00b79023          	sh	a1,0(a5)
20001454:	00042823          	sw	zero,16(s0)
20001458:	8ab2                	mv	s5,a2
2000145a:	bf89                	j	200013ac <_printf_i+0x186>
2000145c:	431c                	lw	a5,0(a4)
2000145e:	41d0                	lw	a2,4(a1)
20001460:	4581                	li	a1,0
20001462:	00478693          	addi	a3,a5,4
20001466:	c314                	sw	a3,0(a4)
20001468:	0007aa83          	lw	s5,0(a5)
2000146c:	8556                	mv	a0,s5
2000146e:	3179                	jal	200010fc <memchr>
20001470:	c501                	beqz	a0,20001478 <_printf_i+0x252>
20001472:	41550533          	sub	a0,a0,s5
20001476:	c048                	sw	a0,4(s0)
20001478:	405c                	lw	a5,4(s0)
2000147a:	c81c                	sw	a5,16(s0)
2000147c:	040401a3          	sb	zero,67(s0)
20001480:	b735                	j	200013ac <_printf_i+0x186>
20001482:	4814                	lw	a3,16(s0)
20001484:	8656                	mv	a2,s5
20001486:	85ca                	mv	a1,s2
20001488:	8526                	mv	a0,s1
2000148a:	9982                	jalr	s3
2000148c:	f34509e3          	beq	a0,s4,200013be <_printf_i+0x198>
20001490:	401c                	lw	a5,0(s0)
20001492:	8b89                	andi	a5,a5,2
20001494:	e78d                	bnez	a5,200014be <_printf_i+0x298>
20001496:	47b2                	lw	a5,12(sp)
20001498:	4448                	lw	a0,12(s0)
2000149a:	f2f553e3          	bge	a0,a5,200013c0 <_printf_i+0x19a>
2000149e:	853e                	mv	a0,a5
200014a0:	b705                	j	200013c0 <_printf_i+0x19a>
200014a2:	4685                	li	a3,1
200014a4:	8656                	mv	a2,s5
200014a6:	85ca                	mv	a1,s2
200014a8:	8526                	mv	a0,s1
200014aa:	9982                	jalr	s3
200014ac:	f16509e3          	beq	a0,s6,200013be <_printf_i+0x198>
200014b0:	0a05                	addi	s4,s4,1
200014b2:	445c                	lw	a5,12(s0)
200014b4:	4732                	lw	a4,12(sp)
200014b6:	8f99                	sub	a5,a5,a4
200014b8:	fefa45e3          	blt	s4,a5,200014a2 <_printf_i+0x27c>
200014bc:	bfe9                	j	20001496 <_printf_i+0x270>
200014be:	4a01                	li	s4,0
200014c0:	01940a93          	addi	s5,s0,25
200014c4:	5b7d                	li	s6,-1
200014c6:	b7f5                	j	200014b2 <_printf_i+0x28c>

200014c8 <_read_r>:
_read_r():
200014c8:	1141                	addi	sp,sp,-16
200014ca:	c422                	sw	s0,8(sp)
200014cc:	842a                	mv	s0,a0
200014ce:	852e                	mv	a0,a1
200014d0:	85b2                	mv	a1,a2
200014d2:	8636                	mv	a2,a3
200014d4:	8e01a423          	sw	zero,-1816(gp) # 80000b70 <errno>
200014d8:	c606                	sw	ra,12(sp)
200014da:	2075                	jal	20001586 <_read>
200014dc:	57fd                	li	a5,-1
200014de:	00f51763          	bne	a0,a5,200014ec <_read_r+0x24>
200014e2:	8e818793          	addi	a5,gp,-1816 # 80000b70 <errno>
200014e6:	439c                	lw	a5,0(a5)
200014e8:	c391                	beqz	a5,200014ec <_read_r+0x24>
200014ea:	c01c                	sw	a5,0(s0)
200014ec:	40b2                	lw	ra,12(sp)
200014ee:	4422                	lw	s0,8(sp)
200014f0:	0141                	addi	sp,sp,16
200014f2:	8082                	ret

200014f4 <_close>:
_close():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_close.c:3
#include <errno.h>

int _close(int file) {
200014f4:	1101                	addi	sp,sp,-32
200014f6:	ce06                	sw	ra,28(sp)
200014f8:	cc22                	sw	s0,24(sp)
200014fa:	1000                	addi	s0,sp,32
200014fc:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_close.c:4
    errno = ENOSYS;
20001500:	2a59                	jal	20001696 <__errno>
20001502:	872a                	mv	a4,a0
20001504:	05800793          	li	a5,88
20001508:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
    return -1;
2000150a:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
}
2000150c:	853e                	mv	a0,a5
2000150e:	40f2                	lw	ra,28(sp)
20001510:	4462                	lw	s0,24(sp)
20001512:	6105                	addi	sp,sp,32
20001514:	8082                	ret

20001516 <_fstat>:
_fstat():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:4
#include <errno.h>
#include <sys/stat.h>

int _fstat(int file, struct stat *st) {
20001516:	1101                	addi	sp,sp,-32
20001518:	ce06                	sw	ra,28(sp)
2000151a:	cc22                	sw	s0,24(sp)
2000151c:	1000                	addi	s0,sp,32
2000151e:	fea42623          	sw	a0,-20(s0)
20001522:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:5
    errno = -ENOSYS;
20001526:	2a85                	jal	20001696 <__errno>
20001528:	872a                	mv	a4,a0
2000152a:	fa800793          	li	a5,-88
2000152e:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
    return -1;
20001530:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
}
20001532:	853e                	mv	a0,a5
20001534:	40f2                	lw	ra,28(sp)
20001536:	4462                	lw	s0,24(sp)
20001538:	6105                	addi	sp,sp,32
2000153a:	8082                	ret

2000153c <_isatty>:
_isatty():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:3
#include <unistd.h>

int _isatty(int file) { return (file == STDOUT_FILENO); }
2000153c:	1101                	addi	sp,sp,-32
2000153e:	ce22                	sw	s0,28(sp)
20001540:	1000                	addi	s0,sp,32
20001542:	fea42623          	sw	a0,-20(s0)
20001546:	fec42783          	lw	a5,-20(s0)
2000154a:	17fd                	addi	a5,a5,-1
2000154c:	0017b793          	seqz	a5,a5
20001550:	0ff7f793          	andi	a5,a5,255
20001554:	853e                	mv	a0,a5
20001556:	4472                	lw	s0,28(sp)
20001558:	6105                	addi	sp,sp,32
2000155a:	8082                	ret

2000155c <_lseek>:
_lseek():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:4
#include <errno.h>
#include <sys/types.h>

off_t _lseek(int file, off_t ptr, int dir) {
2000155c:	1101                	addi	sp,sp,-32
2000155e:	ce06                	sw	ra,28(sp)
20001560:	cc22                	sw	s0,24(sp)
20001562:	1000                	addi	s0,sp,32
20001564:	fea42623          	sw	a0,-20(s0)
20001568:	feb42423          	sw	a1,-24(s0)
2000156c:	fec42223          	sw	a2,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:5
    errno = ENOSYS;
20001570:	221d                	jal	20001696 <__errno>
20001572:	872a                	mv	a4,a0
20001574:	05800793          	li	a5,88
20001578:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
    return -1;
2000157a:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
}
2000157c:	853e                	mv	a0,a5
2000157e:	40f2                	lw	ra,28(sp)
20001580:	4462                	lw	s0,24(sp)
20001582:	6105                	addi	sp,sp,32
20001584:	8082                	ret

20001586 <_read>:
_read():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_read.c:4
#include <errno.h>
#include <sys/types.h>

ssize_t _read(int file, void *ptr, size_t len) {
20001586:	1101                	addi	sp,sp,-32
20001588:	ce06                	sw	ra,28(sp)
2000158a:	cc22                	sw	s0,24(sp)
2000158c:	1000                	addi	s0,sp,32
2000158e:	fea42623          	sw	a0,-20(s0)
20001592:	feb42423          	sw	a1,-24(s0)
20001596:	fec42223          	sw	a2,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_read.c:5
    errno = ENOSYS;
2000159a:	28f5                	jal	20001696 <__errno>
2000159c:	872a                	mv	a4,a0
2000159e:	05800793          	li	a5,88
200015a2:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
    return -1;
200015a4:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
}
200015a6:	853e                	mv	a0,a5
200015a8:	40f2                	lw	ra,28(sp)
200015aa:	4462                	lw	s0,24(sp)
200015ac:	6105                	addi	sp,sp,32
200015ae:	8082                	ret

200015b0 <_sbrk>:
_sbrk():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:18
int _brk(void *addr) {
    brk = addr;
    return 0;
}

char *_sbrk(ptrdiff_t incr) {
200015b0:	7179                	addi	sp,sp,-48
200015b2:	d622                	sw	s0,44(sp)
200015b4:	1800                	addi	s0,sp,48
200015b6:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:19
    char *old = brk;
200015ba:	800017b7          	lui	a5,0x80001
200015be:	a907a783          	lw	a5,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff31c>
200015c2:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22

    /* If __heap_size == 0, we can't allocate memory on the heap */
    if (&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
200015c6:	cec18713          	addi	a4,gp,-788 # 80000f74 <_sp>
200015ca:	4ec18793          	addi	a5,gp,1260 # 80001774 <metal_segment_heap_target_end>
200015ce:	00f71463          	bne	a4,a5,200015d6 <_sbrk+0x26>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
        return (void *)-1;
200015d2:	57fd                	li	a5,-1
200015d4:	a089                	j	20001616 <_sbrk+0x66>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    }

    /* Don't move the break past the end of the heap */
    if ((brk + incr) < &metal_segment_heap_target_end) {
200015d6:	800017b7          	lui	a5,0x80001
200015da:	a907a703          	lw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff31c>
200015de:	fdc42783          	lw	a5,-36(s0)
200015e2:	973e                	add	a4,a4,a5
200015e4:	4ec18793          	addi	a5,gp,1260 # 80001774 <metal_segment_heap_target_end>
200015e8:	02f77063          	bgeu	a4,a5,20001608 <_sbrk+0x58>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:28
        brk += incr;
200015ec:	800017b7          	lui	a5,0x80001
200015f0:	a907a703          	lw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff31c>
200015f4:	fdc42783          	lw	a5,-36(s0)
200015f8:	973e                	add	a4,a4,a5
200015fa:	800017b7          	lui	a5,0x80001
200015fe:	a8e7a823          	sw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff31c>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    } else {
        brk = &metal_segment_heap_target_end;
        return (void *)-1;
    }

    return old;
20001602:	fec42783          	lw	a5,-20(s0)
20001606:	a801                	j	20001616 <_sbrk+0x66>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:30
        brk = &metal_segment_heap_target_end;
20001608:	800017b7          	lui	a5,0x80001
2000160c:	4ec18713          	addi	a4,gp,1260 # 80001774 <metal_segment_heap_target_end>
20001610:	a8e7a823          	sw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff31c>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
        return (void *)-1;
20001614:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
}
20001616:	853e                	mv	a0,a5
20001618:	5432                	lw	s0,44(sp)
2000161a:	6145                	addi	sp,sp,48
2000161c:	8082                	ret

2000161e <_write>:
_write():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:7
#include <metal/tty.h>
#include <sys/types.h>
#include <unistd.h>

/* Write to a file.  */
ssize_t _write(int file, const void *ptr, size_t len) {
2000161e:	7179                	addi	sp,sp,-48
20001620:	d606                	sw	ra,44(sp)
20001622:	d422                	sw	s0,40(sp)
20001624:	1800                	addi	s0,sp,48
20001626:	fca42e23          	sw	a0,-36(s0)
2000162a:	fcb42c23          	sw	a1,-40(s0)
2000162e:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:8
    if (file != STDOUT_FILENO) {
20001632:	fdc42703          	lw	a4,-36(s0)
20001636:	4785                	li	a5,1
20001638:	00f70963          	beq	a4,a5,2000164a <_write+0x2c>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
        errno = ENOSYS;
2000163c:	28a9                	jal	20001696 <__errno>
2000163e:	872a                	mv	a4,a0
20001640:	05800793          	li	a5,88
20001644:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
        return -1;
20001646:	57fd                	li	a5,-1
20001648:	a82d                	j	20001682 <_write+0x64>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:13
    }

    const char *bptr = ptr;
2000164a:	fd842783          	lw	a5,-40(s0)
2000164e:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14
    for (size_t i = 0; i < len; ++i)
20001652:	fe042623          	sw	zero,-20(s0)
20001656:	a839                	j	20001674 <_write+0x56>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15 (discriminator 3)
        metal_tty_putc(bptr[i]);
20001658:	fe842703          	lw	a4,-24(s0)
2000165c:	fec42783          	lw	a5,-20(s0)
20001660:	97ba                	add	a5,a5,a4
20001662:	0007c783          	lbu	a5,0(a5)
20001666:	853e                	mv	a0,a5
20001668:	2e9d                	jal	200019de <metal_tty_putc>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14 (discriminator 3)
    for (size_t i = 0; i < len; ++i)
2000166a:	fec42783          	lw	a5,-20(s0)
2000166e:	0785                	addi	a5,a5,1
20001670:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14 (discriminator 1)
20001674:	fec42703          	lw	a4,-20(s0)
20001678:	fd442783          	lw	a5,-44(s0)
2000167c:	fcf76ee3          	bltu	a4,a5,20001658 <_write+0x3a>
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
    return 0;
20001680:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17
}
20001682:	853e                	mv	a0,a5
20001684:	50b2                	lw	ra,44(sp)
20001686:	5422                	lw	s0,40(sp)
20001688:	6145                	addi	sp,sp,48
2000168a:	8082                	ret

2000168c <atexit>:
atexit():
2000168c:	85aa                	mv	a1,a0
2000168e:	4681                	li	a3,0
20001690:	4601                	li	a2,0
20001692:	4501                	li	a0,0
20001694:	a0cd                	j	20001776 <__register_exitproc>

20001696 <__errno>:
__errno():
20001696:	5ffff797          	auipc	a5,0x5ffff
2000169a:	3f278793          	addi	a5,a5,1010 # 80000a88 <_impure_ptr>
2000169e:	4388                	lw	a0,0(a5)
200016a0:	8082                	ret

200016a2 <exit>:
exit():
200016a2:	1141                	addi	sp,sp,-16
200016a4:	c422                	sw	s0,8(sp)
200016a6:	c606                	sw	ra,12(sp)
200016a8:	00000797          	auipc	a5,0x0
200016ac:	15678793          	addi	a5,a5,342 # 200017fe <__call_exitprocs>
200016b0:	842a                	mv	s0,a0
200016b2:	c399                	beqz	a5,200016b8 <exit+0x16>
200016b4:	4581                	li	a1,0
200016b6:	22a1                	jal	200017fe <__call_exitprocs>
200016b8:	5ffff797          	auipc	a5,0x5ffff
200016bc:	3d478793          	addi	a5,a5,980 # 80000a8c <_global_impure_ptr>
200016c0:	4388                	lw	a0,0(a5)
200016c2:	551c                	lw	a5,40(a0)
200016c4:	c391                	beqz	a5,200016c8 <exit+0x26>
200016c6:	9782                	jalr	a5
200016c8:	8522                	mv	a0,s0
200016ca:	167040ef          	jal	ra,20006030 <_exit>

200016ce <__libc_fini_array>:
__libc_fini_array():
200016ce:	1141                	addi	sp,sp,-16
200016d0:	00005797          	auipc	a5,0x5
200016d4:	67878793          	addi	a5,a5,1656 # 20006d48 <__fini_array_end>
200016d8:	c422                	sw	s0,8(sp)
200016da:	00005417          	auipc	s0,0x5
200016de:	66e40413          	addi	s0,s0,1646 # 20006d48 <__fini_array_end>
200016e2:	8c1d                	sub	s0,s0,a5
200016e4:	c226                	sw	s1,4(sp)
200016e6:	c606                	sw	ra,12(sp)
200016e8:	8409                	srai	s0,s0,0x2
200016ea:	84be                	mv	s1,a5
200016ec:	e419                	bnez	s0,200016fa <__libc_fini_array+0x2c>
200016ee:	4422                	lw	s0,8(sp)
200016f0:	40b2                	lw	ra,12(sp)
200016f2:	4492                	lw	s1,4(sp)
200016f4:	0141                	addi	sp,sp,16
200016f6:	ab7fe06f          	j	200001ac <_fini>
200016fa:	147d                	addi	s0,s0,-1
200016fc:	00241793          	slli	a5,s0,0x2
20001700:	97a6                	add	a5,a5,s1
20001702:	439c                	lw	a5,0(a5)
20001704:	9782                	jalr	a5
20001706:	b7dd                	j	200016ec <__libc_fini_array+0x1e>

20001708 <__libc_init_array>:
__libc_init_array():
20001708:	1141                	addi	sp,sp,-16
2000170a:	00005797          	auipc	a5,0x5
2000170e:	62e78793          	addi	a5,a5,1582 # 20006d38 <__init_array_start>
20001712:	c422                	sw	s0,8(sp)
20001714:	00005417          	auipc	s0,0x5
20001718:	62440413          	addi	s0,s0,1572 # 20006d38 <__init_array_start>
2000171c:	8c1d                	sub	s0,s0,a5
2000171e:	c226                	sw	s1,4(sp)
20001720:	c04a                	sw	s2,0(sp)
20001722:	c606                	sw	ra,12(sp)
20001724:	8409                	srai	s0,s0,0x2
20001726:	4481                	li	s1,0
20001728:	893e                	mv	s2,a5
2000172a:	02849863          	bne	s1,s0,2000175a <__libc_init_array+0x52>
2000172e:	a7ffe0ef          	jal	ra,200001ac <_fini>
20001732:	00005797          	auipc	a5,0x5
20001736:	60678793          	addi	a5,a5,1542 # 20006d38 <__init_array_start>
2000173a:	00005417          	auipc	s0,0x5
2000173e:	60240413          	addi	s0,s0,1538 # 20006d3c <_metal_tty_init_ptr>
20001742:	8c1d                	sub	s0,s0,a5
20001744:	8409                	srai	s0,s0,0x2
20001746:	4481                	li	s1,0
20001748:	893e                	mv	s2,a5
2000174a:	00849f63          	bne	s1,s0,20001768 <__libc_init_array+0x60>
2000174e:	40b2                	lw	ra,12(sp)
20001750:	4422                	lw	s0,8(sp)
20001752:	4492                	lw	s1,4(sp)
20001754:	4902                	lw	s2,0(sp)
20001756:	0141                	addi	sp,sp,16
20001758:	8082                	ret
2000175a:	00249793          	slli	a5,s1,0x2
2000175e:	97ca                	add	a5,a5,s2
20001760:	439c                	lw	a5,0(a5)
20001762:	0485                	addi	s1,s1,1
20001764:	9782                	jalr	a5
20001766:	b7d1                	j	2000172a <__libc_init_array+0x22>
20001768:	00249793          	slli	a5,s1,0x2
2000176c:	97ca                	add	a5,a5,s2
2000176e:	439c                	lw	a5,0(a5)
20001770:	0485                	addi	s1,s1,1
20001772:	9782                	jalr	a5
20001774:	bfd9                	j	2000174a <__libc_init_array+0x42>

20001776 <__register_exitproc>:
__register_exitproc():
20001776:	5ffff797          	auipc	a5,0x5ffff
2000177a:	36278793          	addi	a5,a5,866 # 80000ad8 <_global_atexit>
2000177e:	439c                	lw	a5,0(a5)
20001780:	8e2a                	mv	t3,a0
20001782:	e39d                	bnez	a5,200017a8 <__register_exitproc+0x32>
20001784:	5ffff717          	auipc	a4,0x5ffff
20001788:	36070713          	addi	a4,a4,864 # 80000ae4 <_global_atexit0>
2000178c:	5ffff797          	auipc	a5,0x5ffff
20001790:	34e7a623          	sw	a4,844(a5) # 80000ad8 <_global_atexit>
20001794:	dffff517          	auipc	a0,0xdffff
20001798:	86c50513          	addi	a0,a0,-1940 # 0 <__metal_boot_hart>
2000179c:	87ba                	mv	a5,a4
2000179e:	c509                	beqz	a0,200017a8 <__register_exitproc+0x32>
200017a0:	411c                	lw	a5,0(a0)
200017a2:	8ef1a223          	sw	a5,-1820(gp) # 80000b6c <_global_atexit0+0x88>
200017a6:	87ba                	mv	a5,a4
200017a8:	43d8                	lw	a4,4(a5)
200017aa:	487d                	li	a6,31
200017ac:	557d                	li	a0,-1
200017ae:	04e84763          	blt	a6,a4,200017fc <__register_exitproc+0x86>
200017b2:	020e0e63          	beqz	t3,200017ee <__register_exitproc+0x78>
200017b6:	0887a803          	lw	a6,136(a5)
200017ba:	04080163          	beqz	a6,200017fc <__register_exitproc+0x86>
200017be:	00271893          	slli	a7,a4,0x2
200017c2:	98c2                	add	a7,a7,a6
200017c4:	00c8a023          	sw	a2,0(a7)
200017c8:	10082303          	lw	t1,256(a6)
200017cc:	4605                	li	a2,1
200017ce:	00e61633          	sll	a2,a2,a4
200017d2:	00c36333          	or	t1,t1,a2
200017d6:	10682023          	sw	t1,256(a6)
200017da:	08d8a023          	sw	a3,128(a7)
200017de:	4689                	li	a3,2
200017e0:	00de1763          	bne	t3,a3,200017ee <__register_exitproc+0x78>
200017e4:	10482683          	lw	a3,260(a6)
200017e8:	8e55                	or	a2,a2,a3
200017ea:	10c82223          	sw	a2,260(a6)
200017ee:	00170693          	addi	a3,a4,1
200017f2:	070a                	slli	a4,a4,0x2
200017f4:	c3d4                	sw	a3,4(a5)
200017f6:	97ba                	add	a5,a5,a4
200017f8:	c78c                	sw	a1,8(a5)
200017fa:	4501                	li	a0,0
200017fc:	8082                	ret

200017fe <__call_exitprocs>:
__call_exitprocs():
200017fe:	7179                	addi	sp,sp,-48
20001800:	cc52                	sw	s4,24(sp)
20001802:	ca56                	sw	s5,20(sp)
20001804:	c85a                	sw	s6,16(sp)
20001806:	c65e                	sw	s7,12(sp)
20001808:	d606                	sw	ra,44(sp)
2000180a:	d422                	sw	s0,40(sp)
2000180c:	d226                	sw	s1,36(sp)
2000180e:	d04a                	sw	s2,32(sp)
20001810:	ce4e                	sw	s3,28(sp)
20001812:	c462                	sw	s8,8(sp)
20001814:	8b2a                	mv	s6,a0
20001816:	8a2e                	mv	s4,a1
20001818:	5ffffa97          	auipc	s5,0x5ffff
2000181c:	2c0a8a93          	addi	s5,s5,704 # 80000ad8 <_global_atexit>
20001820:	4b85                	li	s7,1
20001822:	000aa403          	lw	s0,0(s5)
20001826:	c811                	beqz	s0,2000183a <__call_exitprocs+0x3c>
20001828:	4044                	lw	s1,4(s0)
2000182a:	08842983          	lw	s3,136(s0)
2000182e:	fff48913          	addi	s2,s1,-1
20001832:	048a                	slli	s1,s1,0x2
20001834:	94a2                	add	s1,s1,s0
20001836:	00095e63          	bgez	s2,20001852 <__call_exitprocs+0x54>
2000183a:	50b2                	lw	ra,44(sp)
2000183c:	5422                	lw	s0,40(sp)
2000183e:	5492                	lw	s1,36(sp)
20001840:	5902                	lw	s2,32(sp)
20001842:	49f2                	lw	s3,28(sp)
20001844:	4a62                	lw	s4,24(sp)
20001846:	4ad2                	lw	s5,20(sp)
20001848:	4b42                	lw	s6,16(sp)
2000184a:	4bb2                	lw	s7,12(sp)
2000184c:	4c22                	lw	s8,8(sp)
2000184e:	6145                	addi	sp,sp,48
20001850:	8082                	ret
20001852:	000a0e63          	beqz	s4,2000186e <__call_exitprocs+0x70>
20001856:	00099563          	bnez	s3,20001860 <__call_exitprocs+0x62>
2000185a:	197d                	addi	s2,s2,-1
2000185c:	14f1                	addi	s1,s1,-4
2000185e:	bfe1                	j	20001836 <__call_exitprocs+0x38>
20001860:	00291793          	slli	a5,s2,0x2
20001864:	97ce                	add	a5,a5,s3
20001866:	0807a783          	lw	a5,128(a5)
2000186a:	ff4798e3          	bne	a5,s4,2000185a <__call_exitprocs+0x5c>
2000186e:	4058                	lw	a4,4(s0)
20001870:	40dc                	lw	a5,4(s1)
20001872:	177d                	addi	a4,a4,-1
20001874:	03271863          	bne	a4,s2,200018a4 <__call_exitprocs+0xa6>
20001878:	01242223          	sw	s2,4(s0)
2000187c:	dff9                	beqz	a5,2000185a <__call_exitprocs+0x5c>
2000187e:	00442c03          	lw	s8,4(s0)
20001882:	00098863          	beqz	s3,20001892 <__call_exitprocs+0x94>
20001886:	1009a683          	lw	a3,256(s3)
2000188a:	012b9733          	sll	a4,s7,s2
2000188e:	8ef9                	and	a3,a3,a4
20001890:	ee89                	bnez	a3,200018aa <__call_exitprocs+0xac>
20001892:	9782                	jalr	a5
20001894:	4058                	lw	a4,4(s0)
20001896:	000aa783          	lw	a5,0(s5)
2000189a:	f98714e3          	bne	a4,s8,20001822 <__call_exitprocs+0x24>
2000189e:	faf40ee3          	beq	s0,a5,2000185a <__call_exitprocs+0x5c>
200018a2:	b741                	j	20001822 <__call_exitprocs+0x24>
200018a4:	0004a223          	sw	zero,4(s1)
200018a8:	bfd1                	j	2000187c <__call_exitprocs+0x7e>
200018aa:	00291693          	slli	a3,s2,0x2
200018ae:	96ce                	add	a3,a3,s3
200018b0:	428c                	lw	a1,0(a3)
200018b2:	1049a683          	lw	a3,260(s3)
200018b6:	8f75                	and	a4,a4,a3
200018b8:	e701                	bnez	a4,200018c0 <__call_exitprocs+0xc2>
200018ba:	855a                	mv	a0,s6
200018bc:	9782                	jalr	a5
200018be:	bfd9                	j	20001894 <__call_exitprocs+0x96>
200018c0:	852e                	mv	a0,a1
200018c2:	9782                	jalr	a5
200018c4:	bfc1                	j	20001894 <__call_exitprocs+0x96>

200018c6 <metal_init>:
metal_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:17
extern metal_constructor_t metal_constructors_start;
extern metal_constructor_t metal_constructors_end;
extern metal_destructor_t metal_destructors_start;
extern metal_destructor_t metal_destructors_end;

void metal_init(void) {
200018c6:	1101                	addi	sp,sp,-32
200018c8:	ce06                	sw	ra,28(sp)
200018ca:	cc22                	sw	s0,24(sp)
200018cc:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:20
    /* Make sure the constructors only run once */
    static int init_done = 0;
    if (init_done) {
200018ce:	800017b7          	lui	a5,0x80001
200018d2:	adc7a783          	lw	a5,-1316(a5) # 80000adc <metal_segment_heap_target_end+0xfffff368>
200018d6:	efa9                	bnez	a5,20001930 <metal_init+0x6a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:23
        return;
    }
    init_done = 1;
200018d8:	800017b7          	lui	a5,0x80001
200018dc:	4705                	li	a4,1
200018de:	ace7ae23          	sw	a4,-1316(a5) # 80000adc <metal_segment_heap_target_end+0xfffff368>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:25

    if (&metal_constructors_end <= &metal_constructors_start) {
200018e2:	200077b7          	lui	a5,0x20007
200018e6:	d4878713          	addi	a4,a5,-696 # 20006d48 <__fini_array_end>
200018ea:	200077b7          	lui	a5,0x20007
200018ee:	d3c78793          	addi	a5,a5,-708 # 20006d3c <_metal_tty_init_ptr>
200018f2:	04e7f163          	bgeu	a5,a4,20001934 <metal_init+0x6e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:29
        return;
    }

    metal_constructor_t *funcptr = &metal_constructors_start;
200018f6:	200077b7          	lui	a5,0x20007
200018fa:	d3c78793          	addi	a5,a5,-708 # 20006d3c <_metal_tty_init_ptr>
200018fe:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
20001902:	a831                	j	2000191e <metal_init+0x58>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:31
        metal_constructor_t func = *funcptr;
20001904:	fec42783          	lw	a5,-20(s0)
20001908:	439c                	lw	a5,0(a5)
2000190a:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:33

        func();
2000190e:	fe842783          	lw	a5,-24(s0)
20001912:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:35

        funcptr += 1;
20001914:	fec42783          	lw	a5,-20(s0)
20001918:	0791                	addi	a5,a5,4
2000191a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
2000191e:	fec42703          	lw	a4,-20(s0)
20001922:	200077b7          	lui	a5,0x20007
20001926:	d4878793          	addi	a5,a5,-696 # 20006d48 <__fini_array_end>
2000192a:	fcf71de3          	bne	a4,a5,20001904 <metal_init+0x3e>
2000192e:	a021                	j	20001936 <metal_init+0x70>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:21
        return;
20001930:	0001                	nop
20001932:	a011                	j	20001936 <metal_init+0x70>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:26
        return;
20001934:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:37
    }
}
20001936:	40f2                	lw	ra,28(sp)
20001938:	4462                	lw	s0,24(sp)
2000193a:	6105                	addi	sp,sp,32
2000193c:	8082                	ret

2000193e <metal_fini>:
metal_fini():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:39

void metal_fini(void) {
2000193e:	1101                	addi	sp,sp,-32
20001940:	ce06                	sw	ra,28(sp)
20001942:	cc22                	sw	s0,24(sp)
20001944:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:42
    /* Make sure the destructors only run once */
    static int fini_done = 0;
    if (fini_done) {
20001946:	800017b7          	lui	a5,0x80001
2000194a:	ae07a783          	lw	a5,-1312(a5) # 80000ae0 <metal_segment_heap_target_end+0xfffff36c>
2000194e:	efa9                	bnez	a5,200019a8 <metal_fini+0x6a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:45
        return;
    }
    fini_done = 1;
20001950:	800017b7          	lui	a5,0x80001
20001954:	4705                	li	a4,1
20001956:	aee7a023          	sw	a4,-1312(a5) # 80000ae0 <metal_segment_heap_target_end+0xfffff36c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:47

    if (&metal_destructors_end <= &metal_destructors_start) {
2000195a:	200077b7          	lui	a5,0x20007
2000195e:	d4878713          	addi	a4,a5,-696 # 20006d48 <__fini_array_end>
20001962:	200077b7          	lui	a5,0x20007
20001966:	d4878793          	addi	a5,a5,-696 # 20006d48 <__fini_array_end>
2000196a:	04e7f163          	bgeu	a5,a4,200019ac <metal_fini+0x6e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:51
        return;
    }

    metal_destructor_t *funcptr = &metal_destructors_start;
2000196e:	200077b7          	lui	a5,0x20007
20001972:	d4878793          	addi	a5,a5,-696 # 20006d48 <__fini_array_end>
20001976:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
2000197a:	a831                	j	20001996 <metal_fini+0x58>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:53
        metal_destructor_t func = *funcptr;
2000197c:	fec42783          	lw	a5,-20(s0)
20001980:	439c                	lw	a5,0(a5)
20001982:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:55

        func();
20001986:	fe842783          	lw	a5,-24(s0)
2000198a:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:57

        funcptr += 1;
2000198c:	fec42783          	lw	a5,-20(s0)
20001990:	0791                	addi	a5,a5,4
20001992:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
20001996:	fec42703          	lw	a4,-20(s0)
2000199a:	200077b7          	lui	a5,0x20007
2000199e:	d4878793          	addi	a5,a5,-696 # 20006d48 <__fini_array_end>
200019a2:	fcf71de3          	bne	a4,a5,2000197c <metal_fini+0x3e>
200019a6:	a021                	j	200019ae <metal_fini+0x70>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:43
        return;
200019a8:	0001                	nop
200019aa:	a011                	j	200019ae <metal_fini+0x70>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:48
        return;
200019ac:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:59
    }
}
200019ae:	40f2                	lw	ra,28(sp)
200019b0:	4462                	lw	s0,24(sp)
200019b2:	6105                	addi	sp,sp,32
200019b4:	8082                	ret

200019b6 <metal_init_run>:
metal_init_run():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:69
 * in the case that users don't want the metal constructors or
 * destructors to run.
 */

void metal_init_run(void) __attribute__((weak));
void metal_init_run(void) { metal_init(); }
200019b6:	1141                	addi	sp,sp,-16
200019b8:	c606                	sw	ra,12(sp)
200019ba:	c422                	sw	s0,8(sp)
200019bc:	0800                	addi	s0,sp,16
200019be:	3721                	jal	200018c6 <metal_init>
200019c0:	0001                	nop
200019c2:	40b2                	lw	ra,12(sp)
200019c4:	4422                	lw	s0,8(sp)
200019c6:	0141                	addi	sp,sp,16
200019c8:	8082                	ret

200019ca <metal_fini_run>:
metal_fini_run():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/init.c:72

void metal_fini_run(void) __attribute__((weak));
void metal_fini_run(void) { metal_fini(); }
200019ca:	1141                	addi	sp,sp,-16
200019cc:	c606                	sw	ra,12(sp)
200019ce:	c422                	sw	s0,8(sp)
200019d0:	0800                	addi	s0,sp,16
200019d2:	37b5                	jal	2000193e <metal_fini>
200019d4:	0001                	nop
200019d6:	40b2                	lw	ra,12(sp)
200019d8:	4422                	lw	s0,8(sp)
200019da:	0141                	addi	sp,sp,16
200019dc:	8082                	ret

200019de <metal_tty_putc>:
metal_tty_putc():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:12
#include <metal/uart.h>

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c) {
200019de:	1101                	addi	sp,sp,-32
200019e0:	ce06                	sw	ra,28(sp)
200019e2:	cc22                	sw	s0,24(sp)
200019e4:	1000                	addi	s0,sp,32
200019e6:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
200019ea:	fec42703          	lw	a4,-20(s0)
200019ee:	47a9                	li	a5,10
200019f0:	00f71463          	bne	a4,a5,200019f8 <metal_tty_putc+0x1a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw('\r');
200019f4:	4535                	li	a0,13
200019f6:	2811                	jal	20001a0a <metal_tty_putc_raw>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw(c);
200019f8:	fec42503          	lw	a0,-20(s0)
200019fc:	2039                	jal	20001a0a <metal_tty_putc_raw>
200019fe:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20001a00:	853e                	mv	a0,a5
20001a02:	40f2                	lw	ra,28(sp)
20001a04:	4462                	lw	s0,24(sp)
20001a06:	6105                	addi	sp,sp,32
20001a08:	8082                	ret

20001a0a <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:19

int metal_tty_putc_raw(int c) {
20001a0a:	1101                	addi	sp,sp,-32
20001a0c:	ce06                	sw	ra,28(sp)
20001a0e:	cc22                	sw	s0,24(sp)
20001a10:	1000                	addi	s0,sp,32
20001a12:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:20
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20001a16:	fec42583          	lw	a1,-20(s0)
20001a1a:	800017b7          	lui	a5,0x80001
20001a1e:	a2078513          	addi	a0,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
20001a22:	282d                	jal	20001a5c <metal_uart_putc>
20001a24:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:21
}
20001a26:	853e                	mv	a0,a5
20001a28:	40f2                	lw	ra,28(sp)
20001a2a:	4462                	lw	s0,24(sp)
20001a2c:	6105                	addi	sp,sp,32
20001a2e:	8082                	ret

20001a30 <metal_uart_init>:
metal_uart_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:59
 more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) {
20001a30:	1101                	addi	sp,sp,-32
20001a32:	ce06                	sw	ra,28(sp)
20001a34:	cc22                	sw	s0,24(sp)
20001a36:	1000                	addi	s0,sp,32
20001a38:	fea42623          	sw	a0,-20(s0)
20001a3c:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:60
    uart->vtable->init(uart, baud_rate);
20001a40:	fec42783          	lw	a5,-20(s0)
20001a44:	439c                	lw	a5,0(a5)
20001a46:	439c                	lw	a5,0(a5)
20001a48:	fe842583          	lw	a1,-24(s0)
20001a4c:	fec42503          	lw	a0,-20(s0)
20001a50:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:61
}
20001a52:	0001                	nop
20001a54:	40f2                	lw	ra,28(sp)
20001a56:	4462                	lw	s0,24(sp)
20001a58:	6105                	addi	sp,sp,32
20001a5a:	8082                	ret

20001a5c <metal_uart_putc>:
metal_uart_putc():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:69
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) {
20001a5c:	1101                	addi	sp,sp,-32
20001a5e:	ce06                	sw	ra,28(sp)
20001a60:	cc22                	sw	s0,24(sp)
20001a62:	1000                	addi	s0,sp,32
20001a64:	fea42623          	sw	a0,-20(s0)
20001a68:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:70
    return uart->vtable->putc(uart, c);
20001a6c:	fec42783          	lw	a5,-20(s0)
20001a70:	439c                	lw	a5,0(a5)
20001a72:	43dc                	lw	a5,4(a5)
20001a74:	fe842583          	lw	a1,-24(s0)
20001a78:	fec42503          	lw	a0,-20(s0)
20001a7c:	9782                	jalr	a5
20001a7e:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:71
}
20001a80:	853e                	mv	a0,a5
20001a82:	40f2                	lw	ra,28(sp)
20001a84:	4462                	lw	s0,24(sp)
20001a86:	6105                	addi	sp,sp,32
20001a88:	8082                	ret

20001a8a <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:111
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart,
                                        int baud_rate) {
20001a8a:	1101                	addi	sp,sp,-32
20001a8c:	ce06                	sw	ra,28(sp)
20001a8e:	cc22                	sw	s0,24(sp)
20001a90:	1000                	addi	s0,sp,32
20001a92:	fea42623          	sw	a0,-20(s0)
20001a96:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:112
    return uart->vtable->set_baud_rate(uart, baud_rate);
20001a9a:	fec42783          	lw	a5,-20(s0)
20001a9e:	439c                	lw	a5,0(a5)
20001aa0:	4bdc                	lw	a5,20(a5)
20001aa2:	fe842583          	lw	a1,-24(s0)
20001aa6:	fec42503          	lw	a0,-20(s0)
20001aaa:	9782                	jalr	a5
20001aac:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/uart.h:113
}
20001aae:	853e                	mv	a0,a5
20001ab0:	40f2                	lw	ra,28(sp)
20001ab2:	4462                	lw	s0,24(sp)
20001ab4:	6105                	addi	sp,sp,32
20001ab6:	8082                	ret

20001ab8 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:203
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20001ab8:	1101                	addi	sp,sp,-32
20001aba:	ce22                	sw	s0,28(sp)
20001abc:	1000                	addi	s0,sp,32
20001abe:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:204
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20001ac2:	fec42703          	lw	a4,-20(s0)
20001ac6:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
20001aca:	00f71563          	bne	a4,a5,20001ad4 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:205
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20001ace:	020007b7          	lui	a5,0x2000
20001ad2:	a011                	j	20001ad6 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:208
	}
	else {
		return 0;
20001ad4:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:210
	}
}
20001ad6:	853e                	mv	a0,a5
20001ad8:	4472                	lw	s0,28(sp)
20001ada:	6105                	addi	sp,sp,32
20001adc:	8082                	ret

20001ade <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:223
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20001ade:	1101                	addi	sp,sp,-32
20001ae0:	ce22                	sw	s0,28(sp)
20001ae2:	1000                	addi	s0,sp,32
20001ae4:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:224
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20001ae8:	fec42703          	lw	a4,-20(s0)
20001aec:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
20001af0:	00f71463          	bne	a4,a5,20001af8 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:225
		return METAL_MAX_CLINT_INTERRUPTS;
20001af4:	4789                	li	a5,2
20001af6:	a011                	j	20001afa <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:228
	}
	else {
		return 0;
20001af8:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:230
	}
}
20001afa:	853e                	mv	a0,a5
20001afc:	4472                	lw	s0,28(sp)
20001afe:	6105                	addi	sp,sp,32
20001b00:	8082                	ret

20001b02 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:233

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20001b02:	1101                	addi	sp,sp,-32
20001b04:	ce22                	sw	s0,28(sp)
20001b06:	1000                	addi	s0,sp,32
20001b08:	fea42623          	sw	a0,-20(s0)
20001b0c:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:234
	if (idx == 0) {
20001b10:	fe842783          	lw	a5,-24(s0)
20001b14:	e791                	bnez	a5,20001b20 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:235
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20001b16:	800007b7          	lui	a5,0x80000
20001b1a:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe91c>
20001b1e:	a821                	j	20001b36 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:237
	}
	else if (idx == 1) {
20001b20:	fe842703          	lw	a4,-24(s0)
20001b24:	4785                	li	a5,1
20001b26:	00f71763          	bne	a4,a5,20001b34 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:238
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20001b2a:	800007b7          	lui	a5,0x80000
20001b2e:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe91c>
20001b32:	a011                	j	20001b36 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:241
	}
	else {
		return NULL;
20001b34:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:243
	}
}
20001b36:	853e                	mv	a0,a5
20001b38:	4472                	lw	s0,28(sp)
20001b3a:	6105                	addi	sp,sp,32
20001b3c:	8082                	ret

20001b3e <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:246

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20001b3e:	1101                	addi	sp,sp,-32
20001b40:	ce22                	sw	s0,28(sp)
20001b42:	1000                	addi	s0,sp,32
20001b44:	fea42623          	sw	a0,-20(s0)
20001b48:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:247
	if (idx == 0) {
20001b4c:	fe842783          	lw	a5,-24(s0)
20001b50:	e399                	bnez	a5,20001b56 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:248
		return 3;
20001b52:	478d                	li	a5,3
20001b54:	a809                	j	20001b66 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:250
	}
	else if (idx == 1) {
20001b56:	fe842703          	lw	a4,-24(s0)
20001b5a:	4785                	li	a5,1
20001b5c:	00f71463          	bne	a4,a5,20001b64 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:251
		return 7;
20001b60:	479d                	li	a5,7
20001b62:	a011                	j	20001b66 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:254
	}
	else {
		return 0;
20001b64:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:256
	}
}
20001b66:	853e                	mv	a0,a5
20001b68:	4472                	lw	s0,28(sp)
20001b6a:	6105                	addi	sp,sp,32
20001b6c:	8082                	ret

20001b6e <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/drivers/riscv_clint0.h>
#include <metal/io.h>
#include <metal/machine.h>

unsigned long long
__metal_clint0_mtime_get(struct __metal_driver_riscv_clint0 *clint) {
20001b6e:	715d                	addi	sp,sp,-80
20001b70:	c686                	sw	ra,76(sp)
20001b72:	c4a2                	sw	s0,72(sp)
20001b74:	c2ca                	sw	s2,68(sp)
20001b76:	c0ce                	sw	s3,64(sp)
20001b78:	de52                	sw	s4,60(sp)
20001b7a:	dc56                	sw	s5,56(sp)
20001b7c:	da5a                	sw	s6,52(sp)
20001b7e:	d85e                	sw	s7,48(sp)
20001b80:	d662                	sw	s8,44(sp)
20001b82:	d466                	sw	s9,40(sp)
20001b84:	0880                	addi	s0,sp,80
20001b86:	faa42e23          	sw	a0,-68(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:17
    __metal_io_u32 lo, hi;
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
20001b8a:	fbc42783          	lw	a5,-68(s0)
20001b8e:	853e                	mv	a0,a5
20001b90:	3725                	jal	20001ab8 <__metal_driver_sifive_clint0_control_base>
20001b92:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)

    /* Guard against rollover when reading */
    do {
        hi = __METAL_ACCESS_ONCE(
20001b96:	fcc42703          	lw	a4,-52(s0)
20001b9a:	67b1                	lui	a5,0xc
20001b9c:	17f1                	addi	a5,a5,-4
20001b9e:	97ba                	add	a5,a5,a4
20001ba0:	439c                	lw	a5,0(a5)
20001ba2:	fcf42423          	sw	a5,-56(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:23 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
        lo = __METAL_ACCESS_ONCE(
20001ba6:	fcc42703          	lw	a4,-52(s0)
20001baa:	67b1                	lui	a5,0xc
20001bac:	17e1                	addi	a5,a5,-8
20001bae:	97ba                	add	a5,a5,a4
20001bb0:	439c                	lw	a5,0(a5)
20001bb2:	fcf42223          	sw	a5,-60(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20001bb6:	fcc42703          	lw	a4,-52(s0)
20001bba:	67b1                	lui	a5,0xc
20001bbc:	17f1                	addi	a5,a5,-4
20001bbe:	97ba                	add	a5,a5,a4
20001bc0:	439c                	lw	a5,0(a5)
20001bc2:	fc842703          	lw	a4,-56(s0)
20001bc6:	fcf718e3          	bne	a4,a5,20001b96 <__metal_clint0_mtime_get+0x28>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:29
                                                    METAL_RISCV_CLINT0_MTIME +
                                                    4)) != hi);

    return (((unsigned long long)hi) << 32) | lo;
20001bca:	fc842783          	lw	a5,-56(s0)
20001bce:	8c3e                	mv	s8,a5
20001bd0:	4c81                	li	s9,0
20001bd2:	000c1993          	slli	s3,s8,0x0
20001bd6:	4901                	li	s2,0
20001bd8:	fc442783          	lw	a5,-60(s0)
20001bdc:	8a3e                	mv	s4,a5
20001bde:	4a81                	li	s5,0
20001be0:	01496b33          	or	s6,s2,s4
20001be4:	0159ebb3          	or	s7,s3,s5
20001be8:	87da                	mv	a5,s6
20001bea:	885e                	mv	a6,s7
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30
}
20001bec:	853e                	mv	a0,a5
20001bee:	85c2                	mv	a1,a6
20001bf0:	40b6                	lw	ra,76(sp)
20001bf2:	4426                	lw	s0,72(sp)
20001bf4:	4916                	lw	s2,68(sp)
20001bf6:	4986                	lw	s3,64(sp)
20001bf8:	5a72                	lw	s4,60(sp)
20001bfa:	5ae2                	lw	s5,56(sp)
20001bfc:	5b52                	lw	s6,52(sp)
20001bfe:	5bc2                	lw	s7,48(sp)
20001c00:	5c32                	lw	s8,44(sp)
20001c02:	5ca2                	lw	s9,40(sp)
20001c04:	6161                	addi	sp,sp,80
20001c06:	8082                	ret

20001c08 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:34

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time) {
20001c08:	7179                	addi	sp,sp,-48
20001c0a:	d606                	sw	ra,44(sp)
20001c0c:	d422                	sw	s0,40(sp)
20001c0e:	d24a                	sw	s2,36(sp)
20001c10:	d04e                	sw	s3,32(sp)
20001c12:	1800                	addi	s0,sp,48
20001c14:	fca42e23          	sw	a0,-36(s0)
20001c18:	fcb42c23          	sw	a1,-40(s0)
20001c1c:	fcc42823          	sw	a2,-48(s0)
20001c20:	fcd42a23          	sw	a3,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:35
    struct __metal_driver_riscv_clint0 *clint =
20001c24:	fdc42783          	lw	a5,-36(s0)
20001c28:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:38
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
20001c2c:	fec42783          	lw	a5,-20(s0)
20001c30:	853e                	mv	a0,a5
20001c32:	3559                	jal	20001ab8 <__metal_driver_sifive_clint0_control_base>
20001c34:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:45
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20001c38:	fd842783          	lw	a5,-40(s0)
20001c3c:	078e                	slli	a5,a5,0x3
20001c3e:	873e                	mv	a4,a5
20001c40:	fe842783          	lw	a5,-24(s0)
20001c44:	973e                	add	a4,a4,a5
20001c46:	6791                	lui	a5,0x4
20001c48:	0791                	addi	a5,a5,4
20001c4a:	97ba                	add	a5,a5,a4
20001c4c:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = 0xFFFFFFFF;
20001c4e:	57fd                	li	a5,-1
20001c50:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20001c52:	fd842783          	lw	a5,-40(s0)
20001c56:	078e                	slli	a5,a5,0x3
20001c58:	873e                	mv	a4,a5
20001c5a:	fe842783          	lw	a5,-24(s0)
20001c5e:	973e                	add	a4,a4,a5
20001c60:	6791                	lui	a5,0x4
20001c62:	97ba                	add	a5,a5,a4
20001c64:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:50
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
        (__metal_io_u32)time;
20001c66:	fd042783          	lw	a5,-48(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
20001c6a:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:53
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = (__metal_io_u32)(time >> 32);
20001c6c:	fd442783          	lw	a5,-44(s0)
20001c70:	0007d913          	srli	s2,a5,0x0
20001c74:	4981                	li	s3,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:51
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20001c76:	fd842783          	lw	a5,-40(s0)
20001c7a:	078e                	slli	a5,a5,0x3
20001c7c:	873e                	mv	a4,a5
20001c7e:	fe842783          	lw	a5,-24(s0)
20001c82:	973e                	add	a4,a4,a5
20001c84:	6791                	lui	a5,0x4
20001c86:	0791                	addi	a5,a5,4
20001c88:	97ba                	add	a5,a5,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:53
                                           4)) = (__metal_io_u32)(time >> 32);
20001c8a:	874a                	mv	a4,s2
20001c8c:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54
    return 0;
20001c8e:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20001c90:	853e                	mv	a0,a5
20001c92:	50b2                	lw	ra,44(sp)
20001c94:	5422                	lw	s0,40(sp)
20001c96:	5912                	lw	s2,36(sp)
20001c98:	5982                	lw	s3,32(sp)
20001c9a:	6145                	addi	sp,sp,48
20001c9c:	8082                	ret

20001c9e <_get_cpu_intc>:
_get_cpu_intc():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:57

static struct metal_interrupt *_get_cpu_intc() {
20001c9e:	1101                	addi	sp,sp,-32
20001ca0:	ce06                	sw	ra,28(sp)
20001ca2:	cc22                	sw	s0,24(sp)
20001ca4:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58
    int hartid = 0;
20001ca6:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    __asm__ volatile("csrr %[hartid], mhartid"
20001caa:	f14027f3          	csrr	a5,mhartid
20001cae:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:62
                     : [hartid] "=r"(hartid)::"memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20001cb2:	fec42783          	lw	a5,-20(s0)
20001cb6:	853e                	mv	a0,a5
20001cb8:	18e040ef          	jal	ra,20005e46 <metal_cpu_get>
20001cbc:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:64

    return metal_cpu_interrupt_controller(cpu);
20001cc0:	fe842503          	lw	a0,-24(s0)
20001cc4:	15c040ef          	jal	ra,20005e20 <metal_cpu_interrupt_controller>
20001cc8:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
}
20001cca:	853e                	mv	a0,a5
20001ccc:	40f2                	lw	ra,28(sp)
20001cce:	4462                	lw	s0,24(sp)
20001cd0:	6105                	addi	sp,sp,32
20001cd2:	8082                	ret

20001cd4 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67

void __metal_driver_riscv_clint0_init(struct metal_interrupt *controller) {
20001cd4:	7139                	addi	sp,sp,-64
20001cd6:	de06                	sw	ra,60(sp)
20001cd8:	dc22                	sw	s0,56(sp)
20001cda:	0080                	addi	s0,sp,64
20001cdc:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:69
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
20001ce0:	fcc42503          	lw	a0,-52(s0)
20001ce4:	3bed                	jal	20001ade <__metal_driver_sifive_clint0_num_interrupts>
20001ce6:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
    struct __metal_driver_riscv_clint0 *clint =
20001cea:	fcc42783          	lw	a5,-52(s0)
20001cee:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:73
        (struct __metal_driver_riscv_clint0 *)(controller);

    if (!clint->init_done) {
20001cf2:	fe442783          	lw	a5,-28(s0)
20001cf6:	43dc                	lw	a5,4(a5)
20001cf8:	efa9                	bnez	a5,20001d52 <__metal_driver_riscv_clint0_init+0x7e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76
        /* Register its interrupts with with parent controller, aka sw and
         * timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20001cfa:	fe042623          	sw	zero,-20(s0)
20001cfe:	a081                	j	20001d3e <__metal_driver_riscv_clint0_init+0x6a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78 (discriminator 3)
            struct metal_interrupt *intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20001d00:	fec42583          	lw	a1,-20(s0)
20001d04:	fcc42503          	lw	a0,-52(s0)
20001d08:	3bed                	jal	20001b02 <__metal_driver_sifive_clint0_interrupt_parents>
20001d0a:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80 (discriminator 3)
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20001d0e:	fec42583          	lw	a1,-20(s0)
20001d12:	fcc42503          	lw	a0,-52(s0)
20001d16:	3525                	jal	20001b3e <__metal_driver_sifive_clint0_interrupt_lines>
20001d18:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20001d1c:	fe042783          	lw	a5,-32(s0)
20001d20:	439c                	lw	a5,0(a5)
20001d22:	4fdc                	lw	a5,28(a5)
20001d24:	fcc42683          	lw	a3,-52(s0)
20001d28:	4601                	li	a2,0
20001d2a:	fdc42583          	lw	a1,-36(s0)
20001d2e:	fe042503          	lw	a0,-32(s0)
20001d32:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20001d34:	fec42783          	lw	a5,-20(s0)
20001d38:	0785                	addi	a5,a5,1
20001d3a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 1)
20001d3e:	fec42703          	lw	a4,-20(s0)
20001d42:	fe842783          	lw	a5,-24(s0)
20001d46:	faf74de3          	blt	a4,a5,20001d00 <__metal_driver_riscv_clint0_init+0x2c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:83
        }
        clint->init_done = 1;
20001d4a:	fe442783          	lw	a5,-28(s0)
20001d4e:	4705                	li	a4,1
20001d50:	c3d8                	sw	a4,4(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
    }
}
20001d52:	0001                	nop
20001d54:	50f2                	lw	ra,60(sp)
20001d56:	5462                	lw	s0,56(sp)
20001d58:	6121                	addi	sp,sp,64
20001d5a:	8082                	ret

20001d5c <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89

int __metal_driver_riscv_clint0_register(struct metal_interrupt *controller,
                                         int id, metal_interrupt_handler_t isr,
                                         void *priv) {
20001d5c:	7139                	addi	sp,sp,-64
20001d5e:	de06                	sw	ra,60(sp)
20001d60:	dc22                	sw	s0,56(sp)
20001d62:	0080                	addi	s0,sp,64
20001d64:	fca42623          	sw	a0,-52(s0)
20001d68:	fcb42423          	sw	a1,-56(s0)
20001d6c:	fcc42223          	sw	a2,-60(s0)
20001d70:	fcd42023          	sw	a3,-64(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
    int rc = -1;
20001d74:	57fd                	li	a5,-1
20001d76:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20001d7a:	318010ef          	jal	ra,20003092 <__metal_controller_interrupt_vector_mode>
20001d7e:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
    struct metal_interrupt *intc = NULL;
20001d82:	fe042423          	sw	zero,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:93
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20001d86:	3f21                	jal	20001c9e <_get_cpu_intc>
20001d88:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:95
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
20001d8c:	fcc42503          	lw	a0,-52(s0)
20001d90:	33b9                	jal	20001ade <__metal_driver_sifive_clint0_num_interrupts>
20001d92:	fca42c23          	sw	a0,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:97

    if ((mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE)) {
20001d96:	fe042703          	lw	a4,-32(s0)
20001d9a:	4785                	li	a5,1
20001d9c:	00f70863          	beq	a4,a5,20001dac <__metal_driver_riscv_clint0_register+0x50>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:97 (discriminator 1)
20001da0:	fe042783          	lw	a5,-32(s0)
20001da4:	c781                	beqz	a5,20001dac <__metal_driver_riscv_clint0_register+0x50>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
        return rc;
20001da6:	fec42783          	lw	a5,-20(s0)
20001daa:	a049                	j	20001e2c <__metal_driver_riscv_clint0_register+0xd0>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }

    for (int i = 0; i < num_interrupts; i++) {
20001dac:	fe042223          	sw	zero,-28(s0)
20001db0:	a091                	j	20001df4 <__metal_driver_riscv_clint0_register+0x98>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
        int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20001db2:	fe442583          	lw	a1,-28(s0)
20001db6:	fcc42503          	lw	a0,-52(s0)
20001dba:	3351                	jal	20001b3e <__metal_driver_sifive_clint0_interrupt_lines>
20001dbc:	fca42a23          	sw	a0,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:103
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20001dc0:	fe442583          	lw	a1,-28(s0)
20001dc4:	fcc42503          	lw	a0,-52(s0)
20001dc8:	3b2d                	jal	20001b02 <__metal_driver_sifive_clint0_interrupt_parents>
20001dca:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
20001dce:	fdc42703          	lw	a4,-36(s0)
20001dd2:	fe842783          	lw	a5,-24(s0)
20001dd6:	00f71863          	bne	a4,a5,20001de6 <__metal_driver_riscv_clint0_register+0x8a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:104 (discriminator 1)
20001dda:	fc842703          	lw	a4,-56(s0)
20001dde:	fd442783          	lw	a5,-44(s0)
20001de2:	02f70063          	beq	a4,a5,20001e02 <__metal_driver_riscv_clint0_register+0xa6>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107 (discriminator 2)
            break;
        }
        intc = NULL;
20001de6:	fe042423          	sw	zero,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 2)
    for (int i = 0; i < num_interrupts; i++) {
20001dea:	fe442783          	lw	a5,-28(s0)
20001dee:	0785                	addi	a5,a5,1
20001df0:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 1)
20001df4:	fe442703          	lw	a4,-28(s0)
20001df8:	fd842783          	lw	a5,-40(s0)
20001dfc:	faf74be3          	blt	a4,a5,20001db2 <__metal_driver_riscv_clint0_register+0x56>
20001e00:	a011                	j	20001e04 <__metal_driver_riscv_clint0_register+0xa8>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:105
            break;
20001e02:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20001e04:	fe842783          	lw	a5,-24(s0)
20001e08:	c385                	beqz	a5,20001e28 <__metal_driver_riscv_clint0_register+0xcc>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20001e0a:	fe842783          	lw	a5,-24(s0)
20001e0e:	439c                	lw	a5,0(a5)
20001e10:	4fdc                	lw	a5,28(a5)
20001e12:	fc042683          	lw	a3,-64(s0)
20001e16:	fc442603          	lw	a2,-60(s0)
20001e1a:	fc842583          	lw	a1,-56(s0)
20001e1e:	fe842503          	lw	a0,-24(s0)
20001e22:	9782                	jalr	a5
20001e24:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114
    }
    return rc;
20001e28:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
}
20001e2c:	853e                	mv	a0,a5
20001e2e:	50f2                	lw	ra,60(sp)
20001e30:	5462                	lw	s0,56(sp)
20001e32:	6121                	addi	sp,sp,64
20001e34:	8082                	ret

20001e36 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_vector_register(
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t isr, void *priv) {
20001e36:	7179                	addi	sp,sp,-48
20001e38:	d622                	sw	s0,44(sp)
20001e3a:	1800                	addi	s0,sp,48
20001e3c:	fca42e23          	sw	a0,-36(s0)
20001e40:	fcb42c23          	sw	a1,-40(s0)
20001e44:	fcc42a23          	sw	a2,-44(s0)
20001e48:	fcd42823          	sw	a3,-48(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20001e4c:	57fd                	li	a5,-1
20001e4e:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:122
    return rc;
20001e52:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123
}
20001e56:	853e                	mv	a0,a5
20001e58:	5432                	lw	s0,44(sp)
20001e5a:	6145                	addi	sp,sp,48
20001e5c:	8082                	ret

20001e5e <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:126

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode(
    struct metal_interrupt *controller) {
20001e5e:	1101                	addi	sp,sp,-32
20001e60:	ce06                	sw	ra,28(sp)
20001e62:	cc22                	sw	s0,24(sp)
20001e64:	1000                	addi	s0,sp,32
20001e66:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:127
    return __metal_controller_interrupt_vector_mode();
20001e6a:	228010ef          	jal	ra,20003092 <__metal_controller_interrupt_vector_mode>
20001e6e:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
}
20001e70:	853e                	mv	a0,a5
20001e72:	40f2                	lw	ra,28(sp)
20001e74:	4462                	lw	s0,24(sp)
20001e76:	6105                	addi	sp,sp,32
20001e78:	8082                	ret

20001e7a <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131

int __metal_driver_riscv_clint0_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
20001e7a:	7179                	addi	sp,sp,-48
20001e7c:	d606                	sw	ra,44(sp)
20001e7e:	d422                	sw	s0,40(sp)
20001e80:	1800                	addi	s0,sp,48
20001e82:	fca42e23          	sw	a0,-36(s0)
20001e86:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    int rc = -1;
20001e8a:	57fd                	li	a5,-1
20001e8c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
    struct metal_interrupt *intc = _get_cpu_intc();
20001e90:	3539                	jal	20001c9e <_get_cpu_intc>
20001e92:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:135

    if (intc) {
20001e96:	fe842783          	lw	a5,-24(s0)
20001e9a:	c78d                	beqz	a5,20001ec4 <__metal_driver_riscv_clint0_set_vector_mode+0x4a>
20001e9c:	fd842783          	lw	a5,-40(s0)
20001ea0:	00078793          	mv	a5,a5
20001ea4:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:138
        /* Valid vector modes are VECTOR and DIRECT, anything else is invalid
         * (-1) */
        switch (mode) {
20001ea6:	4785                	li	a5,1
20001ea8:	02e7e063          	bltu	a5,a4,20001ec8 <__metal_driver_riscv_clint0_set_vector_mode+0x4e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20001eac:	fe842783          	lw	a5,-24(s0)
20001eb0:	439c                	lw	a5,0(a5)
20001eb2:	43dc                	lw	a5,4(a5)
20001eb4:	fd842583          	lw	a1,-40(s0)
20001eb8:	fe842503          	lw	a0,-24(s0)
20001ebc:	9782                	jalr	a5
20001ebe:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
            break;
20001ec2:	a021                	j	20001eca <__metal_driver_riscv_clint0_set_vector_mode+0x50>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
        default:
            break;
        }
    }
20001ec4:	0001                	nop
20001ec6:	a011                	j	20001eca <__metal_driver_riscv_clint0_set_vector_mode+0x50>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144
            break;
20001ec8:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
    return rc;
20001eca:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
}
20001ece:	853e                	mv	a0,a5
20001ed0:	50b2                	lw	ra,44(sp)
20001ed2:	5422                	lw	s0,40(sp)
20001ed4:	6145                	addi	sp,sp,48
20001ed6:	8082                	ret

20001ed8 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:151

int __metal_driver_riscv_clint0_enable(struct metal_interrupt *controller,
                                       int id) {
20001ed8:	7139                	addi	sp,sp,-64
20001eda:	de06                	sw	ra,60(sp)
20001edc:	dc22                	sw	s0,56(sp)
20001ede:	0080                	addi	s0,sp,64
20001ee0:	fca42623          	sw	a0,-52(s0)
20001ee4:	fcb42423          	sw	a1,-56(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:152
    int rc = -1;
20001ee8:	57fd                	li	a5,-1
20001eea:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154

    if (id) {
20001eee:	fc842783          	lw	a5,-56(s0)
20001ef2:	c7c9                	beqz	a5,20001f7c <__metal_driver_riscv_clint0_enable+0xa4>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
        struct metal_interrupt *intc = NULL;
20001ef4:	fe042423          	sw	zero,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:156
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20001ef8:	335d                	jal	20001c9e <_get_cpu_intc>
20001efa:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:158
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
20001efe:	fcc42503          	lw	a0,-52(s0)
20001f02:	3ef1                	jal	20001ade <__metal_driver_sifive_clint0_num_interrupts>
20001f04:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160

        for (int i = 0; i < num_interrupts; i++) {
20001f08:	fe042223          	sw	zero,-28(s0)
20001f0c:	a091                	j	20001f50 <__metal_driver_riscv_clint0_enable+0x78>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:162
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20001f0e:	fe442583          	lw	a1,-28(s0)
20001f12:	fcc42503          	lw	a0,-52(s0)
20001f16:	3125                	jal	20001b3e <__metal_driver_sifive_clint0_interrupt_lines>
20001f18:	fca42c23          	sw	a0,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20001f1c:	fe442583          	lw	a1,-28(s0)
20001f20:	fcc42503          	lw	a0,-52(s0)
20001f24:	3ef9                	jal	20001b02 <__metal_driver_sifive_clint0_interrupt_parents>
20001f26:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:165
            if (cpu_intc == intc && id == line) {
20001f2a:	fe042703          	lw	a4,-32(s0)
20001f2e:	fe842783          	lw	a5,-24(s0)
20001f32:	00f71863          	bne	a4,a5,20001f42 <__metal_driver_riscv_clint0_enable+0x6a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:165 (discriminator 1)
20001f36:	fc842703          	lw	a4,-56(s0)
20001f3a:	fd842783          	lw	a5,-40(s0)
20001f3e:	02f70063          	beq	a4,a5,20001f5e <__metal_driver_riscv_clint0_enable+0x86>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168 (discriminator 2)
                break;
            }
            intc = NULL;
20001f42:	fe042423          	sw	zero,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
20001f46:	fe442783          	lw	a5,-28(s0)
20001f4a:	0785                	addi	a5,a5,1
20001f4c:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 1)
20001f50:	fe442703          	lw	a4,-28(s0)
20001f54:	fdc42783          	lw	a5,-36(s0)
20001f58:	faf74be3          	blt	a4,a5,20001f0e <__metal_driver_riscv_clint0_enable+0x36>
20001f5c:	a011                	j	20001f60 <__metal_driver_riscv_clint0_enable+0x88>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166
                break;
20001f5e:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
        }

        /* Enable its interrupts with parent controller */
        if (intc) {
20001f60:	fe842783          	lw	a5,-24(s0)
20001f64:	cf81                	beqz	a5,20001f7c <__metal_driver_riscv_clint0_enable+0xa4>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
20001f66:	fe842783          	lw	a5,-24(s0)
20001f6a:	439c                	lw	a5,0(a5)
20001f6c:	53dc                	lw	a5,36(a5)
20001f6e:	fc842583          	lw	a1,-56(s0)
20001f72:	fe842503          	lw	a0,-24(s0)
20001f76:	9782                	jalr	a5
20001f78:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177
        }
    }

    return rc;
20001f7c:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:178
}
20001f80:	853e                	mv	a0,a5
20001f82:	50f2                	lw	ra,60(sp)
20001f84:	5462                	lw	s0,56(sp)
20001f86:	6121                	addi	sp,sp,64
20001f88:	8082                	ret

20001f8a <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181

int __metal_driver_riscv_clint0_disable(struct metal_interrupt *controller,
                                        int id) {
20001f8a:	7139                	addi	sp,sp,-64
20001f8c:	de06                	sw	ra,60(sp)
20001f8e:	dc22                	sw	s0,56(sp)
20001f90:	0080                	addi	s0,sp,64
20001f92:	fca42623          	sw	a0,-52(s0)
20001f96:	fcb42423          	sw	a1,-56(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
    int rc = -1;
20001f9a:	57fd                	li	a5,-1
20001f9c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:184

    if (id) {
20001fa0:	fc842783          	lw	a5,-56(s0)
20001fa4:	c7c9                	beqz	a5,2000202e <__metal_driver_riscv_clint0_disable+0xa4>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:185
        struct metal_interrupt *intc = NULL;
20001fa6:	fe042423          	sw	zero,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20001faa:	39d5                	jal	20001c9e <_get_cpu_intc>
20001fac:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:188
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
20001fb0:	fcc42503          	lw	a0,-52(s0)
20001fb4:	362d                	jal	20001ade <__metal_driver_sifive_clint0_num_interrupts>
20001fb6:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190

        for (int i = 0; i < num_interrupts; i++) {
20001fba:	fe042223          	sw	zero,-28(s0)
20001fbe:	a091                	j	20002002 <__metal_driver_riscv_clint0_disable+0x78>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:192
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20001fc0:	fe442583          	lw	a1,-28(s0)
20001fc4:	fcc42503          	lw	a0,-52(s0)
20001fc8:	3e9d                	jal	20001b3e <__metal_driver_sifive_clint0_interrupt_lines>
20001fca:	fca42c23          	sw	a0,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20001fce:	fe442583          	lw	a1,-28(s0)
20001fd2:	fcc42503          	lw	a0,-52(s0)
20001fd6:	3635                	jal	20001b02 <__metal_driver_sifive_clint0_interrupt_parents>
20001fd8:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:195
            if (cpu_intc == intc && id == line) {
20001fdc:	fe042703          	lw	a4,-32(s0)
20001fe0:	fe842783          	lw	a5,-24(s0)
20001fe4:	00f71863          	bne	a4,a5,20001ff4 <__metal_driver_riscv_clint0_disable+0x6a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:195 (discriminator 1)
20001fe8:	fc842703          	lw	a4,-56(s0)
20001fec:	fd842783          	lw	a5,-40(s0)
20001ff0:	02f70063          	beq	a4,a5,20002010 <__metal_driver_riscv_clint0_disable+0x86>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198 (discriminator 2)
                break;
            }
            intc = NULL;
20001ff4:	fe042423          	sw	zero,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
20001ff8:	fe442783          	lw	a5,-28(s0)
20001ffc:	0785                	addi	a5,a5,1
20001ffe:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 1)
20002002:	fe442703          	lw	a4,-28(s0)
20002006:	fdc42783          	lw	a5,-36(s0)
2000200a:	faf74be3          	blt	a4,a5,20001fc0 <__metal_driver_riscv_clint0_disable+0x36>
2000200e:	a011                	j	20002012 <__metal_driver_riscv_clint0_disable+0x88>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                break;
20002010:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
        }

        /* Disable its interrupts with parent controller */
        if (intc) {
20002012:	fe842783          	lw	a5,-24(s0)
20002016:	cf81                	beqz	a5,2000202e <__metal_driver_riscv_clint0_disable+0xa4>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
20002018:	fe842783          	lw	a5,-24(s0)
2000201c:	439c                	lw	a5,0(a5)
2000201e:	579c                	lw	a5,40(a5)
20002020:	fc842583          	lw	a1,-56(s0)
20002024:	fe842503          	lw	a0,-24(s0)
20002028:	9782                	jalr	a5
2000202a:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
        }
    }

    return rc;
2000202e:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
}
20002032:	853e                	mv	a0,a5
20002034:	50f2                	lw	ra,60(sp)
20002036:	5462                	lw	s0,56(sp)
20002038:	6121                	addi	sp,sp,64
2000203a:	8082                	ret

2000203c <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:211

int __metal_driver_riscv_clint0_command_request(
    struct metal_interrupt *controller, int command, void *data) {
2000203c:	7179                	addi	sp,sp,-48
2000203e:	d606                	sw	ra,44(sp)
20002040:	d422                	sw	s0,40(sp)
20002042:	1800                	addi	s0,sp,48
20002044:	fca42e23          	sw	a0,-36(s0)
20002048:	fcb42c23          	sw	a1,-40(s0)
2000204c:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:213
    int hartid;
    int rc = -1;
20002050:	57fd                	li	a5,-1
20002052:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
    struct __metal_driver_riscv_clint0 *clint =
20002056:	fdc42783          	lw	a5,-36(s0)
2000205a:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(controller);
2000205e:	fdc42503          	lw	a0,-36(s0)
20002062:	a57ff0ef          	jal	ra,20001ab8 <__metal_driver_sifive_clint0_control_base>
20002066:	fea42223          	sw	a0,-28(s0)
2000206a:	fd842703          	lw	a4,-40(s0)
2000206e:	4789                	li	a5,2
20002070:	04f70863          	beq	a4,a5,200020c0 <__metal_driver_riscv_clint0_command_request+0x84>
20002074:	fd842703          	lw	a4,-40(s0)
20002078:	4789                	li	a5,2
2000207a:	00e7c863          	blt	a5,a4,2000208a <__metal_driver_riscv_clint0_command_request+0x4e>
2000207e:	fd842703          	lw	a4,-40(s0)
20002082:	4785                	li	a5,1
20002084:	00f70e63          	beq	a4,a5,200020a0 <__metal_driver_riscv_clint0_command_request+0x64>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:263
            rc = __METAL_ACCESS_ONCE(
                (__metal_io_u32 *)(control_base + (hartid * 4)));
        }
        break;
    default:
        break;
20002088:	a8e9                	j	20002162 <__metal_driver_riscv_clint0_command_request+0x126>
2000208a:	fd842703          	lw	a4,-40(s0)
2000208e:	478d                	li	a5,3
20002090:	04f70c63          	beq	a4,a5,200020e8 <__metal_driver_riscv_clint0_command_request+0xac>
20002094:	fd842703          	lw	a4,-40(s0)
20002098:	4791                	li	a5,4
2000209a:	08f70863          	beq	a4,a5,2000212a <__metal_driver_riscv_clint0_command_request+0xee>
2000209e:	a0d1                	j	20002162 <__metal_driver_riscv_clint0_command_request+0x126>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:221
        if (data) {
200020a0:	fd442783          	lw	a5,-44(s0)
200020a4:	cbc5                	beqz	a5,20002154 <__metal_driver_riscv_clint0_command_request+0x118>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:222
            *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
200020a6:	fe842503          	lw	a0,-24(s0)
200020aa:	34d1                	jal	20001b6e <__metal_clint0_mtime_get>
200020ac:	87aa                	mv	a5,a0
200020ae:	882e                	mv	a6,a1
200020b0:	fd442703          	lw	a4,-44(s0)
200020b4:	c31c                	sw	a5,0(a4)
200020b6:	01072223          	sw	a6,4(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:223
            rc = 0;
200020ba:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
200020be:	a859                	j	20002154 <__metal_driver_riscv_clint0_command_request+0x118>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
        if (data) {
200020c0:	fd442783          	lw	a5,-44(s0)
200020c4:	cbd1                	beqz	a5,20002158 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            hartid = *(int *)data;
200020c6:	fd442783          	lw	a5,-44(s0)
200020ca:	439c                	lw	a5,0(a5)
200020cc:	fef42023          	sw	a5,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:229
            __METAL_ACCESS_ONCE((
200020d0:	fe042783          	lw	a5,-32(s0)
200020d4:	078a                	slli	a5,a5,0x2
200020d6:	873e                	mv	a4,a5
200020d8:	fe442783          	lw	a5,-28(s0)
200020dc:	97ba                	add	a5,a5,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
                __metal_io_u32 *)(control_base + (hartid * 4))) = METAL_DISABLE;
200020de:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:231
            rc = 0;
200020e2:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
200020e6:	a88d                	j	20002158 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
        if (data) {
200020e8:	fd442783          	lw	a5,-44(s0)
200020ec:	cba5                	beqz	a5,2000215c <__metal_driver_riscv_clint0_command_request+0x120>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
            hartid = *(int *)data;
200020ee:	fd442783          	lw	a5,-44(s0)
200020f2:	439c                	lw	a5,0(a5)
200020f4:	fef42023          	sw	a5,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            __METAL_ACCESS_ONCE(
200020f8:	fe042783          	lw	a5,-32(s0)
200020fc:	078a                	slli	a5,a5,0x2
200020fe:	873e                	mv	a4,a5
20002100:	fe442783          	lw	a5,-28(s0)
20002104:	97ba                	add	a5,a5,a4
20002106:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:238
                (__metal_io_u32 *)(control_base + (hartid * 4))) = METAL_ENABLE;
20002108:	4785                	li	a5,1
2000210a:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:248
            __METAL_IO_FENCE(o, i);
2000210c:	0480000f          	fence	o,i
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249
            rc = __METAL_ACCESS_ONCE(
20002110:	fe042783          	lw	a5,-32(s0)
20002114:	078a                	slli	a5,a5,0x2
20002116:	873e                	mv	a4,a5
20002118:	fe442783          	lw	a5,-28(s0)
2000211c:	97ba                	add	a5,a5,a4
2000211e:	439c                	lw	a5,0(a5)
20002120:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
            rc = 0;
20002124:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
20002128:	a815                	j	2000215c <__metal_driver_riscv_clint0_command_request+0x120>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:255
        rc = 0;
2000212a:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256
        if (data) {
2000212e:	fd442783          	lw	a5,-44(s0)
20002132:	c79d                	beqz	a5,20002160 <__metal_driver_riscv_clint0_command_request+0x124>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
            hartid = *(int *)data;
20002134:	fd442783          	lw	a5,-44(s0)
20002138:	439c                	lw	a5,0(a5)
2000213a:	fef42023          	sw	a5,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
            rc = __METAL_ACCESS_ONCE(
2000213e:	fe042783          	lw	a5,-32(s0)
20002142:	078a                	slli	a5,a5,0x2
20002144:	873e                	mv	a4,a5
20002146:	fe442783          	lw	a5,-28(s0)
2000214a:	97ba                	add	a5,a5,a4
2000214c:	439c                	lw	a5,0(a5)
2000214e:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
20002152:	a039                	j	20002160 <__metal_driver_riscv_clint0_command_request+0x124>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
20002154:	0001                	nop
20002156:	a031                	j	20002162 <__metal_driver_riscv_clint0_command_request+0x126>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
20002158:	0001                	nop
2000215a:	a021                	j	20002162 <__metal_driver_riscv_clint0_command_request+0x126>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
2000215c:	0001                	nop
2000215e:	a011                	j	20002162 <__metal_driver_riscv_clint0_command_request+0x126>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
20002160:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:266
    }

    return rc;
20002162:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:267
}
20002166:	853e                	mv	a0,a5
20002168:	50b2                	lw	ra,44(sp)
2000216a:	5422                	lw	s0,40(sp)
2000216c:	6145                	addi	sp,sp,48
2000216e:	8082                	ret

20002170 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:270

int __metal_driver_riscv_clint0_clear_interrupt(
    struct metal_interrupt *controller, int id) {
20002170:	7179                	addi	sp,sp,-48
20002172:	d606                	sw	ra,44(sp)
20002174:	d422                	sw	s0,40(sp)
20002176:	1800                	addi	s0,sp,48
20002178:	fca42e23          	sw	a0,-36(s0)
2000217c:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:271
    int hartid = metal_cpu_get_current_hartid();
20002180:	4f1030ef          	jal	ra,20005e70 <metal_cpu_get_current_hartid>
20002184:	87aa                	mv	a5,a0
20002186:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:272
    return __metal_driver_riscv_clint0_command_request(
2000218a:	fec40793          	addi	a5,s0,-20
2000218e:	863e                	mv	a2,a5
20002190:	4589                	li	a1,2
20002192:	fdc42503          	lw	a0,-36(s0)
20002196:	355d                	jal	2000203c <__metal_driver_riscv_clint0_command_request>
20002198:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:274
        controller, METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
2000219a:	853e                	mv	a0,a5
2000219c:	50b2                	lw	ra,44(sp)
2000219e:	5422                	lw	s0,40(sp)
200021a0:	6145                	addi	sp,sp,48
200021a2:	8082                	ret

200021a4 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:277

int __metal_driver_riscv_clint0_set_interrupt(
    struct metal_interrupt *controller, int id) {
200021a4:	7179                	addi	sp,sp,-48
200021a6:	d606                	sw	ra,44(sp)
200021a8:	d422                	sw	s0,40(sp)
200021aa:	1800                	addi	s0,sp,48
200021ac:	fca42e23          	sw	a0,-36(s0)
200021b0:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:278
    int hartid = metal_cpu_get_current_hartid();
200021b4:	4bd030ef          	jal	ra,20005e70 <metal_cpu_get_current_hartid>
200021b8:	87aa                	mv	a5,a0
200021ba:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:279
    return __metal_driver_riscv_clint0_command_request(
200021be:	fec40793          	addi	a5,s0,-20
200021c2:	863e                	mv	a2,a5
200021c4:	458d                	li	a1,3
200021c6:	fdc42503          	lw	a0,-36(s0)
200021ca:	3d8d                	jal	2000203c <__metal_driver_riscv_clint0_command_request>
200021cc:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:281
        controller, METAL_SOFTWARE_IPI_SET, &hartid);
}
200021ce:	853e                	mv	a0,a5
200021d0:	50b2                	lw	ra,44(sp)
200021d2:	5422                	lw	s0,40(sp)
200021d4:	6145                	addi	sp,sp,48
200021d6:	8082                	ret

200021d8 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:262



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
200021d8:	1101                	addi	sp,sp,-32
200021da:	ce22                	sw	s0,28(sp)
200021dc:	1000                	addi	s0,sp,32
200021de:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:263
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
200021e2:	fec42703          	lw	a4,-20(s0)
200021e6:	81818793          	addi	a5,gp,-2024 # 80000aa0 <__metal_dt_cpu_0>
200021ea:	00f71463          	bne	a4,a5,200021f2 <__metal_driver_cpu_hartid+0x1a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:264
		return 0;
200021ee:	4781                	li	a5,0
200021f0:	a011                	j	200021f4 <__metal_driver_cpu_hartid+0x1c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:267
	}
	else {
		return -1;
200021f2:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:269
	}
}
200021f4:	853e                	mv	a0,a5
200021f6:	4472                	lw	s0,28(sp)
200021f8:	6105                	addi	sp,sp,32
200021fa:	8082                	ret

200021fc <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:272

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
200021fc:	1101                	addi	sp,sp,-32
200021fe:	ce22                	sw	s0,28(sp)
20002200:	1000                	addi	s0,sp,32
20002202:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:273
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20002206:	fec42703          	lw	a4,-20(s0)
2000220a:	81818793          	addi	a5,gp,-2024 # 80000aa0 <__metal_dt_cpu_0>
2000220e:	00f71763          	bne	a4,a5,2000221c <__metal_driver_cpu_timebase+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:274
		return 16000000;
20002212:	00f427b7          	lui	a5,0xf42
20002216:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
2000221a:	a011                	j	2000221e <__metal_driver_cpu_timebase+0x22>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:277
	}
	else {
		return 0;
2000221c:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:279
	}
}
2000221e:	853e                	mv	a0,a5
20002220:	4472                	lw	s0,28(sp)
20002222:	6105                	addi	sp,sp,32
20002224:	8082                	ret

20002226 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:282

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20002226:	1101                	addi	sp,sp,-32
20002228:	ce22                	sw	s0,28(sp)
2000222a:	1000                	addi	s0,sp,32
2000222c:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:283
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20002230:	fec42703          	lw	a4,-20(s0)
20002234:	81818793          	addi	a5,gp,-2024 # 80000aa0 <__metal_dt_cpu_0>
20002238:	00f71763          	bne	a4,a5,20002246 <__metal_driver_cpu_interrupt_controller+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:284
		return &__metal_dt_cpu_0_interrupt_controller.controller;
2000223c:	800007b7          	lui	a5,0x80000
20002240:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe91c>
20002244:	a011                	j	20002248 <__metal_driver_cpu_interrupt_controller+0x22>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:287
	}
	else {
		return NULL;
20002246:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:289
	}
}
20002248:	853e                	mv	a0,a5
2000224a:	4472                	lw	s0,28(sp)
2000224c:	6105                	addi	sp,sp,32
2000224e:	8082                	ret

20002250 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid) {
20002250:	1101                	addi	sp,sp,-32
20002252:	ce22                	sw	s0,28(sp)
20002254:	1000                	addi	s0,sp,32
20002256:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
    if (hartid < __METAL_DT_MAX_HARTS) {
2000225a:	fec42783          	lw	a5,-20(s0)
2000225e:	00f04a63          	bgtz	a5,20002272 <__metal_driver_cpu_get+0x22>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:27
        return &(__metal_cpu_table[hartid]->cpu);
20002262:	fec42703          	lw	a4,-20(s0)
20002266:	070a                	slli	a4,a4,0x2
20002268:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
2000226c:	97ba                	add	a5,a5,a4
2000226e:	439c                	lw	a5,0(a5)
20002270:	a011                	j	20002274 <__metal_driver_cpu_get+0x24>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:29
    }
    return (struct metal_cpu *)NULL;
20002272:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:30
}
20002274:	853e                	mv	a0,a5
20002276:	4472                	lw	s0,28(sp)
20002278:	6105                	addi	sp,sp,32
2000227a:	8082                	ret

2000227c <__metal_myhart_id>:
__metal_myhart_id():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:32

uintptr_t __metal_myhart_id(void) {
2000227c:	1101                	addi	sp,sp,-32
2000227e:	ce22                	sw	s0,28(sp)
20002280:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:34
    uintptr_t myhart;
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20002282:	f14027f3          	csrr	a5,mhartid
20002286:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:35
    return myhart;
2000228a:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
}
2000228e:	853e                	mv	a0,a5
20002290:	4472                	lw	s0,28(sp)
20002292:	6105                	addi	sp,sp,32
20002294:	8082                	ret

20002296 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:45
    for (ptr = base; ptr < (base + size); ptr++) {
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable(void) {
20002296:	1101                	addi	sp,sp,-32
20002298:	ce22                	sw	s0,28(sp)
2000229a:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:47
    uintptr_t m;
    __asm__ volatile("csrrs %0, mstatus, %1"
2000229c:	47a1                	li	a5,8
2000229e:	3007a7f3          	csrrs	a5,mstatus,a5
200022a2:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:50
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
200022a6:	0001                	nop
200022a8:	4472                	lw	s0,28(sp)
200022aa:	6105                	addi	sp,sp,32
200022ac:	8082                	ret

200022ae <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:52

void __metal_interrupt_global_disable(void) {
200022ae:	1101                	addi	sp,sp,-32
200022b0:	ce22                	sw	s0,28(sp)
200022b2:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
    uintptr_t m;
    __asm__ volatile("csrrc %0, mstatus, %1"
200022b4:	47a1                	li	a5,8
200022b6:	3007b7f3          	csrrc	a5,mstatus,a5
200022ba:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:57
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
200022be:	0001                	nop
200022c0:	4472                	lw	s0,28(sp)
200022c2:	6105                	addi	sp,sp,32
200022c4:	8082                	ret

200022c6 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59

void __metal_interrupt_software_enable(void) {
200022c6:	1101                	addi	sp,sp,-32
200022c8:	ce22                	sw	s0,28(sp)
200022ca:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
200022cc:	47a1                	li	a5,8
200022ce:	3047a7f3          	csrrs	a5,mie,a5
200022d2:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
200022d6:	0001                	nop
200022d8:	4472                	lw	s0,28(sp)
200022da:	6105                	addi	sp,sp,32
200022dc:	8082                	ret

200022de <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_software_disable(void) {
200022de:	1101                	addi	sp,sp,-32
200022e0:	ce22                	sw	s0,28(sp)
200022e2:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
200022e4:	47a1                	li	a5,8
200022e6:	3047b7f3          	csrrc	a5,mie,a5
200022ea:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
200022ee:	0001                	nop
200022f0:	4472                	lw	s0,28(sp)
200022f2:	6105                	addi	sp,sp,32
200022f4:	8082                	ret

200022f6 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73

void __metal_interrupt_timer_enable(void) {
200022f6:	1101                	addi	sp,sp,-32
200022f8:	ce22                	sw	s0,28(sp)
200022fa:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:75
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
200022fc:	08000793          	li	a5,128
20002300:	3047a7f3          	csrrs	a5,mie,a5
20002304:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:78
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
20002308:	0001                	nop
2000230a:	4472                	lw	s0,28(sp)
2000230c:	6105                	addi	sp,sp,32
2000230e:	8082                	ret

20002310 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80

void __metal_interrupt_timer_disable(void) {
20002310:	1101                	addi	sp,sp,-32
20002312:	ce22                	sw	s0,28(sp)
20002314:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
20002316:	08000793          	li	a5,128
2000231a:	3047b7f3          	csrrc	a5,mie,a5
2000231e:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
20002322:	0001                	nop
20002324:	4472                	lw	s0,28(sp)
20002326:	6105                	addi	sp,sp,32
20002328:	8082                	ret

2000232a <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:87

void __metal_interrupt_external_enable(void) {
2000232a:	1101                	addi	sp,sp,-32
2000232c:	ce22                	sw	s0,28(sp)
2000232e:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
20002330:	6785                	lui	a5,0x1
20002332:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20002336:	3047a7f3          	csrrs	a5,mie,a5
2000233a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
2000233e:	0001                	nop
20002340:	4472                	lw	s0,28(sp)
20002342:	6105                	addi	sp,sp,32
20002344:	8082                	ret

20002346 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:94

void __metal_interrupt_external_disable(void) {
20002346:	1101                	addi	sp,sp,-32
20002348:	ce22                	sw	s0,28(sp)
2000234a:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:96
    unsigned long m;
    __asm__ volatile("csrrc %0, mie, %1"
2000234c:	6785                	lui	a5,0x1
2000234e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20002352:	3047b7f3          	csrrc	a5,mie,a5
20002356:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:99
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
2000235a:	0001                	nop
2000235c:	4472                	lw	s0,28(sp)
2000235e:	6105                	addi	sp,sp,32
20002360:	8082                	ret

20002362 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:101

void __metal_interrupt_local_enable(int id) {
20002362:	7179                	addi	sp,sp,-48
20002364:	d622                	sw	s0,44(sp)
20002366:	1800                	addi	s0,sp,48
20002368:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
    uintptr_t b = 1 << id;
2000236c:	fdc42783          	lw	a5,-36(s0)
20002370:	4705                	li	a4,1
20002372:	00f717b3          	sll	a5,a4,a5
20002376:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:104
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
2000237a:	fec42783          	lw	a5,-20(s0)
2000237e:	3047a7f3          	csrrs	a5,mie,a5
20002382:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
}
20002386:	0001                	nop
20002388:	5432                	lw	s0,44(sp)
2000238a:	6145                	addi	sp,sp,48
2000238c:	8082                	ret

2000238e <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

void __metal_interrupt_local_disable(int id) {
2000238e:	7179                	addi	sp,sp,-48
20002390:	d622                	sw	s0,44(sp)
20002392:	1800                	addi	s0,sp,48
20002394:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:108
    uintptr_t b = 1 << id;
20002398:	fdc42783          	lw	a5,-36(s0)
2000239c:	4705                	li	a4,1
2000239e:	00f717b3          	sll	a5,a4,a5
200023a2:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
200023a6:	fec42783          	lw	a5,-20(s0)
200023aa:	3047b7f3          	csrrc	a5,mie,a5
200023ae:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
}
200023b2:	0001                	nop
200023b4:	5432                	lw	s0,44(sp)
200023b6:	6145                	addi	sp,sp,48
200023b8:	8082                	ret

200023ba <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113

void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
200023ba:	1101                	addi	sp,sp,-32
200023bc:	ce06                	sw	ra,28(sp)
200023be:	cc22                	sw	s0,24(sp)
200023c0:	1000                	addi	s0,sp,32
200023c2:	fea42623          	sw	a0,-20(s0)
200023c6:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:114
    metal_shutdown(100);
200023ca:	06400513          	li	a0,100
200023ce:	2bd030ef          	jal	ra,20005e8a <metal_shutdown>

200023d2 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:117
}

void __metal_default_interrupt_handler(int id, void *priv) {
200023d2:	1101                	addi	sp,sp,-32
200023d4:	ce06                	sw	ra,28(sp)
200023d6:	cc22                	sw	s0,24(sp)
200023d8:	1000                	addi	s0,sp,32
200023da:	fea42623          	sw	a0,-20(s0)
200023de:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    metal_shutdown(200);
200023e2:	0c800513          	li	a0,200
200023e6:	2a5030ef          	jal	ra,20005e8a <metal_shutdown>

200023ea <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:122
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
200023ea:	715d                	addi	sp,sp,-80
200023ec:	c686                	sw	ra,76(sp)
200023ee:	c496                	sw	t0,72(sp)
200023f0:	c29a                	sw	t1,68(sp)
200023f2:	c09e                	sw	t2,64(sp)
200023f4:	de22                	sw	s0,60(sp)
200023f6:	dc2a                	sw	a0,56(sp)
200023f8:	da2e                	sw	a1,52(sp)
200023fa:	d832                	sw	a2,48(sp)
200023fc:	d636                	sw	a3,44(sp)
200023fe:	d43a                	sw	a4,40(sp)
20002400:	d23e                	sw	a5,36(sp)
20002402:	d042                	sw	a6,32(sp)
20002404:	ce46                	sw	a7,28(sp)
20002406:	cc72                	sw	t3,24(sp)
20002408:	ca76                	sw	t4,20(sp)
2000240a:	c87a                	sw	t5,16(sp)
2000240c:	c67e                	sw	t6,12(sp)
2000240e:	0880                	addi	s0,sp,80
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
    metal_shutdown(300);
20002410:	12c00513          	li	a0,300
20002414:	277030ef          	jal	ra,20005e8a <metal_shutdown>

20002418 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:128
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_software_interrupt_vector_handler(void) {
20002418:	711d                	addi	sp,sp,-96
2000241a:	ce86                	sw	ra,92(sp)
2000241c:	cc96                	sw	t0,88(sp)
2000241e:	ca9a                	sw	t1,84(sp)
20002420:	c89e                	sw	t2,80(sp)
20002422:	c6a2                	sw	s0,76(sp)
20002424:	c4aa                	sw	a0,72(sp)
20002426:	c2ae                	sw	a1,68(sp)
20002428:	c0b2                	sw	a2,64(sp)
2000242a:	de36                	sw	a3,60(sp)
2000242c:	dc3a                	sw	a4,56(sp)
2000242e:	da3e                	sw	a5,52(sp)
20002430:	d842                	sw	a6,48(sp)
20002432:	d646                	sw	a7,44(sp)
20002434:	d472                	sw	t3,40(sp)
20002436:	d276                	sw	t4,36(sp)
20002438:	d07a                	sw	t5,32(sp)
2000243a:	ce7e                	sw	t6,28(sp)
2000243c:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
2000243e:	3d3d                	jal	2000227c <__metal_myhart_id>
20002440:	872a                	mv	a4,a0
20002442:	070a                	slli	a4,a4,0x2
20002444:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002448:	97ba                	add	a5,a5,a4
2000244a:	439c                	lw	a5,0(a5)
2000244c:	faf42623          	sw	a5,-84(s0)
20002450:	fac42783          	lw	a5,-84(s0)
20002454:	c785                	beqz	a5,2000247c <metal_software_interrupt_vector_handler+0x64>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129 (discriminator 1)
20002456:	fac42503          	lw	a0,-84(s0)
2000245a:	33f1                	jal	20002226 <__metal_driver_cpu_interrupt_controller>
2000245c:	faa42423          	sw	a0,-88(s0)
20002460:	fa842783          	lw	a5,-88(s0)
20002464:	0e07a783          	lw	a5,224(a5)
20002468:	faf42223          	sw	a5,-92(s0)
2000246c:	fa842783          	lw	a5,-88(s0)
20002470:	0d87a783          	lw	a5,216(a5)
20002474:	fa442583          	lw	a1,-92(s0)
20002478:	450d                	li	a0,3
2000247a:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:130
}
2000247c:	0001                	nop
2000247e:	40f6                	lw	ra,92(sp)
20002480:	42e6                	lw	t0,88(sp)
20002482:	4356                	lw	t1,84(sp)
20002484:	43c6                	lw	t2,80(sp)
20002486:	4436                	lw	s0,76(sp)
20002488:	4526                	lw	a0,72(sp)
2000248a:	4596                	lw	a1,68(sp)
2000248c:	4606                	lw	a2,64(sp)
2000248e:	56f2                	lw	a3,60(sp)
20002490:	5762                	lw	a4,56(sp)
20002492:	57d2                	lw	a5,52(sp)
20002494:	5842                	lw	a6,48(sp)
20002496:	58b2                	lw	a7,44(sp)
20002498:	5e22                	lw	t3,40(sp)
2000249a:	5e92                	lw	t4,36(sp)
2000249c:	5f02                	lw	t5,32(sp)
2000249e:	4ff2                	lw	t6,28(sp)
200024a0:	6125                	addi	sp,sp,96
200024a2:	30200073          	mret

200024a6 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132

void __metal_default_sw_handler(int id, void *priv) {
200024a6:	7179                	addi	sp,sp,-48
200024a8:	d606                	sw	ra,44(sp)
200024aa:	d422                	sw	s0,40(sp)
200024ac:	1800                	addi	s0,sp,48
200024ae:	fca42e23          	sw	a0,-36(s0)
200024b2:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:135
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200024b6:	33d9                	jal	2000227c <__metal_myhart_id>
200024b8:	872a                	mv	a4,a0
200024ba:	070a                	slli	a4,a4,0x2
200024bc:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200024c0:	97ba                	add	a5,a5,a4
200024c2:	439c                	lw	a5,0(a5)
200024c4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
200024c8:	342027f3          	csrr	a5,mcause
200024cc:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
    if (cpu) {
200024d0:	fec42783          	lw	a5,-20(s0)
200024d4:	c795                	beqz	a5,20002500 <__metal_default_sw_handler+0x5a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200024d6:	fec42503          	lw	a0,-20(s0)
200024da:	33b1                	jal	20002226 <__metal_driver_cpu_interrupt_controller>
200024dc:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:141
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE](
200024e0:	fe842783          	lw	a5,-24(s0)
200024e4:	3ff7f793          	andi	a5,a5,1023
200024e8:	fe442703          	lw	a4,-28(s0)
200024ec:	0e078793          	addi	a5,a5,224
200024f0:	078a                	slli	a5,a5,0x2
200024f2:	97ba                	add	a5,a5,a4
200024f4:	479c                	lw	a5,8(a5)
200024f6:	fdc42583          	lw	a1,-36(s0)
200024fa:	fec42503          	lw	a0,-20(s0)
200024fe:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
            (struct metal_cpu *)cpu, id);
    }
}
20002500:	0001                	nop
20002502:	50b2                	lw	ra,44(sp)
20002504:	5422                	lw	s0,40(sp)
20002506:	6145                	addi	sp,sp,48
20002508:	8082                	ret

2000250a <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_timer_interrupt_vector_handler(void) {
2000250a:	711d                	addi	sp,sp,-96
2000250c:	ce86                	sw	ra,92(sp)
2000250e:	cc96                	sw	t0,88(sp)
20002510:	ca9a                	sw	t1,84(sp)
20002512:	c89e                	sw	t2,80(sp)
20002514:	c6a2                	sw	s0,76(sp)
20002516:	c4aa                	sw	a0,72(sp)
20002518:	c2ae                	sw	a1,68(sp)
2000251a:	c0b2                	sw	a2,64(sp)
2000251c:	de36                	sw	a3,60(sp)
2000251e:	dc3a                	sw	a4,56(sp)
20002520:	da3e                	sw	a5,52(sp)
20002522:	d842                	sw	a6,48(sp)
20002524:	d646                	sw	a7,44(sp)
20002526:	d472                	sw	t3,40(sp)
20002528:	d276                	sw	t4,36(sp)
2000252a:	d07a                	sw	t5,32(sp)
2000252c:	ce7e                	sw	t6,28(sp)
2000252e:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:149
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
20002530:	33b1                	jal	2000227c <__metal_myhart_id>
20002532:	872a                	mv	a4,a0
20002534:	070a                	slli	a4,a4,0x2
20002536:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
2000253a:	97ba                	add	a5,a5,a4
2000253c:	439c                	lw	a5,0(a5)
2000253e:	faf42623          	sw	a5,-84(s0)
20002542:	fac42783          	lw	a5,-84(s0)
20002546:	c785                	beqz	a5,2000256e <metal_timer_interrupt_vector_handler+0x64>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:149 (discriminator 1)
20002548:	fac42503          	lw	a0,-84(s0)
2000254c:	39e9                	jal	20002226 <__metal_driver_cpu_interrupt_controller>
2000254e:	faa42423          	sw	a0,-88(s0)
20002552:	fa842783          	lw	a5,-88(s0)
20002556:	1407a783          	lw	a5,320(a5)
2000255a:	faf42223          	sw	a5,-92(s0)
2000255e:	fa842783          	lw	a5,-88(s0)
20002562:	1387a783          	lw	a5,312(a5)
20002566:	fa442583          	lw	a1,-92(s0)
2000256a:	451d                	li	a0,7
2000256c:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:150
}
2000256e:	0001                	nop
20002570:	40f6                	lw	ra,92(sp)
20002572:	42e6                	lw	t0,88(sp)
20002574:	4356                	lw	t1,84(sp)
20002576:	43c6                	lw	t2,80(sp)
20002578:	4436                	lw	s0,76(sp)
2000257a:	4526                	lw	a0,72(sp)
2000257c:	4596                	lw	a1,68(sp)
2000257e:	4606                	lw	a2,64(sp)
20002580:	56f2                	lw	a3,60(sp)
20002582:	5762                	lw	a4,56(sp)
20002584:	57d2                	lw	a5,52(sp)
20002586:	5842                	lw	a6,48(sp)
20002588:	58b2                	lw	a7,44(sp)
2000258a:	5e22                	lw	t3,40(sp)
2000258c:	5e92                	lw	t4,36(sp)
2000258e:	5f02                	lw	t5,32(sp)
20002590:	4ff2                	lw	t6,28(sp)
20002592:	6125                	addi	sp,sp,96
20002594:	30200073          	mret

20002598 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:152

void __metal_default_timer_handler(int id, void *priv) {
20002598:	7179                	addi	sp,sp,-48
2000259a:	d606                	sw	ra,44(sp)
2000259c:	d422                	sw	s0,40(sp)
2000259e:	1800                	addi	s0,sp,48
200025a0:	fca42e23          	sw	a0,-36(s0)
200025a4:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:153
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
200025a8:	39d1                	jal	2000227c <__metal_myhart_id>
200025aa:	87aa                	mv	a5,a0
200025ac:	853e                	mv	a0,a5
200025ae:	314d                	jal	20002250 <__metal_driver_cpu_get>
200025b0:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:154
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
200025b4:	fec42503          	lw	a0,-20(s0)
200025b8:	0cc010ef          	jal	ra,20003684 <__metal_driver_cpu_mtime_get>
200025bc:	fea42023          	sw	a0,-32(s0)
200025c0:	feb42223          	sw	a1,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:157

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
200025c4:	fe042783          	lw	a5,-32(s0)
200025c8:	fe442803          	lw	a6,-28(s0)
200025cc:	45a9                	li	a1,10
200025ce:	4601                	li	a2,0
200025d0:	00b786b3          	add	a3,a5,a1
200025d4:	8536                	mv	a0,a3
200025d6:	00f53533          	sltu	a0,a0,a5
200025da:	00c80733          	add	a4,a6,a2
200025de:	00e507b3          	add	a5,a0,a4
200025e2:	873e                	mv	a4,a5
200025e4:	87b6                	mv	a5,a3
200025e6:	883a                	mv	a6,a4
200025e8:	85be                	mv	a1,a5
200025ea:	8642                	mv	a2,a6
200025ec:	fec42503          	lw	a0,-20(s0)
200025f0:	0fa010ef          	jal	ra,200036ea <__metal_driver_cpu_mtimecmp_set>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:158
}
200025f4:	0001                	nop
200025f6:	50b2                	lw	ra,44(sp)
200025f8:	5422                	lw	s0,40(sp)
200025fa:	6145                	addi	sp,sp,48
200025fc:	8082                	ret
	...

20002600 <__metal_exception_handler>:
__metal_exception_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:167
metal_external_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_EXT);
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler(void) {
20002600:	7119                	addi	sp,sp,-128
20002602:	de86                	sw	ra,124(sp)
20002604:	dc96                	sw	t0,120(sp)
20002606:	da9a                	sw	t1,116(sp)
20002608:	d89e                	sw	t2,112(sp)
2000260a:	d6a2                	sw	s0,108(sp)
2000260c:	d4aa                	sw	a0,104(sp)
2000260e:	d2ae                	sw	a1,100(sp)
20002610:	d0b2                	sw	a2,96(sp)
20002612:	ceb6                	sw	a3,92(sp)
20002614:	ccba                	sw	a4,88(sp)
20002616:	cabe                	sw	a5,84(sp)
20002618:	c8c2                	sw	a6,80(sp)
2000261a:	c6c6                	sw	a7,76(sp)
2000261c:	c4f2                	sw	t3,72(sp)
2000261e:	c2f6                	sw	t4,68(sp)
20002620:	c0fa                	sw	t5,64(sp)
20002622:	de7e                	sw	t6,60(sp)
20002624:	0100                	addi	s0,sp,128
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20002626:	3999                	jal	2000227c <__metal_myhart_id>
20002628:	872a                	mv	a4,a0
2000262a:	070a                	slli	a4,a4,0x2
2000262c:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002630:	97ba                	add	a5,a5,a4
20002632:	439c                	lw	a5,0(a5)
20002634:	faf42623          	sw	a5,-84(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
20002638:	342027f3          	csrr	a5,mcause
2000263c:	faf42423          	sw	a5,-88(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
20002640:	341027f3          	csrr	a5,mepc
20002644:	faf42223          	sw	a5,-92(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:176
    __asm__ volatile("csrr %0, mtval" : "=r"(mtval));
20002648:	343027f3          	csrr	a5,mtval
2000264c:	faf42023          	sw	a5,-96(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177
    __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
20002650:	305027f3          	csrr	a5,mtvec
20002654:	f8f42e23          	sw	a5,-100(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179

    if (cpu) {
20002658:	fac42783          	lw	a5,-84(s0)
2000265c:	c7e1                	beqz	a5,20002724 <__metal_exception_handler+0x124>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2000265e:	fac42503          	lw	a0,-84(s0)
20002662:	36d1                	jal	20002226 <__metal_driver_cpu_interrupt_controller>
20002664:	f8a42c23          	sw	a0,-104(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
        id = mcause & METAL_MCAUSE_CAUSE;
20002668:	fa842783          	lw	a5,-88(s0)
2000266c:	3ff7f793          	andi	a5,a5,1023
20002670:	f8f42a23          	sw	a5,-108(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183
        if (mcause & METAL_MCAUSE_INTR) {
20002674:	fa842783          	lw	a5,-88(s0)
20002678:	0807d863          	bgez	a5,20002708 <__metal_exception_handler+0x108>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2000267c:	f9442703          	lw	a4,-108(s0)
20002680:	47ad                	li	a5,11
20002682:	00e7d763          	bge	a5,a4,20002690 <__metal_exception_handler+0x90>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185 (discriminator 1)
                ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20002686:	f9c42783          	lw	a5,-100(s0)
2000268a:	03f7f793          	andi	a5,a5,63
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2000268e:	ef9d                	bnez	a5,200026cc <__metal_exception_handler+0xcc>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
                priv = intc->metal_int_table[id].exint_data;
20002690:	f9842683          	lw	a3,-104(s0)
20002694:	f9442703          	lw	a4,-108(s0)
20002698:	87ba                	mv	a5,a4
2000269a:	0786                	slli	a5,a5,0x1
2000269c:	97ba                	add	a5,a5,a4
2000269e:	078e                	slli	a5,a5,0x3
200026a0:	97b6                	add	a5,a5,a3
200026a2:	0987a783          	lw	a5,152(a5)
200026a6:	f8f42623          	sw	a5,-116(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:187
                intc->metal_int_table[id].handler(id, priv);
200026aa:	f9842683          	lw	a3,-104(s0)
200026ae:	f9442703          	lw	a4,-108(s0)
200026b2:	87ba                	mv	a5,a4
200026b4:	0786                	slli	a5,a5,0x1
200026b6:	97ba                	add	a5,a5,a4
200026b8:	078e                	slli	a5,a5,0x3
200026ba:	97b6                	add	a5,a5,a3
200026bc:	0907a783          	lw	a5,144(a5)
200026c0:	f8c42583          	lw	a1,-116(s0)
200026c4:	f9442503          	lw	a0,-108(s0)
200026c8:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
                return;
200026ca:	a8a9                	j	20002724 <__metal_exception_handler+0x124>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:190
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
200026cc:	f9c42783          	lw	a5,-100(s0)
200026d0:	03f7f713          	andi	a4,a5,63
200026d4:	4789                	li	a5,2
200026d6:	04f71763          	bne	a4,a5,20002724 <__metal_exception_handler+0x124>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
                uintptr_t mtvt;
                metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
200026da:	307027f3          	csrr	a5,mtvt
200026de:	f8f42823          	sw	a5,-112(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
                priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
200026e2:	f9842783          	lw	a5,-104(s0)
200026e6:	0dc7a783          	lw	a5,220(a5)
200026ea:	f8f42623          	sw	a5,-116(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
                mtvt_handler = (metal_interrupt_handler_t) * (uintptr_t *)mtvt;
200026ee:	f9042783          	lw	a5,-112(s0)
200026f2:	439c                	lw	a5,0(a5)
200026f4:	f8f42423          	sw	a5,-120(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:197
                mtvt_handler(id, priv);
200026f8:	f8842783          	lw	a5,-120(s0)
200026fc:	f8c42583          	lw	a1,-116(s0)
20002700:	f9442503          	lw	a0,-108(s0)
20002704:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:198
                return;
20002706:	a839                	j	20002724 <__metal_exception_handler+0x124>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:201
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20002708:	f9842703          	lw	a4,-104(s0)
2000270c:	f9442783          	lw	a5,-108(s0)
20002710:	0e078793          	addi	a5,a5,224
20002714:	078a                	slli	a5,a5,0x2
20002716:	97ba                	add	a5,a5,a4
20002718:	479c                	lw	a5,8(a5)
2000271a:	f9442583          	lw	a1,-108(s0)
2000271e:	fac42503          	lw	a0,-84(s0)
20002722:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:204
        }
    }
}
20002724:	50f6                	lw	ra,124(sp)
20002726:	52e6                	lw	t0,120(sp)
20002728:	5356                	lw	t1,116(sp)
2000272a:	53c6                	lw	t2,112(sp)
2000272c:	5436                	lw	s0,108(sp)
2000272e:	5526                	lw	a0,104(sp)
20002730:	5596                	lw	a1,100(sp)
20002732:	5606                	lw	a2,96(sp)
20002734:	46f6                	lw	a3,92(sp)
20002736:	4766                	lw	a4,88(sp)
20002738:	47d6                	lw	a5,84(sp)
2000273a:	4846                	lw	a6,80(sp)
2000273c:	48b6                	lw	a7,76(sp)
2000273e:	4e26                	lw	t3,72(sp)
20002740:	4e96                	lw	t4,68(sp)
20002742:	4f06                	lw	t5,64(sp)
20002744:	5ff2                	lw	t6,60(sp)
20002746:	6109                	addi	sp,sp,128
20002748:	30200073          	mret
	...

20002772 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:207

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler(void) {
20002772:	711d                	addi	sp,sp,-96
20002774:	ce86                	sw	ra,92(sp)
20002776:	cc96                	sw	t0,88(sp)
20002778:	ca9a                	sw	t1,84(sp)
2000277a:	c89e                	sw	t2,80(sp)
2000277c:	c6a2                	sw	s0,76(sp)
2000277e:	c4aa                	sw	a0,72(sp)
20002780:	c2ae                	sw	a1,68(sp)
20002782:	c0b2                	sw	a2,64(sp)
20002784:	de36                	sw	a3,60(sp)
20002786:	dc3a                	sw	a4,56(sp)
20002788:	da3e                	sw	a5,52(sp)
2000278a:	d842                	sw	a6,48(sp)
2000278c:	d646                	sw	a7,44(sp)
2000278e:	d472                	sw	t3,40(sp)
20002790:	d276                	sw	t4,36(sp)
20002792:	d07a                	sw	t5,32(sp)
20002794:	ce7e                	sw	t6,28(sp)
20002796:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
20002798:	ae5ff0ef          	jal	ra,2000227c <__metal_myhart_id>
2000279c:	872a                	mv	a4,a0
2000279e:	070a                	slli	a4,a4,0x2
200027a0:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200027a4:	97ba                	add	a5,a5,a4
200027a6:	439c                	lw	a5,0(a5)
200027a8:	faf42623          	sw	a5,-84(s0)
200027ac:	fac42783          	lw	a5,-84(s0)
200027b0:	c78d                	beqz	a5,200027da <metal_lc0_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208 (discriminator 1)
200027b2:	fac42503          	lw	a0,-84(s0)
200027b6:	a71ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
200027ba:	faa42423          	sw	a0,-88(s0)
200027be:	fa842783          	lw	a5,-88(s0)
200027c2:	2187a783          	lw	a5,536(a5)
200027c6:	faf42223          	sw	a5,-92(s0)
200027ca:	fa842783          	lw	a5,-88(s0)
200027ce:	2107a783          	lw	a5,528(a5)
200027d2:	fa442583          	lw	a1,-92(s0)
200027d6:	4541                	li	a0,16
200027d8:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:209
}
200027da:	0001                	nop
200027dc:	40f6                	lw	ra,92(sp)
200027de:	42e6                	lw	t0,88(sp)
200027e0:	4356                	lw	t1,84(sp)
200027e2:	43c6                	lw	t2,80(sp)
200027e4:	4436                	lw	s0,76(sp)
200027e6:	4526                	lw	a0,72(sp)
200027e8:	4596                	lw	a1,68(sp)
200027ea:	4606                	lw	a2,64(sp)
200027ec:	56f2                	lw	a3,60(sp)
200027ee:	5762                	lw	a4,56(sp)
200027f0:	57d2                	lw	a5,52(sp)
200027f2:	5842                	lw	a6,48(sp)
200027f4:	58b2                	lw	a7,44(sp)
200027f6:	5e22                	lw	t3,40(sp)
200027f8:	5e92                	lw	t4,36(sp)
200027fa:	5f02                	lw	t5,32(sp)
200027fc:	4ff2                	lw	t6,28(sp)
200027fe:	6125                	addi	sp,sp,96
20002800:	30200073          	mret

20002804 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler(void) {
20002804:	711d                	addi	sp,sp,-96
20002806:	ce86                	sw	ra,92(sp)
20002808:	cc96                	sw	t0,88(sp)
2000280a:	ca9a                	sw	t1,84(sp)
2000280c:	c89e                	sw	t2,80(sp)
2000280e:	c6a2                	sw	s0,76(sp)
20002810:	c4aa                	sw	a0,72(sp)
20002812:	c2ae                	sw	a1,68(sp)
20002814:	c0b2                	sw	a2,64(sp)
20002816:	de36                	sw	a3,60(sp)
20002818:	dc3a                	sw	a4,56(sp)
2000281a:	da3e                	sw	a5,52(sp)
2000281c:	d842                	sw	a6,48(sp)
2000281e:	d646                	sw	a7,44(sp)
20002820:	d472                	sw	t3,40(sp)
20002822:	d276                	sw	t4,36(sp)
20002824:	d07a                	sw	t5,32(sp)
20002826:	ce7e                	sw	t6,28(sp)
20002828:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
2000282a:	a53ff0ef          	jal	ra,2000227c <__metal_myhart_id>
2000282e:	872a                	mv	a4,a0
20002830:	070a                	slli	a4,a4,0x2
20002832:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002836:	97ba                	add	a5,a5,a4
20002838:	439c                	lw	a5,0(a5)
2000283a:	faf42623          	sw	a5,-84(s0)
2000283e:	fac42783          	lw	a5,-84(s0)
20002842:	c78d                	beqz	a5,2000286c <metal_lc1_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213 (discriminator 1)
20002844:	fac42503          	lw	a0,-84(s0)
20002848:	9dfff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
2000284c:	faa42423          	sw	a0,-88(s0)
20002850:	fa842783          	lw	a5,-88(s0)
20002854:	2307a783          	lw	a5,560(a5)
20002858:	faf42223          	sw	a5,-92(s0)
2000285c:	fa842783          	lw	a5,-88(s0)
20002860:	2287a783          	lw	a5,552(a5)
20002864:	fa442583          	lw	a1,-92(s0)
20002868:	4545                	li	a0,17
2000286a:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
}
2000286c:	0001                	nop
2000286e:	40f6                	lw	ra,92(sp)
20002870:	42e6                	lw	t0,88(sp)
20002872:	4356                	lw	t1,84(sp)
20002874:	43c6                	lw	t2,80(sp)
20002876:	4436                	lw	s0,76(sp)
20002878:	4526                	lw	a0,72(sp)
2000287a:	4596                	lw	a1,68(sp)
2000287c:	4606                	lw	a2,64(sp)
2000287e:	56f2                	lw	a3,60(sp)
20002880:	5762                	lw	a4,56(sp)
20002882:	57d2                	lw	a5,52(sp)
20002884:	5842                	lw	a6,48(sp)
20002886:	58b2                	lw	a7,44(sp)
20002888:	5e22                	lw	t3,40(sp)
2000288a:	5e92                	lw	t4,36(sp)
2000288c:	5f02                	lw	t5,32(sp)
2000288e:	4ff2                	lw	t6,28(sp)
20002890:	6125                	addi	sp,sp,96
20002892:	30200073          	mret

20002896 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:217

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler(void) {
20002896:	711d                	addi	sp,sp,-96
20002898:	ce86                	sw	ra,92(sp)
2000289a:	cc96                	sw	t0,88(sp)
2000289c:	ca9a                	sw	t1,84(sp)
2000289e:	c89e                	sw	t2,80(sp)
200028a0:	c6a2                	sw	s0,76(sp)
200028a2:	c4aa                	sw	a0,72(sp)
200028a4:	c2ae                	sw	a1,68(sp)
200028a6:	c0b2                	sw	a2,64(sp)
200028a8:	de36                	sw	a3,60(sp)
200028aa:	dc3a                	sw	a4,56(sp)
200028ac:	da3e                	sw	a5,52(sp)
200028ae:	d842                	sw	a6,48(sp)
200028b0:	d646                	sw	a7,44(sp)
200028b2:	d472                	sw	t3,40(sp)
200028b4:	d276                	sw	t4,36(sp)
200028b6:	d07a                	sw	t5,32(sp)
200028b8:	ce7e                	sw	t6,28(sp)
200028ba:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:218
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
200028bc:	9c1ff0ef          	jal	ra,2000227c <__metal_myhart_id>
200028c0:	872a                	mv	a4,a0
200028c2:	070a                	slli	a4,a4,0x2
200028c4:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200028c8:	97ba                	add	a5,a5,a4
200028ca:	439c                	lw	a5,0(a5)
200028cc:	faf42623          	sw	a5,-84(s0)
200028d0:	fac42783          	lw	a5,-84(s0)
200028d4:	c78d                	beqz	a5,200028fe <metal_lc2_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:218 (discriminator 1)
200028d6:	fac42503          	lw	a0,-84(s0)
200028da:	94dff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
200028de:	faa42423          	sw	a0,-88(s0)
200028e2:	fa842783          	lw	a5,-88(s0)
200028e6:	2487a783          	lw	a5,584(a5)
200028ea:	faf42223          	sw	a5,-92(s0)
200028ee:	fa842783          	lw	a5,-88(s0)
200028f2:	2407a783          	lw	a5,576(a5)
200028f6:	fa442583          	lw	a1,-92(s0)
200028fa:	4549                	li	a0,18
200028fc:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219
}
200028fe:	0001                	nop
20002900:	40f6                	lw	ra,92(sp)
20002902:	42e6                	lw	t0,88(sp)
20002904:	4356                	lw	t1,84(sp)
20002906:	43c6                	lw	t2,80(sp)
20002908:	4436                	lw	s0,76(sp)
2000290a:	4526                	lw	a0,72(sp)
2000290c:	4596                	lw	a1,68(sp)
2000290e:	4606                	lw	a2,64(sp)
20002910:	56f2                	lw	a3,60(sp)
20002912:	5762                	lw	a4,56(sp)
20002914:	57d2                	lw	a5,52(sp)
20002916:	5842                	lw	a6,48(sp)
20002918:	58b2                	lw	a7,44(sp)
2000291a:	5e22                	lw	t3,40(sp)
2000291c:	5e92                	lw	t4,36(sp)
2000291e:	5f02                	lw	t5,32(sp)
20002920:	4ff2                	lw	t6,28(sp)
20002922:	6125                	addi	sp,sp,96
20002924:	30200073          	mret

20002928 <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler(void) {
20002928:	711d                	addi	sp,sp,-96
2000292a:	ce86                	sw	ra,92(sp)
2000292c:	cc96                	sw	t0,88(sp)
2000292e:	ca9a                	sw	t1,84(sp)
20002930:	c89e                	sw	t2,80(sp)
20002932:	c6a2                	sw	s0,76(sp)
20002934:	c4aa                	sw	a0,72(sp)
20002936:	c2ae                	sw	a1,68(sp)
20002938:	c0b2                	sw	a2,64(sp)
2000293a:	de36                	sw	a3,60(sp)
2000293c:	dc3a                	sw	a4,56(sp)
2000293e:	da3e                	sw	a5,52(sp)
20002940:	d842                	sw	a6,48(sp)
20002942:	d646                	sw	a7,44(sp)
20002944:	d472                	sw	t3,40(sp)
20002946:	d276                	sw	t4,36(sp)
20002948:	d07a                	sw	t5,32(sp)
2000294a:	ce7e                	sw	t6,28(sp)
2000294c:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:223
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
2000294e:	92fff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002952:	872a                	mv	a4,a0
20002954:	070a                	slli	a4,a4,0x2
20002956:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
2000295a:	97ba                	add	a5,a5,a4
2000295c:	439c                	lw	a5,0(a5)
2000295e:	faf42623          	sw	a5,-84(s0)
20002962:	fac42783          	lw	a5,-84(s0)
20002966:	c78d                	beqz	a5,20002990 <metal_lc3_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:223 (discriminator 1)
20002968:	fac42503          	lw	a0,-84(s0)
2000296c:	8bbff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002970:	faa42423          	sw	a0,-88(s0)
20002974:	fa842783          	lw	a5,-88(s0)
20002978:	2607a783          	lw	a5,608(a5)
2000297c:	faf42223          	sw	a5,-92(s0)
20002980:	fa842783          	lw	a5,-88(s0)
20002984:	2587a783          	lw	a5,600(a5)
20002988:	fa442583          	lw	a1,-92(s0)
2000298c:	454d                	li	a0,19
2000298e:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224
}
20002990:	0001                	nop
20002992:	40f6                	lw	ra,92(sp)
20002994:	42e6                	lw	t0,88(sp)
20002996:	4356                	lw	t1,84(sp)
20002998:	43c6                	lw	t2,80(sp)
2000299a:	4436                	lw	s0,76(sp)
2000299c:	4526                	lw	a0,72(sp)
2000299e:	4596                	lw	a1,68(sp)
200029a0:	4606                	lw	a2,64(sp)
200029a2:	56f2                	lw	a3,60(sp)
200029a4:	5762                	lw	a4,56(sp)
200029a6:	57d2                	lw	a5,52(sp)
200029a8:	5842                	lw	a6,48(sp)
200029aa:	58b2                	lw	a7,44(sp)
200029ac:	5e22                	lw	t3,40(sp)
200029ae:	5e92                	lw	t4,36(sp)
200029b0:	5f02                	lw	t5,32(sp)
200029b2:	4ff2                	lw	t6,28(sp)
200029b4:	6125                	addi	sp,sp,96
200029b6:	30200073          	mret

200029ba <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler(void) {
200029ba:	711d                	addi	sp,sp,-96
200029bc:	ce86                	sw	ra,92(sp)
200029be:	cc96                	sw	t0,88(sp)
200029c0:	ca9a                	sw	t1,84(sp)
200029c2:	c89e                	sw	t2,80(sp)
200029c4:	c6a2                	sw	s0,76(sp)
200029c6:	c4aa                	sw	a0,72(sp)
200029c8:	c2ae                	sw	a1,68(sp)
200029ca:	c0b2                	sw	a2,64(sp)
200029cc:	de36                	sw	a3,60(sp)
200029ce:	dc3a                	sw	a4,56(sp)
200029d0:	da3e                	sw	a5,52(sp)
200029d2:	d842                	sw	a6,48(sp)
200029d4:	d646                	sw	a7,44(sp)
200029d6:	d472                	sw	t3,40(sp)
200029d8:	d276                	sw	t4,36(sp)
200029da:	d07a                	sw	t5,32(sp)
200029dc:	ce7e                	sw	t6,28(sp)
200029de:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
200029e0:	89dff0ef          	jal	ra,2000227c <__metal_myhart_id>
200029e4:	872a                	mv	a4,a0
200029e6:	070a                	slli	a4,a4,0x2
200029e8:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200029ec:	97ba                	add	a5,a5,a4
200029ee:	439c                	lw	a5,0(a5)
200029f0:	faf42623          	sw	a5,-84(s0)
200029f4:	fac42783          	lw	a5,-84(s0)
200029f8:	c78d                	beqz	a5,20002a22 <metal_lc4_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228 (discriminator 1)
200029fa:	fac42503          	lw	a0,-84(s0)
200029fe:	829ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002a02:	faa42423          	sw	a0,-88(s0)
20002a06:	fa842783          	lw	a5,-88(s0)
20002a0a:	2787a783          	lw	a5,632(a5)
20002a0e:	faf42223          	sw	a5,-92(s0)
20002a12:	fa842783          	lw	a5,-88(s0)
20002a16:	2707a783          	lw	a5,624(a5)
20002a1a:	fa442583          	lw	a1,-92(s0)
20002a1e:	4551                	li	a0,20
20002a20:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:229
}
20002a22:	0001                	nop
20002a24:	40f6                	lw	ra,92(sp)
20002a26:	42e6                	lw	t0,88(sp)
20002a28:	4356                	lw	t1,84(sp)
20002a2a:	43c6                	lw	t2,80(sp)
20002a2c:	4436                	lw	s0,76(sp)
20002a2e:	4526                	lw	a0,72(sp)
20002a30:	4596                	lw	a1,68(sp)
20002a32:	4606                	lw	a2,64(sp)
20002a34:	56f2                	lw	a3,60(sp)
20002a36:	5762                	lw	a4,56(sp)
20002a38:	57d2                	lw	a5,52(sp)
20002a3a:	5842                	lw	a6,48(sp)
20002a3c:	58b2                	lw	a7,44(sp)
20002a3e:	5e22                	lw	t3,40(sp)
20002a40:	5e92                	lw	t4,36(sp)
20002a42:	5f02                	lw	t5,32(sp)
20002a44:	4ff2                	lw	t6,28(sp)
20002a46:	6125                	addi	sp,sp,96
20002a48:	30200073          	mret

20002a4c <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:232

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler(void) {
20002a4c:	711d                	addi	sp,sp,-96
20002a4e:	ce86                	sw	ra,92(sp)
20002a50:	cc96                	sw	t0,88(sp)
20002a52:	ca9a                	sw	t1,84(sp)
20002a54:	c89e                	sw	t2,80(sp)
20002a56:	c6a2                	sw	s0,76(sp)
20002a58:	c4aa                	sw	a0,72(sp)
20002a5a:	c2ae                	sw	a1,68(sp)
20002a5c:	c0b2                	sw	a2,64(sp)
20002a5e:	de36                	sw	a3,60(sp)
20002a60:	dc3a                	sw	a4,56(sp)
20002a62:	da3e                	sw	a5,52(sp)
20002a64:	d842                	sw	a6,48(sp)
20002a66:	d646                	sw	a7,44(sp)
20002a68:	d472                	sw	t3,40(sp)
20002a6a:	d276                	sw	t4,36(sp)
20002a6c:	d07a                	sw	t5,32(sp)
20002a6e:	ce7e                	sw	t6,28(sp)
20002a70:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
20002a72:	80bff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002a76:	872a                	mv	a4,a0
20002a78:	070a                	slli	a4,a4,0x2
20002a7a:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002a7e:	97ba                	add	a5,a5,a4
20002a80:	439c                	lw	a5,0(a5)
20002a82:	faf42623          	sw	a5,-84(s0)
20002a86:	fac42783          	lw	a5,-84(s0)
20002a8a:	c78d                	beqz	a5,20002ab4 <metal_lc5_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233 (discriminator 1)
20002a8c:	fac42503          	lw	a0,-84(s0)
20002a90:	f96ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002a94:	faa42423          	sw	a0,-88(s0)
20002a98:	fa842783          	lw	a5,-88(s0)
20002a9c:	2907a783          	lw	a5,656(a5)
20002aa0:	faf42223          	sw	a5,-92(s0)
20002aa4:	fa842783          	lw	a5,-88(s0)
20002aa8:	2887a783          	lw	a5,648(a5)
20002aac:	fa442583          	lw	a1,-92(s0)
20002ab0:	4555                	li	a0,21
20002ab2:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:234
}
20002ab4:	0001                	nop
20002ab6:	40f6                	lw	ra,92(sp)
20002ab8:	42e6                	lw	t0,88(sp)
20002aba:	4356                	lw	t1,84(sp)
20002abc:	43c6                	lw	t2,80(sp)
20002abe:	4436                	lw	s0,76(sp)
20002ac0:	4526                	lw	a0,72(sp)
20002ac2:	4596                	lw	a1,68(sp)
20002ac4:	4606                	lw	a2,64(sp)
20002ac6:	56f2                	lw	a3,60(sp)
20002ac8:	5762                	lw	a4,56(sp)
20002aca:	57d2                	lw	a5,52(sp)
20002acc:	5842                	lw	a6,48(sp)
20002ace:	58b2                	lw	a7,44(sp)
20002ad0:	5e22                	lw	t3,40(sp)
20002ad2:	5e92                	lw	t4,36(sp)
20002ad4:	5f02                	lw	t5,32(sp)
20002ad6:	4ff2                	lw	t6,28(sp)
20002ad8:	6125                	addi	sp,sp,96
20002ada:	30200073          	mret

20002ade <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:237

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler(void) {
20002ade:	711d                	addi	sp,sp,-96
20002ae0:	ce86                	sw	ra,92(sp)
20002ae2:	cc96                	sw	t0,88(sp)
20002ae4:	ca9a                	sw	t1,84(sp)
20002ae6:	c89e                	sw	t2,80(sp)
20002ae8:	c6a2                	sw	s0,76(sp)
20002aea:	c4aa                	sw	a0,72(sp)
20002aec:	c2ae                	sw	a1,68(sp)
20002aee:	c0b2                	sw	a2,64(sp)
20002af0:	de36                	sw	a3,60(sp)
20002af2:	dc3a                	sw	a4,56(sp)
20002af4:	da3e                	sw	a5,52(sp)
20002af6:	d842                	sw	a6,48(sp)
20002af8:	d646                	sw	a7,44(sp)
20002afa:	d472                	sw	t3,40(sp)
20002afc:	d276                	sw	t4,36(sp)
20002afe:	d07a                	sw	t5,32(sp)
20002b00:	ce7e                	sw	t6,28(sp)
20002b02:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
20002b04:	f78ff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002b08:	872a                	mv	a4,a0
20002b0a:	070a                	slli	a4,a4,0x2
20002b0c:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002b10:	97ba                	add	a5,a5,a4
20002b12:	439c                	lw	a5,0(a5)
20002b14:	faf42623          	sw	a5,-84(s0)
20002b18:	fac42783          	lw	a5,-84(s0)
20002b1c:	c78d                	beqz	a5,20002b46 <metal_lc6_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238 (discriminator 1)
20002b1e:	fac42503          	lw	a0,-84(s0)
20002b22:	f04ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002b26:	faa42423          	sw	a0,-88(s0)
20002b2a:	fa842783          	lw	a5,-88(s0)
20002b2e:	2a87a783          	lw	a5,680(a5)
20002b32:	faf42223          	sw	a5,-92(s0)
20002b36:	fa842783          	lw	a5,-88(s0)
20002b3a:	2a07a783          	lw	a5,672(a5)
20002b3e:	fa442583          	lw	a1,-92(s0)
20002b42:	4559                	li	a0,22
20002b44:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:239
}
20002b46:	0001                	nop
20002b48:	40f6                	lw	ra,92(sp)
20002b4a:	42e6                	lw	t0,88(sp)
20002b4c:	4356                	lw	t1,84(sp)
20002b4e:	43c6                	lw	t2,80(sp)
20002b50:	4436                	lw	s0,76(sp)
20002b52:	4526                	lw	a0,72(sp)
20002b54:	4596                	lw	a1,68(sp)
20002b56:	4606                	lw	a2,64(sp)
20002b58:	56f2                	lw	a3,60(sp)
20002b5a:	5762                	lw	a4,56(sp)
20002b5c:	57d2                	lw	a5,52(sp)
20002b5e:	5842                	lw	a6,48(sp)
20002b60:	58b2                	lw	a7,44(sp)
20002b62:	5e22                	lw	t3,40(sp)
20002b64:	5e92                	lw	t4,36(sp)
20002b66:	5f02                	lw	t5,32(sp)
20002b68:	4ff2                	lw	t6,28(sp)
20002b6a:	6125                	addi	sp,sp,96
20002b6c:	30200073          	mret

20002b70 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler(void) {
20002b70:	711d                	addi	sp,sp,-96
20002b72:	ce86                	sw	ra,92(sp)
20002b74:	cc96                	sw	t0,88(sp)
20002b76:	ca9a                	sw	t1,84(sp)
20002b78:	c89e                	sw	t2,80(sp)
20002b7a:	c6a2                	sw	s0,76(sp)
20002b7c:	c4aa                	sw	a0,72(sp)
20002b7e:	c2ae                	sw	a1,68(sp)
20002b80:	c0b2                	sw	a2,64(sp)
20002b82:	de36                	sw	a3,60(sp)
20002b84:	dc3a                	sw	a4,56(sp)
20002b86:	da3e                	sw	a5,52(sp)
20002b88:	d842                	sw	a6,48(sp)
20002b8a:	d646                	sw	a7,44(sp)
20002b8c:	d472                	sw	t3,40(sp)
20002b8e:	d276                	sw	t4,36(sp)
20002b90:	d07a                	sw	t5,32(sp)
20002b92:	ce7e                	sw	t6,28(sp)
20002b94:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:243
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
20002b96:	ee6ff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002b9a:	872a                	mv	a4,a0
20002b9c:	070a                	slli	a4,a4,0x2
20002b9e:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002ba2:	97ba                	add	a5,a5,a4
20002ba4:	439c                	lw	a5,0(a5)
20002ba6:	faf42623          	sw	a5,-84(s0)
20002baa:	fac42783          	lw	a5,-84(s0)
20002bae:	c78d                	beqz	a5,20002bd8 <metal_lc7_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:243 (discriminator 1)
20002bb0:	fac42503          	lw	a0,-84(s0)
20002bb4:	e72ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002bb8:	faa42423          	sw	a0,-88(s0)
20002bbc:	fa842783          	lw	a5,-88(s0)
20002bc0:	2c07a783          	lw	a5,704(a5)
20002bc4:	faf42223          	sw	a5,-92(s0)
20002bc8:	fa842783          	lw	a5,-88(s0)
20002bcc:	2b87a783          	lw	a5,696(a5)
20002bd0:	fa442583          	lw	a1,-92(s0)
20002bd4:	455d                	li	a0,23
20002bd6:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
}
20002bd8:	0001                	nop
20002bda:	40f6                	lw	ra,92(sp)
20002bdc:	42e6                	lw	t0,88(sp)
20002bde:	4356                	lw	t1,84(sp)
20002be0:	43c6                	lw	t2,80(sp)
20002be2:	4436                	lw	s0,76(sp)
20002be4:	4526                	lw	a0,72(sp)
20002be6:	4596                	lw	a1,68(sp)
20002be8:	4606                	lw	a2,64(sp)
20002bea:	56f2                	lw	a3,60(sp)
20002bec:	5762                	lw	a4,56(sp)
20002bee:	57d2                	lw	a5,52(sp)
20002bf0:	5842                	lw	a6,48(sp)
20002bf2:	58b2                	lw	a7,44(sp)
20002bf4:	5e22                	lw	t3,40(sp)
20002bf6:	5e92                	lw	t4,36(sp)
20002bf8:	5f02                	lw	t5,32(sp)
20002bfa:	4ff2                	lw	t6,28(sp)
20002bfc:	6125                	addi	sp,sp,96
20002bfe:	30200073          	mret

20002c02 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler(void) {
20002c02:	711d                	addi	sp,sp,-96
20002c04:	ce86                	sw	ra,92(sp)
20002c06:	cc96                	sw	t0,88(sp)
20002c08:	ca9a                	sw	t1,84(sp)
20002c0a:	c89e                	sw	t2,80(sp)
20002c0c:	c6a2                	sw	s0,76(sp)
20002c0e:	c4aa                	sw	a0,72(sp)
20002c10:	c2ae                	sw	a1,68(sp)
20002c12:	c0b2                	sw	a2,64(sp)
20002c14:	de36                	sw	a3,60(sp)
20002c16:	dc3a                	sw	a4,56(sp)
20002c18:	da3e                	sw	a5,52(sp)
20002c1a:	d842                	sw	a6,48(sp)
20002c1c:	d646                	sw	a7,44(sp)
20002c1e:	d472                	sw	t3,40(sp)
20002c20:	d276                	sw	t4,36(sp)
20002c22:	d07a                	sw	t5,32(sp)
20002c24:	ce7e                	sw	t6,28(sp)
20002c26:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:248
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
20002c28:	e54ff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002c2c:	872a                	mv	a4,a0
20002c2e:	070a                	slli	a4,a4,0x2
20002c30:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002c34:	97ba                	add	a5,a5,a4
20002c36:	439c                	lw	a5,0(a5)
20002c38:	faf42623          	sw	a5,-84(s0)
20002c3c:	fac42783          	lw	a5,-84(s0)
20002c40:	c78d                	beqz	a5,20002c6a <metal_lc8_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:248 (discriminator 1)
20002c42:	fac42503          	lw	a0,-84(s0)
20002c46:	de0ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002c4a:	faa42423          	sw	a0,-88(s0)
20002c4e:	fa842783          	lw	a5,-88(s0)
20002c52:	2d87a783          	lw	a5,728(a5)
20002c56:	faf42223          	sw	a5,-92(s0)
20002c5a:	fa842783          	lw	a5,-88(s0)
20002c5e:	2d07a783          	lw	a5,720(a5)
20002c62:	fa442583          	lw	a1,-92(s0)
20002c66:	4561                	li	a0,24
20002c68:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:249
}
20002c6a:	0001                	nop
20002c6c:	40f6                	lw	ra,92(sp)
20002c6e:	42e6                	lw	t0,88(sp)
20002c70:	4356                	lw	t1,84(sp)
20002c72:	43c6                	lw	t2,80(sp)
20002c74:	4436                	lw	s0,76(sp)
20002c76:	4526                	lw	a0,72(sp)
20002c78:	4596                	lw	a1,68(sp)
20002c7a:	4606                	lw	a2,64(sp)
20002c7c:	56f2                	lw	a3,60(sp)
20002c7e:	5762                	lw	a4,56(sp)
20002c80:	57d2                	lw	a5,52(sp)
20002c82:	5842                	lw	a6,48(sp)
20002c84:	58b2                	lw	a7,44(sp)
20002c86:	5e22                	lw	t3,40(sp)
20002c88:	5e92                	lw	t4,36(sp)
20002c8a:	5f02                	lw	t5,32(sp)
20002c8c:	4ff2                	lw	t6,28(sp)
20002c8e:	6125                	addi	sp,sp,96
20002c90:	30200073          	mret

20002c94 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler(void) {
20002c94:	711d                	addi	sp,sp,-96
20002c96:	ce86                	sw	ra,92(sp)
20002c98:	cc96                	sw	t0,88(sp)
20002c9a:	ca9a                	sw	t1,84(sp)
20002c9c:	c89e                	sw	t2,80(sp)
20002c9e:	c6a2                	sw	s0,76(sp)
20002ca0:	c4aa                	sw	a0,72(sp)
20002ca2:	c2ae                	sw	a1,68(sp)
20002ca4:	c0b2                	sw	a2,64(sp)
20002ca6:	de36                	sw	a3,60(sp)
20002ca8:	dc3a                	sw	a4,56(sp)
20002caa:	da3e                	sw	a5,52(sp)
20002cac:	d842                	sw	a6,48(sp)
20002cae:	d646                	sw	a7,44(sp)
20002cb0:	d472                	sw	t3,40(sp)
20002cb2:	d276                	sw	t4,36(sp)
20002cb4:	d07a                	sw	t5,32(sp)
20002cb6:	ce7e                	sw	t6,28(sp)
20002cb8:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:253
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
20002cba:	dc2ff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002cbe:	872a                	mv	a4,a0
20002cc0:	070a                	slli	a4,a4,0x2
20002cc2:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002cc6:	97ba                	add	a5,a5,a4
20002cc8:	439c                	lw	a5,0(a5)
20002cca:	faf42623          	sw	a5,-84(s0)
20002cce:	fac42783          	lw	a5,-84(s0)
20002cd2:	c78d                	beqz	a5,20002cfc <metal_lc9_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:253 (discriminator 1)
20002cd4:	fac42503          	lw	a0,-84(s0)
20002cd8:	d4eff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002cdc:	faa42423          	sw	a0,-88(s0)
20002ce0:	fa842783          	lw	a5,-88(s0)
20002ce4:	2f07a783          	lw	a5,752(a5)
20002ce8:	faf42223          	sw	a5,-92(s0)
20002cec:	fa842783          	lw	a5,-88(s0)
20002cf0:	2e87a783          	lw	a5,744(a5)
20002cf4:	fa442583          	lw	a1,-92(s0)
20002cf8:	4565                	li	a0,25
20002cfa:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
}
20002cfc:	0001                	nop
20002cfe:	40f6                	lw	ra,92(sp)
20002d00:	42e6                	lw	t0,88(sp)
20002d02:	4356                	lw	t1,84(sp)
20002d04:	43c6                	lw	t2,80(sp)
20002d06:	4436                	lw	s0,76(sp)
20002d08:	4526                	lw	a0,72(sp)
20002d0a:	4596                	lw	a1,68(sp)
20002d0c:	4606                	lw	a2,64(sp)
20002d0e:	56f2                	lw	a3,60(sp)
20002d10:	5762                	lw	a4,56(sp)
20002d12:	57d2                	lw	a5,52(sp)
20002d14:	5842                	lw	a6,48(sp)
20002d16:	58b2                	lw	a7,44(sp)
20002d18:	5e22                	lw	t3,40(sp)
20002d1a:	5e92                	lw	t4,36(sp)
20002d1c:	5f02                	lw	t5,32(sp)
20002d1e:	4ff2                	lw	t6,28(sp)
20002d20:	6125                	addi	sp,sp,96
20002d22:	30200073          	mret

20002d26 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc10_interrupt_vector_handler(void) {
20002d26:	711d                	addi	sp,sp,-96
20002d28:	ce86                	sw	ra,92(sp)
20002d2a:	cc96                	sw	t0,88(sp)
20002d2c:	ca9a                	sw	t1,84(sp)
20002d2e:	c89e                	sw	t2,80(sp)
20002d30:	c6a2                	sw	s0,76(sp)
20002d32:	c4aa                	sw	a0,72(sp)
20002d34:	c2ae                	sw	a1,68(sp)
20002d36:	c0b2                	sw	a2,64(sp)
20002d38:	de36                	sw	a3,60(sp)
20002d3a:	dc3a                	sw	a4,56(sp)
20002d3c:	da3e                	sw	a5,52(sp)
20002d3e:	d842                	sw	a6,48(sp)
20002d40:	d646                	sw	a7,44(sp)
20002d42:	d472                	sw	t3,40(sp)
20002d44:	d276                	sw	t4,36(sp)
20002d46:	d07a                	sw	t5,32(sp)
20002d48:	ce7e                	sw	t6,28(sp)
20002d4a:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:259
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
20002d4c:	d30ff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002d50:	872a                	mv	a4,a0
20002d52:	070a                	slli	a4,a4,0x2
20002d54:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002d58:	97ba                	add	a5,a5,a4
20002d5a:	439c                	lw	a5,0(a5)
20002d5c:	faf42623          	sw	a5,-84(s0)
20002d60:	fac42783          	lw	a5,-84(s0)
20002d64:	c78d                	beqz	a5,20002d8e <metal_lc10_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:259 (discriminator 1)
20002d66:	fac42503          	lw	a0,-84(s0)
20002d6a:	cbcff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002d6e:	faa42423          	sw	a0,-88(s0)
20002d72:	fa842783          	lw	a5,-88(s0)
20002d76:	3087a783          	lw	a5,776(a5)
20002d7a:	faf42223          	sw	a5,-92(s0)
20002d7e:	fa842783          	lw	a5,-88(s0)
20002d82:	3007a783          	lw	a5,768(a5)
20002d86:	fa442583          	lw	a1,-92(s0)
20002d8a:	4569                	li	a0,26
20002d8c:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:260
}
20002d8e:	0001                	nop
20002d90:	40f6                	lw	ra,92(sp)
20002d92:	42e6                	lw	t0,88(sp)
20002d94:	4356                	lw	t1,84(sp)
20002d96:	43c6                	lw	t2,80(sp)
20002d98:	4436                	lw	s0,76(sp)
20002d9a:	4526                	lw	a0,72(sp)
20002d9c:	4596                	lw	a1,68(sp)
20002d9e:	4606                	lw	a2,64(sp)
20002da0:	56f2                	lw	a3,60(sp)
20002da2:	5762                	lw	a4,56(sp)
20002da4:	57d2                	lw	a5,52(sp)
20002da6:	5842                	lw	a6,48(sp)
20002da8:	58b2                	lw	a7,44(sp)
20002daa:	5e22                	lw	t3,40(sp)
20002dac:	5e92                	lw	t4,36(sp)
20002dae:	5f02                	lw	t5,32(sp)
20002db0:	4ff2                	lw	t6,28(sp)
20002db2:	6125                	addi	sp,sp,96
20002db4:	30200073          	mret

20002db8 <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc11_interrupt_vector_handler(void) {
20002db8:	711d                	addi	sp,sp,-96
20002dba:	ce86                	sw	ra,92(sp)
20002dbc:	cc96                	sw	t0,88(sp)
20002dbe:	ca9a                	sw	t1,84(sp)
20002dc0:	c89e                	sw	t2,80(sp)
20002dc2:	c6a2                	sw	s0,76(sp)
20002dc4:	c4aa                	sw	a0,72(sp)
20002dc6:	c2ae                	sw	a1,68(sp)
20002dc8:	c0b2                	sw	a2,64(sp)
20002dca:	de36                	sw	a3,60(sp)
20002dcc:	dc3a                	sw	a4,56(sp)
20002dce:	da3e                	sw	a5,52(sp)
20002dd0:	d842                	sw	a6,48(sp)
20002dd2:	d646                	sw	a7,44(sp)
20002dd4:	d472                	sw	t3,40(sp)
20002dd6:	d276                	sw	t4,36(sp)
20002dd8:	d07a                	sw	t5,32(sp)
20002dda:	ce7e                	sw	t6,28(sp)
20002ddc:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:265
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
20002dde:	c9eff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002de2:	872a                	mv	a4,a0
20002de4:	070a                	slli	a4,a4,0x2
20002de6:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002dea:	97ba                	add	a5,a5,a4
20002dec:	439c                	lw	a5,0(a5)
20002dee:	faf42623          	sw	a5,-84(s0)
20002df2:	fac42783          	lw	a5,-84(s0)
20002df6:	c78d                	beqz	a5,20002e20 <metal_lc11_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:265 (discriminator 1)
20002df8:	fac42503          	lw	a0,-84(s0)
20002dfc:	c2aff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002e00:	faa42423          	sw	a0,-88(s0)
20002e04:	fa842783          	lw	a5,-88(s0)
20002e08:	3207a783          	lw	a5,800(a5)
20002e0c:	faf42223          	sw	a5,-92(s0)
20002e10:	fa842783          	lw	a5,-88(s0)
20002e14:	3187a783          	lw	a5,792(a5)
20002e18:	fa442583          	lw	a1,-92(s0)
20002e1c:	456d                	li	a0,27
20002e1e:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266
}
20002e20:	0001                	nop
20002e22:	40f6                	lw	ra,92(sp)
20002e24:	42e6                	lw	t0,88(sp)
20002e26:	4356                	lw	t1,84(sp)
20002e28:	43c6                	lw	t2,80(sp)
20002e2a:	4436                	lw	s0,76(sp)
20002e2c:	4526                	lw	a0,72(sp)
20002e2e:	4596                	lw	a1,68(sp)
20002e30:	4606                	lw	a2,64(sp)
20002e32:	56f2                	lw	a3,60(sp)
20002e34:	5762                	lw	a4,56(sp)
20002e36:	57d2                	lw	a5,52(sp)
20002e38:	5842                	lw	a6,48(sp)
20002e3a:	58b2                	lw	a7,44(sp)
20002e3c:	5e22                	lw	t3,40(sp)
20002e3e:	5e92                	lw	t4,36(sp)
20002e40:	5f02                	lw	t5,32(sp)
20002e42:	4ff2                	lw	t6,28(sp)
20002e44:	6125                	addi	sp,sp,96
20002e46:	30200073          	mret

20002e4a <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc12_interrupt_vector_handler(void) {
20002e4a:	711d                	addi	sp,sp,-96
20002e4c:	ce86                	sw	ra,92(sp)
20002e4e:	cc96                	sw	t0,88(sp)
20002e50:	ca9a                	sw	t1,84(sp)
20002e52:	c89e                	sw	t2,80(sp)
20002e54:	c6a2                	sw	s0,76(sp)
20002e56:	c4aa                	sw	a0,72(sp)
20002e58:	c2ae                	sw	a1,68(sp)
20002e5a:	c0b2                	sw	a2,64(sp)
20002e5c:	de36                	sw	a3,60(sp)
20002e5e:	dc3a                	sw	a4,56(sp)
20002e60:	da3e                	sw	a5,52(sp)
20002e62:	d842                	sw	a6,48(sp)
20002e64:	d646                	sw	a7,44(sp)
20002e66:	d472                	sw	t3,40(sp)
20002e68:	d276                	sw	t4,36(sp)
20002e6a:	d07a                	sw	t5,32(sp)
20002e6c:	ce7e                	sw	t6,28(sp)
20002e6e:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:271
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
20002e70:	c0cff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002e74:	872a                	mv	a4,a0
20002e76:	070a                	slli	a4,a4,0x2
20002e78:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002e7c:	97ba                	add	a5,a5,a4
20002e7e:	439c                	lw	a5,0(a5)
20002e80:	faf42623          	sw	a5,-84(s0)
20002e84:	fac42783          	lw	a5,-84(s0)
20002e88:	c78d                	beqz	a5,20002eb2 <metal_lc12_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:271 (discriminator 1)
20002e8a:	fac42503          	lw	a0,-84(s0)
20002e8e:	b98ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002e92:	faa42423          	sw	a0,-88(s0)
20002e96:	fa842783          	lw	a5,-88(s0)
20002e9a:	3387a783          	lw	a5,824(a5)
20002e9e:	faf42223          	sw	a5,-92(s0)
20002ea2:	fa842783          	lw	a5,-88(s0)
20002ea6:	3307a783          	lw	a5,816(a5)
20002eaa:	fa442583          	lw	a1,-92(s0)
20002eae:	4571                	li	a0,28
20002eb0:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
}
20002eb2:	0001                	nop
20002eb4:	40f6                	lw	ra,92(sp)
20002eb6:	42e6                	lw	t0,88(sp)
20002eb8:	4356                	lw	t1,84(sp)
20002eba:	43c6                	lw	t2,80(sp)
20002ebc:	4436                	lw	s0,76(sp)
20002ebe:	4526                	lw	a0,72(sp)
20002ec0:	4596                	lw	a1,68(sp)
20002ec2:	4606                	lw	a2,64(sp)
20002ec4:	56f2                	lw	a3,60(sp)
20002ec6:	5762                	lw	a4,56(sp)
20002ec8:	57d2                	lw	a5,52(sp)
20002eca:	5842                	lw	a6,48(sp)
20002ecc:	58b2                	lw	a7,44(sp)
20002ece:	5e22                	lw	t3,40(sp)
20002ed0:	5e92                	lw	t4,36(sp)
20002ed2:	5f02                	lw	t5,32(sp)
20002ed4:	4ff2                	lw	t6,28(sp)
20002ed6:	6125                	addi	sp,sp,96
20002ed8:	30200073          	mret

20002edc <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:276

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc13_interrupt_vector_handler(void) {
20002edc:	711d                	addi	sp,sp,-96
20002ede:	ce86                	sw	ra,92(sp)
20002ee0:	cc96                	sw	t0,88(sp)
20002ee2:	ca9a                	sw	t1,84(sp)
20002ee4:	c89e                	sw	t2,80(sp)
20002ee6:	c6a2                	sw	s0,76(sp)
20002ee8:	c4aa                	sw	a0,72(sp)
20002eea:	c2ae                	sw	a1,68(sp)
20002eec:	c0b2                	sw	a2,64(sp)
20002eee:	de36                	sw	a3,60(sp)
20002ef0:	dc3a                	sw	a4,56(sp)
20002ef2:	da3e                	sw	a5,52(sp)
20002ef4:	d842                	sw	a6,48(sp)
20002ef6:	d646                	sw	a7,44(sp)
20002ef8:	d472                	sw	t3,40(sp)
20002efa:	d276                	sw	t4,36(sp)
20002efc:	d07a                	sw	t5,32(sp)
20002efe:	ce7e                	sw	t6,28(sp)
20002f00:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:277
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
20002f02:	b7aff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002f06:	872a                	mv	a4,a0
20002f08:	070a                	slli	a4,a4,0x2
20002f0a:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002f0e:	97ba                	add	a5,a5,a4
20002f10:	439c                	lw	a5,0(a5)
20002f12:	faf42623          	sw	a5,-84(s0)
20002f16:	fac42783          	lw	a5,-84(s0)
20002f1a:	c78d                	beqz	a5,20002f44 <metal_lc13_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:277 (discriminator 1)
20002f1c:	fac42503          	lw	a0,-84(s0)
20002f20:	b06ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002f24:	faa42423          	sw	a0,-88(s0)
20002f28:	fa842783          	lw	a5,-88(s0)
20002f2c:	3507a783          	lw	a5,848(a5)
20002f30:	faf42223          	sw	a5,-92(s0)
20002f34:	fa842783          	lw	a5,-88(s0)
20002f38:	3487a783          	lw	a5,840(a5)
20002f3c:	fa442583          	lw	a1,-92(s0)
20002f40:	4575                	li	a0,29
20002f42:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
}
20002f44:	0001                	nop
20002f46:	40f6                	lw	ra,92(sp)
20002f48:	42e6                	lw	t0,88(sp)
20002f4a:	4356                	lw	t1,84(sp)
20002f4c:	43c6                	lw	t2,80(sp)
20002f4e:	4436                	lw	s0,76(sp)
20002f50:	4526                	lw	a0,72(sp)
20002f52:	4596                	lw	a1,68(sp)
20002f54:	4606                	lw	a2,64(sp)
20002f56:	56f2                	lw	a3,60(sp)
20002f58:	5762                	lw	a4,56(sp)
20002f5a:	57d2                	lw	a5,52(sp)
20002f5c:	5842                	lw	a6,48(sp)
20002f5e:	58b2                	lw	a7,44(sp)
20002f60:	5e22                	lw	t3,40(sp)
20002f62:	5e92                	lw	t4,36(sp)
20002f64:	5f02                	lw	t5,32(sp)
20002f66:	4ff2                	lw	t6,28(sp)
20002f68:	6125                	addi	sp,sp,96
20002f6a:	30200073          	mret

20002f6e <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc14_interrupt_vector_handler(void) {
20002f6e:	711d                	addi	sp,sp,-96
20002f70:	ce86                	sw	ra,92(sp)
20002f72:	cc96                	sw	t0,88(sp)
20002f74:	ca9a                	sw	t1,84(sp)
20002f76:	c89e                	sw	t2,80(sp)
20002f78:	c6a2                	sw	s0,76(sp)
20002f7a:	c4aa                	sw	a0,72(sp)
20002f7c:	c2ae                	sw	a1,68(sp)
20002f7e:	c0b2                	sw	a2,64(sp)
20002f80:	de36                	sw	a3,60(sp)
20002f82:	dc3a                	sw	a4,56(sp)
20002f84:	da3e                	sw	a5,52(sp)
20002f86:	d842                	sw	a6,48(sp)
20002f88:	d646                	sw	a7,44(sp)
20002f8a:	d472                	sw	t3,40(sp)
20002f8c:	d276                	sw	t4,36(sp)
20002f8e:	d07a                	sw	t5,32(sp)
20002f90:	ce7e                	sw	t6,28(sp)
20002f92:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
20002f94:	ae8ff0ef          	jal	ra,2000227c <__metal_myhart_id>
20002f98:	872a                	mv	a4,a0
20002f9a:	070a                	slli	a4,a4,0x2
20002f9c:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20002fa0:	97ba                	add	a5,a5,a4
20002fa2:	439c                	lw	a5,0(a5)
20002fa4:	faf42623          	sw	a5,-84(s0)
20002fa8:	fac42783          	lw	a5,-84(s0)
20002fac:	c78d                	beqz	a5,20002fd6 <metal_lc14_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283 (discriminator 1)
20002fae:	fac42503          	lw	a0,-84(s0)
20002fb2:	a74ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20002fb6:	faa42423          	sw	a0,-88(s0)
20002fba:	fa842783          	lw	a5,-88(s0)
20002fbe:	3687a783          	lw	a5,872(a5)
20002fc2:	faf42223          	sw	a5,-92(s0)
20002fc6:	fa842783          	lw	a5,-88(s0)
20002fca:	3607a783          	lw	a5,864(a5)
20002fce:	fa442583          	lw	a1,-92(s0)
20002fd2:	4579                	li	a0,30
20002fd4:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
}
20002fd6:	0001                	nop
20002fd8:	40f6                	lw	ra,92(sp)
20002fda:	42e6                	lw	t0,88(sp)
20002fdc:	4356                	lw	t1,84(sp)
20002fde:	43c6                	lw	t2,80(sp)
20002fe0:	4436                	lw	s0,76(sp)
20002fe2:	4526                	lw	a0,72(sp)
20002fe4:	4596                	lw	a1,68(sp)
20002fe6:	4606                	lw	a2,64(sp)
20002fe8:	56f2                	lw	a3,60(sp)
20002fea:	5762                	lw	a4,56(sp)
20002fec:	57d2                	lw	a5,52(sp)
20002fee:	5842                	lw	a6,48(sp)
20002ff0:	58b2                	lw	a7,44(sp)
20002ff2:	5e22                	lw	t3,40(sp)
20002ff4:	5e92                	lw	t4,36(sp)
20002ff6:	5f02                	lw	t5,32(sp)
20002ff8:	4ff2                	lw	t6,28(sp)
20002ffa:	6125                	addi	sp,sp,96
20002ffc:	30200073          	mret

20003000 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:288

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc15_interrupt_vector_handler(void) {
20003000:	711d                	addi	sp,sp,-96
20003002:	ce86                	sw	ra,92(sp)
20003004:	cc96                	sw	t0,88(sp)
20003006:	ca9a                	sw	t1,84(sp)
20003008:	c89e                	sw	t2,80(sp)
2000300a:	c6a2                	sw	s0,76(sp)
2000300c:	c4aa                	sw	a0,72(sp)
2000300e:	c2ae                	sw	a1,68(sp)
20003010:	c0b2                	sw	a2,64(sp)
20003012:	de36                	sw	a3,60(sp)
20003014:	dc3a                	sw	a4,56(sp)
20003016:	da3e                	sw	a5,52(sp)
20003018:	d842                	sw	a6,48(sp)
2000301a:	d646                	sw	a7,44(sp)
2000301c:	d472                	sw	t3,40(sp)
2000301e:	d276                	sw	t4,36(sp)
20003020:	d07a                	sw	t5,32(sp)
20003022:	ce7e                	sw	t6,28(sp)
20003024:	1080                	addi	s0,sp,96
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
20003026:	a56ff0ef          	jal	ra,2000227c <__metal_myhart_id>
2000302a:	872a                	mv	a4,a0
2000302c:	070a                	slli	a4,a4,0x2
2000302e:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20003032:	97ba                	add	a5,a5,a4
20003034:	439c                	lw	a5,0(a5)
20003036:	faf42623          	sw	a5,-84(s0)
2000303a:	fac42783          	lw	a5,-84(s0)
2000303e:	c78d                	beqz	a5,20003068 <metal_lc15_interrupt_vector_handler+0x68>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289 (discriminator 1)
20003040:	fac42503          	lw	a0,-84(s0)
20003044:	9e2ff0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20003048:	faa42423          	sw	a0,-88(s0)
2000304c:	fa842783          	lw	a5,-88(s0)
20003050:	3807a783          	lw	a5,896(a5)
20003054:	faf42223          	sw	a5,-92(s0)
20003058:	fa842783          	lw	a5,-88(s0)
2000305c:	3787a783          	lw	a5,888(a5)
20003060:	fa442583          	lw	a1,-92(s0)
20003064:	457d                	li	a0,31
20003066:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:290
}
20003068:	0001                	nop
2000306a:	40f6                	lw	ra,92(sp)
2000306c:	42e6                	lw	t0,88(sp)
2000306e:	4356                	lw	t1,84(sp)
20003070:	43c6                	lw	t2,80(sp)
20003072:	4436                	lw	s0,76(sp)
20003074:	4526                	lw	a0,72(sp)
20003076:	4596                	lw	a1,68(sp)
20003078:	4606                	lw	a2,64(sp)
2000307a:	56f2                	lw	a3,60(sp)
2000307c:	5762                	lw	a4,56(sp)
2000307e:	57d2                	lw	a5,52(sp)
20003080:	5842                	lw	a6,48(sp)
20003082:	58b2                	lw	a7,44(sp)
20003084:	5e22                	lw	t3,40(sp)
20003086:	5e92                	lw	t4,36(sp)
20003088:	5f02                	lw	t5,32(sp)
2000308a:	4ff2                	lw	t6,28(sp)
2000308c:	6125                	addi	sp,sp,96
2000308e:	30200073          	mret

20003092 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292

metal_vector_mode __metal_controller_interrupt_vector_mode(void) {
20003092:	1101                	addi	sp,sp,-32
20003094:	ce22                	sw	s0,28(sp)
20003096:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:295
    uintptr_t val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
20003098:	305027f3          	csrr	a5,mtvec
2000309c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
    val &= METAL_MTVEC_MASK;
200030a0:	fec42783          	lw	a5,-20(s0)
200030a4:	03f7f793          	andi	a5,a5,63
200030a8:	fef42623          	sw	a5,-20(s0)
200030ac:	fec42703          	lw	a4,-20(s0)
200030b0:	4789                	li	a5,2
200030b2:	00f70d63          	beq	a4,a5,200030cc <__metal_controller_interrupt_vector_mode+0x3a>
200030b6:	fec42703          	lw	a4,-20(s0)
200030ba:	478d                	li	a5,3
200030bc:	00f70a63          	beq	a4,a5,200030d0 <__metal_controller_interrupt_vector_mode+0x3e>
200030c0:	fec42703          	lw	a4,-20(s0)
200030c4:	4785                	li	a5,1
200030c6:	00f70763          	beq	a4,a5,200030d4 <__metal_controller_interrupt_vector_mode+0x42>
200030ca:	a039                	j	200030d8 <__metal_controller_interrupt_vector_mode+0x46>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300

    switch (val) {
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
200030cc:	478d                	li	a5,3
200030ce:	a031                	j	200030da <__metal_controller_interrupt_vector_mode+0x48>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:302
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
200030d0:	4791                	li	a5,4
200030d2:	a021                	j	200030da <__metal_controller_interrupt_vector_mode+0x48>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:304
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
200030d4:	4785                	li	a5,1
200030d6:	a011                	j	200030da <__metal_controller_interrupt_vector_mode+0x48>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    }
    return METAL_DIRECT_MODE;
200030d8:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:307
}
200030da:	853e                	mv	a0,a5
200030dc:	4472                	lw	s0,28(sp)
200030de:	6105                	addi	sp,sp,32
200030e0:	8082                	ret

200030e2 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310

void __metal_controller_interrupt_vector(metal_vector_mode mode,
                                         void *vec_table) {
200030e2:	7179                	addi	sp,sp,-48
200030e4:	d622                	sw	s0,44(sp)
200030e6:	1800                	addi	s0,sp,48
200030e8:	fca42e23          	sw	a0,-36(s0)
200030ec:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:313
    uintptr_t trap_entry, val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
200030f0:	305027f3          	csrr	a5,mtvec
200030f4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
200030f8:	fec42783          	lw	a5,-20(s0)
200030fc:	fc07f793          	andi	a5,a5,-64
20003100:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:315
    trap_entry = (uintptr_t)vec_table;
20003104:	fd842783          	lw	a5,-40(s0)
20003108:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

    switch (mode) {
2000310c:	fdc42703          	lw	a4,-36(s0)
20003110:	4791                	li	a5,4
20003112:	06e7e063          	bltu	a5,a4,20003172 <__metal_controller_interrupt_vector+0x90>
20003116:	fdc42783          	lw	a5,-36(s0)
2000311a:	00279713          	slli	a4,a5,0x2
2000311e:	200067b7          	lui	a5,0x20006
20003122:	17c78793          	addi	a5,a5,380 # 2000617c <__metal_driver_vtable_riscv_clint0+0x5c>
20003126:	97ba                	add	a5,a5,a4
20003128:	439c                	lw	a5,0(a5)
2000312a:	8782                	jr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
2000312c:	fe842783          	lw	a5,-24(s0)
20003130:	30779073          	csrw	mtvt,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:321
        __asm__ volatile("csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC));
20003134:	fec42783          	lw	a5,-20(s0)
20003138:	0027e793          	ori	a5,a5,2
2000313c:	30579073          	csrw	mtvec,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322
        break;
20003140:	a80d                	j	20003172 <__metal_controller_interrupt_vector+0x90>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
20003142:	fe842783          	lw	a5,-24(s0)
20003146:	30779073          	csrw	mtvt,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC_VECTORED));
2000314a:	fec42783          	lw	a5,-20(s0)
2000314e:	0037e793          	ori	a5,a5,3
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        __asm__ volatile(
20003152:	30579073          	csrw	mtvec,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:327
        break;
20003156:	a831                	j	20003172 <__metal_controller_interrupt_vector+0x90>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:330
    case METAL_VECTOR_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry | METAL_MTVEC_VECTORED));
20003158:	fe842783          	lw	a5,-24(s0)
2000315c:	0017e793          	ori	a5,a5,1
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:329
        __asm__ volatile(
20003160:	30579073          	csrw	mtvec,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331
        break;
20003164:	a039                	j	20003172 <__metal_controller_interrupt_vector+0x90>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    case METAL_DIRECT_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20003166:	fe842783          	lw	a5,-24(s0)
2000316a:	9bf1                	andi	a5,a5,-4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:333
        __asm__ volatile(
2000316c:	30579073          	csrw	mtvec,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:335
        break;
20003170:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:337
    }
}
20003172:	0001                	nop
20003174:	5432                	lw	s0,44(sp)
20003176:	6145                	addi	sp,sp,48
20003178:	8082                	ret

2000317a <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339

int __metal_valid_interrupt_id(int id) {
2000317a:	1101                	addi	sp,sp,-32
2000317c:	ce22                	sw	s0,28(sp)
2000317e:	1000                	addi	s0,sp,32
20003180:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
    switch (id) {
20003184:	fec42783          	lw	a5,-20(s0)
20003188:	17f5                	addi	a5,a5,-3
2000318a:	4771                	li	a4,28
2000318c:	00f76d63          	bltu	a4,a5,200031a6 <__metal_valid_interrupt_id+0x2c>
20003190:	00279713          	slli	a4,a5,0x2
20003194:	200067b7          	lui	a5,0x20006
20003198:	19078793          	addi	a5,a5,400 # 20006190 <__metal_driver_vtable_riscv_clint0+0x70>
2000319c:	97ba                	add	a5,a5,a4
2000319e:	439c                	lw	a5,0(a5)
200031a0:	8782                	jr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:360
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
200031a2:	4785                	li	a5,1
200031a4:	a019                	j	200031aa <__metal_valid_interrupt_id+0x30>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    default:
        break;
200031a6:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:365
    }

    return 0;
200031a8:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
}
200031aa:	853e                	mv	a0,a5
200031ac:	4472                	lw	s0,28(sp)
200031ae:	6105                	addi	sp,sp,32
200031b0:	8082                	ret

200031b2 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:369

int __metal_local_interrupt_enable(struct metal_interrupt *controller,
                                   metal_interrupt_id_e id, int enable) {
200031b2:	7179                	addi	sp,sp,-48
200031b4:	d606                	sw	ra,44(sp)
200031b6:	d422                	sw	s0,40(sp)
200031b8:	1800                	addi	s0,sp,48
200031ba:	fca42e23          	sw	a0,-36(s0)
200031be:	fcb42c23          	sw	a1,-40(s0)
200031c2:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    int rc = 0;
200031c6:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:372

    if (!controller) {
200031ca:	fdc42783          	lw	a5,-36(s0)
200031ce:	e399                	bnez	a5,200031d4 <__metal_local_interrupt_enable+0x22>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373
        return -1;
200031d0:	57fd                	li	a5,-1
200031d2:	a849                	j	20003264 <__metal_local_interrupt_enable+0xb2>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    }

    switch (id) {
200031d4:	fd842703          	lw	a4,-40(s0)
200031d8:	47fd                	li	a5,31
200031da:	08e7e063          	bltu	a5,a4,2000325a <__metal_local_interrupt_enable+0xa8>
200031de:	fd842783          	lw	a5,-40(s0)
200031e2:	00279713          	slli	a4,a5,0x2
200031e6:	200067b7          	lui	a5,0x20006
200031ea:	20478793          	addi	a5,a5,516 # 20006204 <__metal_driver_vtable_riscv_clint0+0xe4>
200031ee:	97ba                	add	a5,a5,a4
200031f0:	439c                	lw	a5,0(a5)
200031f2:	8782                	jr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
200031f4:	fd442783          	lw	a5,-44(s0)
200031f8:	c781                	beqz	a5,20003200 <__metal_local_interrupt_enable+0x4e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:379
            __metal_interrupt_global_enable();
200031fa:	89cff0ef          	jal	ra,20002296 <__metal_interrupt_global_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:383
        } else {
            __metal_interrupt_global_disable();
        }
        break;
200031fe:	a08d                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
            __metal_interrupt_global_disable();
20003200:	8aeff0ef          	jal	ra,200022ae <__metal_interrupt_global_disable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:383
        break;
20003204:	a8b1                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:385
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20003206:	fd442783          	lw	a5,-44(s0)
2000320a:	c781                	beqz	a5,20003212 <__metal_local_interrupt_enable+0x60>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:386
            __metal_interrupt_software_enable();
2000320c:	8baff0ef          	jal	ra,200022c6 <__metal_interrupt_software_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20003210:	a881                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:388
            __metal_interrupt_software_disable();
20003212:	8ccff0ef          	jal	ra,200022de <__metal_interrupt_software_disable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
        break;
20003216:	a0a9                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20003218:	fd442783          	lw	a5,-44(s0)
2000321c:	c781                	beqz	a5,20003224 <__metal_local_interrupt_enable+0x72>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:393
            __metal_interrupt_timer_enable();
2000321e:	8d8ff0ef          	jal	ra,200022f6 <__metal_interrupt_timer_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:397
        } else {
            __metal_interrupt_timer_disable();
        }
        break;
20003222:	a83d                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
            __metal_interrupt_timer_disable();
20003224:	8ecff0ef          	jal	ra,20002310 <__metal_interrupt_timer_disable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:397
        break;
20003228:	a825                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:399
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2000322a:	fd442783          	lw	a5,-44(s0)
2000322e:	c781                	beqz	a5,20003236 <__metal_local_interrupt_enable+0x84>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:400
            __metal_interrupt_external_enable();
20003230:	8faff0ef          	jal	ra,2000232a <__metal_interrupt_external_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20003234:	a035                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:402
            __metal_interrupt_external_disable();
20003236:	910ff0ef          	jal	ra,20002346 <__metal_interrupt_external_disable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
        break;
2000323a:	a01d                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:421
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
2000323c:	fd442783          	lw	a5,-44(s0)
20003240:	c799                	beqz	a5,2000324e <__metal_local_interrupt_enable+0x9c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
            __metal_interrupt_local_enable(id);
20003242:	fd842783          	lw	a5,-40(s0)
20003246:	853e                	mv	a0,a5
20003248:	91aff0ef          	jal	ra,20002362 <__metal_interrupt_local_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
2000324c:	a811                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
            __metal_interrupt_local_disable(id);
2000324e:	fd842783          	lw	a5,-40(s0)
20003252:	853e                	mv	a0,a5
20003254:	93aff0ef          	jal	ra,2000238e <__metal_interrupt_local_disable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
        break;
20003258:	a021                	j	20003260 <__metal_local_interrupt_enable+0xae>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:428
    default:
        rc = -1;
2000325a:	57fd                	li	a5,-1
2000325c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:430
    }
    return rc;
20003260:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:431
}
20003264:	853e                	mv	a0,a5
20003266:	50b2                	lw	ra,44(sp)
20003268:	5422                	lw	s0,40(sp)
2000326a:	6145                	addi	sp,sp,48
2000326c:	8082                	ret

2000326e <__metal_exception_register>:
__metal_exception_register():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:434

int __metal_exception_register(struct metal_interrupt *controller, int ecode,
                               metal_exception_handler_t isr) {
2000326e:	7179                	addi	sp,sp,-48
20003270:	d622                	sw	s0,44(sp)
20003272:	1800                	addi	s0,sp,48
20003274:	fca42e23          	sw	a0,-36(s0)
20003278:	fcb42c23          	sw	a1,-40(s0)
2000327c:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20003280:	fdc42783          	lw	a5,-36(s0)
20003284:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20003288:	fd842703          	lw	a4,-40(s0)
2000328c:	47ad                	li	a5,11
2000328e:	02e7c263          	blt	a5,a4,200032b2 <__metal_exception_register+0x44>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437 (discriminator 1)
20003292:	fd442783          	lw	a5,-44(s0)
20003296:	cf91                	beqz	a5,200032b2 <__metal_exception_register+0x44>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:438
        intc->metal_exception_table[ecode] = isr;
20003298:	fec42703          	lw	a4,-20(s0)
2000329c:	fd842783          	lw	a5,-40(s0)
200032a0:	0e078793          	addi	a5,a5,224
200032a4:	078a                	slli	a5,a5,0x2
200032a6:	97ba                	add	a5,a5,a4
200032a8:	fd442703          	lw	a4,-44(s0)
200032ac:	c798                	sw	a4,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
        return 0;
200032ae:	4781                	li	a5,0
200032b0:	a011                	j	200032b4 <__metal_exception_register+0x46>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    }
    return -1;
200032b2:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:442
}
200032b4:	853e                	mv	a0,a5
200032b6:	5432                	lw	s0,44(sp)
200032b8:	6145                	addi	sp,sp,48
200032ba:	8082                	ret

200032bc <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:446

extern void early_trap_vector(void);
void __metal_driver_riscv_cpu_controller_interrupt_init(
    struct metal_interrupt *controller) {
200032bc:	7179                	addi	sp,sp,-48
200032be:	d606                	sw	ra,44(sp)
200032c0:	d422                	sw	s0,40(sp)
200032c2:	1800                	addi	s0,sp,48
200032c4:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
200032c8:	fdc42783          	lw	a5,-36(s0)
200032cc:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:449

    if (!intc->init_done) {
200032d0:	fe442783          	lw	a5,-28(s0)
200032d4:	43dc                	lw	a5,4(a5)
200032d6:	efdd                	bnez	a5,20003394 <__metal_driver_riscv_cpu_controller_interrupt_init+0xd8>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
200032d8:	fe042623          	sw	zero,-20(s0)
200032dc:	a0b9                	j	2000332a <__metal_driver_riscv_cpu_controller_interrupt_init+0x6e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
200032de:	fe442683          	lw	a3,-28(s0)
200032e2:	fec42703          	lw	a4,-20(s0)
200032e6:	87ba                	mv	a5,a4
200032e8:	0786                	slli	a5,a5,0x1
200032ea:	97ba                	add	a5,a5,a4
200032ec:	078e                	slli	a5,a5,0x3
200032ee:	97b6                	add	a5,a5,a3
200032f0:	0807a823          	sw	zero,144(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:453 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
200032f4:	fe442683          	lw	a3,-28(s0)
200032f8:	fec42703          	lw	a4,-20(s0)
200032fc:	87ba                	mv	a5,a4
200032fe:	0786                	slli	a5,a5,0x1
20003300:	97ba                	add	a5,a5,a4
20003302:	078e                	slli	a5,a5,0x3
20003304:	97b6                	add	a5,a5,a3
20003306:	0807aa23          	sw	zero,148(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
2000330a:	fe442683          	lw	a3,-28(s0)
2000330e:	fec42703          	lw	a4,-20(s0)
20003312:	87ba                	mv	a5,a4
20003314:	0786                	slli	a5,a5,0x1
20003316:	97ba                	add	a5,a5,a4
20003318:	078e                	slli	a5,a5,0x3
2000331a:	97b6                	add	a5,a5,a3
2000331c:	0807ac23          	sw	zero,152(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20003320:	fec42783          	lw	a5,-20(s0)
20003324:	0785                	addi	a5,a5,1
20003326:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451 (discriminator 1)
2000332a:	fec42703          	lw	a4,-20(s0)
2000332e:	47fd                	li	a5,31
20003330:	fae7d7e3          	bge	a5,a4,200032de <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
        }

        for (int i = 0; i < METAL_MAX_ME; i++) {
20003334:	fe042423          	sw	zero,-24(s0)
20003338:	a01d                	j	2000335e <__metal_driver_riscv_cpu_controller_interrupt_init+0xa2>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458 (discriminator 3)
            intc->metal_exception_table[i] = __metal_default_exception_handler;
2000333a:	fe442703          	lw	a4,-28(s0)
2000333e:	fe842783          	lw	a5,-24(s0)
20003342:	0e078793          	addi	a5,a5,224
20003346:	078a                	slli	a5,a5,0x2
20003348:	97ba                	add	a5,a5,a4
2000334a:	20002737          	lui	a4,0x20002
2000334e:	3ba70713          	addi	a4,a4,954 # 200023ba <__metal_default_exception_handler>
20003352:	c798                	sw	a4,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457 (discriminator 3)
        for (int i = 0; i < METAL_MAX_ME; i++) {
20003354:	fe842783          	lw	a5,-24(s0)
20003358:	0785                	addi	a5,a5,1
2000335a:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457 (discriminator 1)
2000335e:	fe842703          	lw	a4,-24(s0)
20003362:	47ad                	li	a5,11
20003364:	fce7dbe3          	bge	a5,a4,2000333a <__metal_driver_riscv_cpu_controller_interrupt_init+0x7e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:467
         * Set the real trap handler if the value of mtvec is equal to
         * early_trap_vector. If mtvec is not equal to early_trap_vector,
         * that means user has own trap handler, then we don't overwrite it.
         */
        uintptr_t mtvec;
        __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
20003368:	305027f3          	csrr	a5,mtvec
2000336c:	fef42023          	sw	a5,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
        if (mtvec == (uintptr_t)&early_trap_vector) {
20003370:	200007b7          	lui	a5,0x20000
20003374:	06478793          	addi	a5,a5,100 # 20000064 <early_trap_vector>
20003378:	fe042703          	lw	a4,-32(s0)
2000337c:	00f71863          	bne	a4,a5,2000338c <__metal_driver_riscv_cpu_controller_interrupt_init+0xd0>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
            __metal_controller_interrupt_vector(
20003380:	200027b7          	lui	a5,0x20002
20003384:	60078593          	addi	a1,a5,1536 # 20002600 <__metal_exception_handler>
20003388:	4501                	li	a0,0
2000338a:	3ba1                	jal	200030e2 <__metal_controller_interrupt_vector>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:473
                METAL_DIRECT_MODE,
                (void *)(uintptr_t)&__metal_exception_handler);
        }
        intc->init_done = 1;
2000338c:	fe442783          	lw	a5,-28(s0)
20003390:	4705                	li	a4,1
20003392:	c3d8                	sw	a4,4(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    }
}
20003394:	0001                	nop
20003396:	50b2                	lw	ra,44(sp)
20003398:	5422                	lw	s0,40(sp)
2000339a:	6145                	addi	sp,sp,48
2000339c:	8082                	ret

2000339e <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:479

int __metal_driver_riscv_cpu_controller_interrupt_register(
    struct metal_interrupt *controller, int id, metal_interrupt_handler_t isr,
    void *priv) {
2000339e:	7179                	addi	sp,sp,-48
200033a0:	d606                	sw	ra,44(sp)
200033a2:	d422                	sw	s0,40(sp)
200033a4:	1800                	addi	s0,sp,48
200033a6:	fca42e23          	sw	a0,-36(s0)
200033aa:	fcb42c23          	sw	a1,-40(s0)
200033ae:	fcc42a23          	sw	a2,-44(s0)
200033b2:	fcd42823          	sw	a3,-48(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:480
    int rc = 0;
200033b6:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:481
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
200033ba:	fdc42783          	lw	a5,-36(s0)
200033be:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:483

    if (!__metal_valid_interrupt_id(id)) {
200033c2:	fd842503          	lw	a0,-40(s0)
200033c6:	3b55                	jal	2000317a <__metal_valid_interrupt_id>
200033c8:	87aa                	mv	a5,a0
200033ca:	e399                	bnez	a5,200033d0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:484
        return -11;
200033cc:	57d5                	li	a5,-11
200033ce:	aa11                	j	200034e2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:487
    }

    if (isr) {
200033d0:	fd442783          	lw	a5,-44(s0)
200033d4:	cf85                	beqz	a5,2000340c <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:488
        intc->metal_int_table[id].handler = isr;
200033d6:	fe842683          	lw	a3,-24(s0)
200033da:	fd842703          	lw	a4,-40(s0)
200033de:	87ba                	mv	a5,a4
200033e0:	0786                	slli	a5,a5,0x1
200033e2:	97ba                	add	a5,a5,a4
200033e4:	078e                	slli	a5,a5,0x3
200033e6:	97b6                	add	a5,a5,a3
200033e8:	fd442703          	lw	a4,-44(s0)
200033ec:	08e7a823          	sw	a4,144(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:489
        intc->metal_int_table[id].exint_data = priv;
200033f0:	fe842683          	lw	a3,-24(s0)
200033f4:	fd842703          	lw	a4,-40(s0)
200033f8:	87ba                	mv	a5,a4
200033fa:	0786                	slli	a5,a5,0x1
200033fc:	97ba                	add	a5,a5,a4
200033fe:	078e                	slli	a5,a5,0x3
20003400:	97b6                	add	a5,a5,a3
20003402:	fd042703          	lw	a4,-48(s0)
20003406:	08e7ac23          	sw	a4,152(a5)
2000340a:	a8d1                	j	200034de <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:491
    } else {
        switch (id) {
2000340c:	fd842783          	lw	a5,-40(s0)
20003410:	17f5                	addi	a5,a5,-3
20003412:	4771                	li	a4,28
20003414:	0cf76263          	bltu	a4,a5,200034d8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20003418:	00279713          	slli	a4,a5,0x2
2000341c:	200067b7          	lui	a5,0x20006
20003420:	28478793          	addi	a5,a5,644 # 20006284 <__metal_driver_vtable_riscv_clint0+0x164>
20003424:	97ba                	add	a5,a5,a4
20003426:	439c                	lw	a5,0(a5)
20003428:	8782                	jr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:493
        case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2000342a:	fe842683          	lw	a3,-24(s0)
2000342e:	fd842703          	lw	a4,-40(s0)
20003432:	87ba                	mv	a5,a4
20003434:	0786                	slli	a5,a5,0x1
20003436:	97ba                	add	a5,a5,a4
20003438:	078e                	slli	a5,a5,0x3
2000343a:	97b6                	add	a5,a5,a3
2000343c:	20002737          	lui	a4,0x20002
20003440:	4a670713          	addi	a4,a4,1190 # 200024a6 <__metal_default_sw_handler>
20003444:	08e7a823          	sw	a4,144(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:494
            intc->metal_int_table[id].sub_int = priv;
20003448:	fe842683          	lw	a3,-24(s0)
2000344c:	fd842703          	lw	a4,-40(s0)
20003450:	87ba                	mv	a5,a4
20003452:	0786                	slli	a5,a5,0x1
20003454:	97ba                	add	a5,a5,a4
20003456:	078e                	slli	a5,a5,0x3
20003458:	97b6                	add	a5,a5,a3
2000345a:	fd042703          	lw	a4,-48(s0)
2000345e:	08e7aa23          	sw	a4,148(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
            break;
20003462:	a8b5                	j	200034de <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
        case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20003464:	fe842683          	lw	a3,-24(s0)
20003468:	fd842703          	lw	a4,-40(s0)
2000346c:	87ba                	mv	a5,a4
2000346e:	0786                	slli	a5,a5,0x1
20003470:	97ba                	add	a5,a5,a4
20003472:	078e                	slli	a5,a5,0x3
20003474:	97b6                	add	a5,a5,a3
20003476:	20002737          	lui	a4,0x20002
2000347a:	59870713          	addi	a4,a4,1432 # 20002598 <__metal_default_timer_handler>
2000347e:	08e7a823          	sw	a4,144(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:498
            intc->metal_int_table[id].sub_int = priv;
20003482:	fe842683          	lw	a3,-24(s0)
20003486:	fd842703          	lw	a4,-40(s0)
2000348a:	87ba                	mv	a5,a4
2000348c:	0786                	slli	a5,a5,0x1
2000348e:	97ba                	add	a5,a5,a4
20003490:	078e                	slli	a5,a5,0x3
20003492:	97b6                	add	a5,a5,a3
20003494:	fd042703          	lw	a4,-48(s0)
20003498:	08e7aa23          	sw	a4,148(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:499
            break;
2000349c:	a089                	j	200034de <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:517
        case METAL_INTERRUPT_ID_LC11:
        case METAL_INTERRUPT_ID_LC12:
        case METAL_INTERRUPT_ID_LC13:
        case METAL_INTERRUPT_ID_LC14:
        case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler =
2000349e:	fe842683          	lw	a3,-24(s0)
200034a2:	fd842703          	lw	a4,-40(s0)
200034a6:	87ba                	mv	a5,a4
200034a8:	0786                	slli	a5,a5,0x1
200034aa:	97ba                	add	a5,a5,a4
200034ac:	078e                	slli	a5,a5,0x3
200034ae:	97b6                	add	a5,a5,a3
200034b0:	20002737          	lui	a4,0x20002
200034b4:	3d270713          	addi	a4,a4,978 # 200023d2 <__metal_default_interrupt_handler>
200034b8:	08e7a823          	sw	a4,144(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:519
                __metal_default_interrupt_handler;
            intc->metal_int_table[id].sub_int = priv;
200034bc:	fe842683          	lw	a3,-24(s0)
200034c0:	fd842703          	lw	a4,-40(s0)
200034c4:	87ba                	mv	a5,a4
200034c6:	0786                	slli	a5,a5,0x1
200034c8:	97ba                	add	a5,a5,a4
200034ca:	078e                	slli	a5,a5,0x3
200034cc:	97b6                	add	a5,a5,a3
200034ce:	fd042703          	lw	a4,-48(s0)
200034d2:	08e7aa23          	sw	a4,148(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
            break;
200034d6:	a021                	j	200034de <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
        default:
            rc = -12;
200034d8:	57d1                	li	a5,-12
200034da:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
        }
    }
    return rc;
200034de:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:526
}
200034e2:	853e                	mv	a0,a5
200034e4:	50b2                	lw	ra,44(sp)
200034e6:	5422                	lw	s0,40(sp)
200034e8:	6145                	addi	sp,sp,48
200034ea:	8082                	ret

200034ec <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529

int __metal_driver_riscv_cpu_controller_interrupt_enable(
    struct metal_interrupt *controller, int id) {
200034ec:	1101                	addi	sp,sp,-32
200034ee:	ce06                	sw	ra,28(sp)
200034f0:	cc22                	sw	s0,24(sp)
200034f2:	1000                	addi	s0,sp,32
200034f4:	fea42623          	sw	a0,-20(s0)
200034f8:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
200034fc:	fe842783          	lw	a5,-24(s0)
20003500:	4605                	li	a2,1
20003502:	85be                	mv	a1,a5
20003504:	fec42503          	lw	a0,-20(s0)
20003508:	316d                	jal	200031b2 <__metal_local_interrupt_enable>
2000350a:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:531
}
2000350c:	853e                	mv	a0,a5
2000350e:	40f2                	lw	ra,28(sp)
20003510:	4462                	lw	s0,24(sp)
20003512:	6105                	addi	sp,sp,32
20003514:	8082                	ret

20003516 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534

int __metal_driver_riscv_cpu_controller_interrupt_disable(
    struct metal_interrupt *controller, int id) {
20003516:	1101                	addi	sp,sp,-32
20003518:	ce06                	sw	ra,28(sp)
2000351a:	cc22                	sw	s0,24(sp)
2000351c:	1000                	addi	s0,sp,32
2000351e:	fea42623          	sw	a0,-20(s0)
20003522:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:535
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20003526:	fe842783          	lw	a5,-24(s0)
2000352a:	4601                	li	a2,0
2000352c:	85be                	mv	a1,a5
2000352e:	fec42503          	lw	a0,-20(s0)
20003532:	3141                	jal	200031b2 <__metal_local_interrupt_enable>
20003534:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
}
20003536:	853e                	mv	a0,a5
20003538:	40f2                	lw	ra,28(sp)
2000353a:	4462                	lw	s0,24(sp)
2000353c:	6105                	addi	sp,sp,32
2000353e:	8082                	ret

20003540 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode(
    struct metal_interrupt *controller) {
20003540:	1101                	addi	sp,sp,-32
20003542:	ce06                	sw	ra,28(sp)
20003544:	cc22                	sw	s0,24(sp)
20003546:	1000                	addi	s0,sp,32
20003548:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:569
    return __metal_controller_interrupt_vector_mode();
2000354c:	b47ff0ef          	jal	ra,20003092 <__metal_controller_interrupt_vector_mode>
20003550:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:570
}
20003552:	853e                	mv	a0,a5
20003554:	40f2                	lw	ra,28(sp)
20003556:	4462                	lw	s0,24(sp)
20003558:	6105                	addi	sp,sp,32
2000355a:	8082                	ret

2000355c <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573

int __metal_driver_riscv_cpu_controller_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
2000355c:	1101                	addi	sp,sp,-32
2000355e:	ce06                	sw	ra,28(sp)
20003560:	cc22                	sw	s0,24(sp)
20003562:	1000                	addi	s0,sp,32
20003564:	fea42623          	sw	a0,-20(s0)
20003568:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if (mode == METAL_DIRECT_MODE) {
2000356c:	fe842783          	lw	a5,-24(s0)
20003570:	eb99                	bnez	a5,20003586 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x2a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        __metal_controller_interrupt_vector(
20003572:	200027b7          	lui	a5,0x20002
20003576:	60078593          	addi	a1,a5,1536 # 20002600 <__metal_exception_handler>
2000357a:	fe842503          	lw	a0,-24(s0)
2000357e:	b65ff0ef          	jal	ra,200030e2 <__metal_controller_interrupt_vector>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:578
            mode, (void *)(uintptr_t)&__metal_exception_handler);
        return 0;
20003582:	4781                	li	a5,0
20003584:	a00d                	j	200035a6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x4a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
    }
    if (mode == METAL_VECTOR_MODE) {
20003586:	fe842703          	lw	a4,-24(s0)
2000358a:	4785                	li	a5,1
2000358c:	00f71c63          	bne	a4,a5,200035a4 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x48>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:581
        __metal_controller_interrupt_vector(
20003590:	200067b7          	lui	a5,0x20006
20003594:	f0078593          	addi	a1,a5,-256 # 20005f00 <__metal_vector_table>
20003598:	fe842503          	lw	a0,-24(s0)
2000359c:	b47ff0ef          	jal	ra,200030e2 <__metal_controller_interrupt_vector>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583
            mode, (void *)(uintptr_t)__metal_vector_table);
        return 0;
200035a0:	4781                	li	a5,0
200035a2:	a011                	j	200035a6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x4a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:585
    }
    return -1;
200035a4:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:586
}
200035a6:	853e                	mv	a0,a5
200035a8:	40f2                	lw	ra,28(sp)
200035aa:	4462                	lw	s0,24(sp)
200035ac:	6105                	addi	sp,sp,32
200035ae:	8082                	ret

200035b0 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589

int __metal_driver_riscv_cpu_controller_command_request(
    struct metal_interrupt *controller, int cmd, void *data) {
200035b0:	1101                	addi	sp,sp,-32
200035b2:	ce22                	sw	s0,28(sp)
200035b4:	1000                	addi	s0,sp,32
200035b6:	fea42623          	sw	a0,-20(s0)
200035ba:	feb42423          	sw	a1,-24(s0)
200035be:	fec42223          	sw	a2,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:592
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic
     */
    return 0;
200035c2:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:593
}
200035c4:	853e                	mv	a0,a5
200035c6:	4472                	lw	s0,28(sp)
200035c8:	6105                	addi	sp,sp,32
200035ca:	8082                	ret

200035cc <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:597

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu) {
200035cc:	7139                	addi	sp,sp,-64
200035ce:	de22                	sw	s0,60(sp)
200035d0:	0080                	addi	s0,sp,64
200035d2:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598
    unsigned long long val = 0;
200035d6:	4301                	li	t1,0
200035d8:	4381                	li	t2,0
200035da:	fe642423          	sw	t1,-24(s0)
200035de:	fe742623          	sw	t2,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:604 (discriminator 1)

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    do {
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi));
200035e2:	b8002573          	csrr	a0,mcycleh
200035e6:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605 (discriminator 1)
        __asm__ volatile("csrr %0, mcycle" : "=r"(lo));
200035ea:	b0002573          	csrr	a0,mcycle
200035ee:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:606 (discriminator 1)
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi1));
200035f2:	b8002573          	csrr	a0,mcycleh
200035f6:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:609 (discriminator 1)
        /* hi != hi1 means mcycle overflow during we get value,
         * so we must retry. */
    } while (hi != hi1);
200035fa:	fe442883          	lw	a7,-28(s0)
200035fe:	fdc42503          	lw	a0,-36(s0)
20003602:	fea890e3          	bne	a7,a0,200035e2 <__metal_driver_cpu_mcycle_get+0x16>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611

    val = ((unsigned long long)hi << 32) | lo;
20003606:	fe442503          	lw	a0,-28(s0)
2000360a:	85aa                	mv	a1,a0
2000360c:	4601                	li	a2,0
2000360e:	00059813          	slli	a6,a1,0x0
20003612:	4781                	li	a5,0
20003614:	fe042603          	lw	a2,-32(s0)
20003618:	86b2                	mv	a3,a2
2000361a:	4701                	li	a4,0
2000361c:	00d7e633          	or	a2,a5,a3
20003620:	fec42423          	sw	a2,-24(s0)
20003624:	00e867b3          	or	a5,a6,a4
20003628:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
#else
    __asm__ volatile("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
2000362c:	fe842783          	lw	a5,-24(s0)
20003630:	fec42803          	lw	a6,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617
}
20003634:	853e                	mv	a0,a5
20003636:	85c2                	mv	a1,a6
20003638:	5472                	lw	s0,60(sp)
2000363a:	6121                	addi	sp,sp,64
2000363c:	8082                	ret

2000363e <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu) {
2000363e:	7179                	addi	sp,sp,-48
20003640:	d606                	sw	ra,44(sp)
20003642:	d422                	sw	s0,40(sp)
20003644:	d24a                	sw	s2,36(sp)
20003646:	d04e                	sw	s3,32(sp)
20003648:	1800                	addi	s0,sp,48
2000364a:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
    int timebase;
    if (!cpu) {
2000364e:	fdc42783          	lw	a5,-36(s0)
20003652:	e781                	bnez	a5,2000365a <__metal_driver_cpu_timebase_get+0x1c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:622
        return 0;
20003654:	4901                	li	s2,0
20003656:	4981                	li	s3,0
20003658:	a821                	j	20003670 <__metal_driver_cpu_timebase_get+0x32>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:625
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
2000365a:	fdc42503          	lw	a0,-36(s0)
2000365e:	b9ffe0ef          	jal	ra,200021fc <__metal_driver_cpu_timebase>
20003662:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
    return timebase;
20003666:	fec42783          	lw	a5,-20(s0)
2000366a:	893e                	mv	s2,a5
2000366c:	87fd                	srai	a5,a5,0x1f
2000366e:	89be                	mv	s3,a5
20003670:	87ca                	mv	a5,s2
20003672:	884e                	mv	a6,s3
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:627
}
20003674:	853e                	mv	a0,a5
20003676:	85c2                	mv	a1,a6
20003678:	50b2                	lw	ra,44(sp)
2000367a:	5422                	lw	s0,40(sp)
2000367c:	5912                	lw	s2,36(sp)
2000367e:	5982                	lw	s3,32(sp)
20003680:	6145                	addi	sp,sp,48
20003682:	8082                	ret

20003684 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:629

unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
20003684:	7179                	addi	sp,sp,-48
20003686:	d606                	sw	ra,44(sp)
20003688:	d422                	sw	s0,40(sp)
2000368a:	1800                	addi	s0,sp,48
2000368c:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:630
    unsigned long long time = 0;
20003690:	4781                	li	a5,0
20003692:	4801                	li	a6,0
20003694:	fef42023          	sw	a5,-32(s0)
20003698:	ff042223          	sw	a6,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
2000369c:	fdc42503          	lw	a0,-36(s0)
200036a0:	b87fe0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
200036a4:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:636

    if (intc) {
200036a8:	fec42783          	lw	a5,-20(s0)
200036ac:	c78d                	beqz	a5,200036d6 <__metal_driver_cpu_mtime_get+0x52>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
200036ae:	fec42783          	lw	a5,-20(s0)
200036b2:	13c7a783          	lw	a5,316(a5)
200036b6:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        if (tmr_intc) {
200036ba:	fe842783          	lw	a5,-24(s0)
200036be:	cf81                	beqz	a5,200036d6 <__metal_driver_cpu_mtime_get+0x52>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:639
            tmr_intc->vtable->command_request(tmr_intc, METAL_TIMER_MTIME_GET,
200036c0:	fe842783          	lw	a5,-24(s0)
200036c4:	439c                	lw	a5,0(a5)
200036c6:	43f8                	lw	a4,68(a5)
200036c8:	fe040793          	addi	a5,s0,-32
200036cc:	863e                	mv	a2,a5
200036ce:	4585                	li	a1,1
200036d0:	fe842503          	lw	a0,-24(s0)
200036d4:	9702                	jalr	a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
                                              &time);
        }
    }
    return time;
200036d6:	fe042783          	lw	a5,-32(s0)
200036da:	fe442803          	lw	a6,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:644
}
200036de:	853e                	mv	a0,a5
200036e0:	85c2                	mv	a1,a6
200036e2:	50b2                	lw	ra,44(sp)
200036e4:	5422                	lw	s0,40(sp)
200036e6:	6145                	addi	sp,sp,48
200036e8:	8082                	ret

200036ea <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647

int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time) {
200036ea:	7179                	addi	sp,sp,-48
200036ec:	d606                	sw	ra,44(sp)
200036ee:	d422                	sw	s0,40(sp)
200036f0:	d226                	sw	s1,36(sp)
200036f2:	1800                	addi	s0,sp,48
200036f4:	fca42e23          	sw	a0,-36(s0)
200036f8:	fcb42823          	sw	a1,-48(s0)
200036fc:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
    int rc = -1;
20003700:	57fd                	li	a5,-1
20003702:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
20003706:	fdc42503          	lw	a0,-36(s0)
2000370a:	b1dfe0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
2000370e:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:654

    if (intc) {
20003712:	fe842783          	lw	a5,-24(s0)
20003716:	cf8d                	beqz	a5,20003750 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:655
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20003718:	fe842783          	lw	a5,-24(s0)
2000371c:	13c7a783          	lw	a5,316(a5)
20003720:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:656
        if (tmr_intc) {
20003724:	fe442783          	lw	a5,-28(s0)
20003728:	c785                	beqz	a5,20003750 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:657
            rc = tmr_intc->vtable->mtimecmp_set(
2000372a:	fe442783          	lw	a5,-28(s0)
2000372e:	439c                	lw	a5,0(a5)
20003730:	47a4                	lw	s1,72(a5)
20003732:	fdc42503          	lw	a0,-36(s0)
20003736:	aa3fe0ef          	jal	ra,200021d8 <__metal_driver_cpu_hartid>
2000373a:	87aa                	mv	a5,a0
2000373c:	fd042603          	lw	a2,-48(s0)
20003740:	fd442683          	lw	a3,-44(s0)
20003744:	85be                	mv	a1,a5
20003746:	fe442503          	lw	a0,-28(s0)
2000374a:	9482                	jalr	s1
2000374c:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:661
                tmr_intc, __metal_driver_cpu_hartid(cpu), time);
        }
    }
    return rc;
20003750:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:662
}
20003754:	853e                	mv	a0,a5
20003756:	50b2                	lw	ra,44(sp)
20003758:	5422                	lw	s0,40(sp)
2000375a:	5492                	lw	s1,36(sp)
2000375c:	6145                	addi	sp,sp,48
2000375e:	8082                	ret

20003760 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:665

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu) {
20003760:	1101                	addi	sp,sp,-32
20003762:	ce22                	sw	s0,28(sp)
20003764:	1000                	addi	s0,sp,32
20003766:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:667
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2000376a:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:676
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
2000376e:	853e                	mv	a0,a5
20003770:	4472                	lw	s0,28(sp)
20003772:	6105                	addi	sp,sp,32
20003774:	8082                	ret

20003776 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu) {
20003776:	1101                	addi	sp,sp,-32
20003778:	ce22                	sw	s0,28(sp)
2000377a:	1000                	addi	s0,sp,32
2000377c:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
    return METAL_INTERRUPT_ID_TMR;
20003780:	479d                	li	a5,7
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:680
}
20003782:	853e                	mv	a0,a5
20003784:	4472                	lw	s0,28(sp)
20003786:	6105                	addi	sp,sp,32
20003788:	8082                	ret

2000378a <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu) {
2000378a:	1101                	addi	sp,sp,-32
2000378c:	ce22                	sw	s0,28(sp)
2000378e:	1000                	addi	s0,sp,32
20003790:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20003794:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:694
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20003798:	853e                	mv	a0,a5
2000379a:	4472                	lw	s0,28(sp)
2000379c:	6105                	addi	sp,sp,32
2000379e:	8082                	ret

200037a0 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:696

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu) {
200037a0:	1101                	addi	sp,sp,-32
200037a2:	ce22                	sw	s0,28(sp)
200037a4:	1000                	addi	s0,sp,32
200037a6:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:697
    return METAL_INTERRUPT_ID_SW;
200037aa:	478d                	li	a5,3
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:698
}
200037ac:	853e                	mv	a0,a5
200037ae:	4472                	lw	s0,28(sp)
200037b0:	6105                	addi	sp,sp,32
200037b2:	8082                	ret

200037b4 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:700

int __metal_driver_cpu_set_sw_ipi(struct metal_cpu *cpu, int hartid) {
200037b4:	7179                	addi	sp,sp,-48
200037b6:	d606                	sw	ra,44(sp)
200037b8:	d422                	sw	s0,40(sp)
200037ba:	1800                	addi	s0,sp,48
200037bc:	fca42e23          	sw	a0,-36(s0)
200037c0:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:701
    int rc = -1;
200037c4:	57fd                	li	a5,-1
200037c6:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:705
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
200037ca:	fdc42503          	lw	a0,-36(s0)
200037ce:	a59fe0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
200037d2:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:707

    if (intc) {
200037d6:	fe842783          	lw	a5,-24(s0)
200037da:	c79d                	beqz	a5,20003808 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:708
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
200037dc:	fe842783          	lw	a5,-24(s0)
200037e0:	0dc7a783          	lw	a5,220(a5)
200037e4:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:709
        if (sw_intc) {
200037e8:	fe442783          	lw	a5,-28(s0)
200037ec:	cf91                	beqz	a5,20003808 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:710
            rc = sw_intc->vtable->command_request(
200037ee:	fe442783          	lw	a5,-28(s0)
200037f2:	439c                	lw	a5,0(a5)
200037f4:	43f8                	lw	a4,68(a5)
200037f6:	fd840793          	addi	a5,s0,-40
200037fa:	863e                	mv	a2,a5
200037fc:	458d                	li	a1,3
200037fe:	fe442503          	lw	a0,-28(s0)
20003802:	9702                	jalr	a4
20003804:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:714
                sw_intc, METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20003808:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:715
}
2000380c:	853e                	mv	a0,a5
2000380e:	50b2                	lw	ra,44(sp)
20003810:	5422                	lw	s0,40(sp)
20003812:	6145                	addi	sp,sp,48
20003814:	8082                	ret

20003816 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:717

int __metal_driver_cpu_clear_sw_ipi(struct metal_cpu *cpu, int hartid) {
20003816:	7179                	addi	sp,sp,-48
20003818:	d606                	sw	ra,44(sp)
2000381a:	d422                	sw	s0,40(sp)
2000381c:	1800                	addi	s0,sp,48
2000381e:	fca42e23          	sw	a0,-36(s0)
20003822:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:718
    int rc = -1;
20003826:	57fd                	li	a5,-1
20003828:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
2000382c:	fdc42503          	lw	a0,-36(s0)
20003830:	9f7fe0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20003834:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724

    if (intc) {
20003838:	fe842783          	lw	a5,-24(s0)
2000383c:	c79d                	beqz	a5,2000386a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:725
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2000383e:	fe842783          	lw	a5,-24(s0)
20003842:	0dc7a783          	lw	a5,220(a5)
20003846:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:726
        if (sw_intc) {
2000384a:	fe442783          	lw	a5,-28(s0)
2000384e:	cf91                	beqz	a5,2000386a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:727
            rc = sw_intc->vtable->command_request(
20003850:	fe442783          	lw	a5,-28(s0)
20003854:	439c                	lw	a5,0(a5)
20003856:	43f8                	lw	a4,68(a5)
20003858:	fd840793          	addi	a5,s0,-40
2000385c:	863e                	mv	a2,a5
2000385e:	4589                	li	a1,2
20003860:	fe442503          	lw	a0,-28(s0)
20003864:	9702                	jalr	a4
20003866:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731
                sw_intc, METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2000386a:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
}
2000386e:	853e                	mv	a0,a5
20003870:	50b2                	lw	ra,44(sp)
20003872:	5422                	lw	s0,40(sp)
20003874:	6145                	addi	sp,sp,48
20003876:	8082                	ret

20003878 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:734

int __metal_driver_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
20003878:	7179                	addi	sp,sp,-48
2000387a:	d606                	sw	ra,44(sp)
2000387c:	d422                	sw	s0,40(sp)
2000387e:	1800                	addi	s0,sp,48
20003880:	fca42e23          	sw	a0,-36(s0)
20003884:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    int rc = 0;
20003888:	fe042623          	sw	zero,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
2000388c:	fdc42503          	lw	a0,-36(s0)
20003890:	997fe0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20003894:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:741

    if (intc) {
20003898:	fe842783          	lw	a5,-24(s0)
2000389c:	c79d                	beqz	a5,200038ca <__metal_driver_cpu_get_msip+0x52>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:742
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2000389e:	fe842783          	lw	a5,-24(s0)
200038a2:	0dc7a783          	lw	a5,220(a5)
200038a6:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:743
        if (sw_intc) {
200038aa:	fe442783          	lw	a5,-28(s0)
200038ae:	cf91                	beqz	a5,200038ca <__metal_driver_cpu_get_msip+0x52>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744
            rc = sw_intc->vtable->command_request(
200038b0:	fe442783          	lw	a5,-28(s0)
200038b4:	439c                	lw	a5,0(a5)
200038b6:	43f8                	lw	a4,68(a5)
200038b8:	fd840793          	addi	a5,s0,-40
200038bc:	863e                	mv	a2,a5
200038be:	4591                	li	a1,4
200038c0:	fe442503          	lw	a0,-28(s0)
200038c4:	9702                	jalr	a4
200038c6:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:748
                sw_intc, METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
200038ca:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:749
}
200038ce:	853e                	mv	a0,a5
200038d0:	50b2                	lw	ra,44(sp)
200038d2:	5422                	lw	s0,40(sp)
200038d4:	6145                	addi	sp,sp,48
200038d6:	8082                	ret

200038d8 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu) {
200038d8:	1101                	addi	sp,sp,-32
200038da:	ce06                	sw	ra,28(sp)
200038dc:	cc22                	sw	s0,24(sp)
200038de:	1000                	addi	s0,sp,32
200038e0:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    return __metal_driver_cpu_interrupt_controller(cpu);
200038e4:	fec42503          	lw	a0,-20(s0)
200038e8:	93ffe0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
200038ec:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:754
}
200038ee:	853e                	mv	a0,a5
200038f0:	40f2                	lw	ra,28(sp)
200038f2:	4462                	lw	s0,24(sp)
200038f4:	6105                	addi	sp,sp,32
200038f6:	8082                	ret

200038f8 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
    }
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
                                          metal_exception_handler_t isr) {
200038f8:	7179                	addi	sp,sp,-48
200038fa:	d606                	sw	ra,44(sp)
200038fc:	d422                	sw	s0,40(sp)
200038fe:	1800                	addi	s0,sp,48
20003900:	fca42e23          	sw	a0,-36(s0)
20003904:	fcb42c23          	sw	a1,-40(s0)
20003908:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
2000390c:	fdc42503          	lw	a0,-36(s0)
20003910:	917fe0ef          	jal	ra,20002226 <__metal_driver_cpu_interrupt_controller>
20003914:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780

    if (intc) {
20003918:	fec42783          	lw	a5,-20(s0)
2000391c:	cb99                	beqz	a5,20003932 <__metal_driver_cpu_exception_register+0x3a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:781
        return __metal_exception_register((struct metal_interrupt *)intc, ecode,
2000391e:	fd442603          	lw	a2,-44(s0)
20003922:	fd842583          	lw	a1,-40(s0)
20003926:	fec42503          	lw	a0,-20(s0)
2000392a:	945ff0ef          	jal	ra,2000326e <__metal_exception_register>
2000392e:	87aa                	mv	a5,a0
20003930:	a011                	j	20003934 <__metal_driver_cpu_exception_register+0x3c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
                                          isr);
    }
    return -1;
20003932:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:785
}
20003934:	853e                	mv	a0,a5
20003936:	50b2                	lw	ra,44(sp)
20003938:	5422                	lw	s0,40(sp)
2000393a:	6145                	addi	sp,sp,48
2000393c:	8082                	ret

2000393e <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:788

int __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu,
                                              uintptr_t epc) {
2000393e:	1101                	addi	sp,sp,-32
20003940:	ce22                	sw	s0,28(sp)
20003942:	1000                	addi	s0,sp,32
20003944:	fea42623          	sw	a0,-20(s0)
20003948:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:794
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short *)epc & METAL_INSN_LENGTH_MASK) ==
2000394c:	fe842783          	lw	a5,-24(s0)
20003950:	0007d783          	lhu	a5,0(a5)
20003954:	0037f713          	andi	a4,a5,3
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
            METAL_INSN_NOT_COMPRESSED)
               ? 4
               : 2;
20003958:	478d                	li	a5,3
2000395a:	00f71463          	bne	a4,a5,20003962 <__metal_driver_cpu_get_instruction_length+0x24>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797 (discriminator 1)
2000395e:	4791                	li	a5,4
20003960:	a011                	j	20003964 <__metal_driver_cpu_get_instruction_length+0x26>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797 (discriminator 2)
20003962:	4789                	li	a5,2
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:798 (discriminator 5)
}
20003964:	853e                	mv	a0,a5
20003966:	4472                	lw	s0,28(sp)
20003968:	6105                	addi	sp,sp,32
2000396a:	8082                	ret

2000396c <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

uintptr_t __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu) {
2000396c:	7179                	addi	sp,sp,-48
2000396e:	d622                	sw	s0,44(sp)
20003970:	1800                	addi	s0,sp,48
20003972:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:802
    uintptr_t mepc;
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
20003976:	341027f3          	csrr	a5,mepc
2000397a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:803
    return mepc;
2000397e:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
}
20003982:	853e                	mv	a0,a5
20003984:	5432                	lw	s0,44(sp)
20003986:	6145                	addi	sp,sp,48
20003988:	8082                	ret

2000398a <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

int __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc) {
2000398a:	1101                	addi	sp,sp,-32
2000398c:	ce22                	sw	s0,28(sp)
2000398e:	1000                	addi	s0,sp,32
20003990:	fea42623          	sw	a0,-20(s0)
20003994:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
    __asm__ volatile("csrw mepc, %0" ::"r"(mepc));
20003998:	fe842783          	lw	a5,-24(s0)
2000399c:	34179073          	csrw	mepc,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
    return 0;
200039a0:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
}
200039a2:	853e                	mv	a0,a5
200039a4:	4472                	lw	s0,28(sp)
200039a6:	6105                	addi	sp,sp,32
200039a8:	8082                	ret

200039aa <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:305



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
200039aa:	1101                	addi	sp,sp,-32
200039ac:	ce22                	sw	s0,28(sp)
200039ae:	1000                	addi	s0,sp,32
200039b0:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:306
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200039b4:	fec42703          	lw	a4,-20(s0)
200039b8:	800007b7          	lui	a5,0x80000
200039bc:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecd4>
200039c0:	00f71563          	bne	a4,a5,200039ca <__metal_driver_sifive_plic0_control_base+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:307
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
200039c4:	0c0007b7          	lui	a5,0xc000
200039c8:	a011                	j	200039cc <__metal_driver_sifive_plic0_control_base+0x22>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:310
	}
	else {
		return 0;
200039ca:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:312
	}
}
200039cc:	853e                	mv	a0,a5
200039ce:	4472                	lw	s0,28(sp)
200039d0:	6105                	addi	sp,sp,32
200039d2:	8082                	ret

200039d4 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:325
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
200039d4:	1101                	addi	sp,sp,-32
200039d6:	ce22                	sw	s0,28(sp)
200039d8:	1000                	addi	s0,sp,32
200039da:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:326
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200039de:	fec42703          	lw	a4,-20(s0)
200039e2:	800007b7          	lui	a5,0x80000
200039e6:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecd4>
200039ea:	00f71563          	bne	a4,a5,200039f4 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:327
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
200039ee:	03500793          	li	a5,53
200039f2:	a011                	j	200039f6 <__metal_driver_sifive_plic0_num_interrupts+0x22>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:330
	}
	else {
		return 0;
200039f4:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:332
	}
}
200039f6:	853e                	mv	a0,a5
200039f8:	4472                	lw	s0,28(sp)
200039fa:	6105                	addi	sp,sp,32
200039fc:	8082                	ret

200039fe <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:335

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
200039fe:	1101                	addi	sp,sp,-32
20003a00:	ce22                	sw	s0,28(sp)
20003a02:	1000                	addi	s0,sp,32
20003a04:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:336
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20003a08:	fec42703          	lw	a4,-20(s0)
20003a0c:	800007b7          	lui	a5,0x80000
20003a10:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecd4>
20003a14:	00f71463          	bne	a4,a5,20003a1c <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:337
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20003a18:	479d                	li	a5,7
20003a1a:	a011                	j	20003a1e <__metal_driver_sifive_plic0_max_priority+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:340
	}
	else {
		return 0;
20003a1c:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:342
	}
}
20003a1e:	853e                	mv	a0,a5
20003a20:	4472                	lw	s0,28(sp)
20003a22:	6105                	addi	sp,sp,32
20003a24:	8082                	ret

20003a26 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:345

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20003a26:	1101                	addi	sp,sp,-32
20003a28:	ce22                	sw	s0,28(sp)
20003a2a:	1000                	addi	s0,sp,32
20003a2c:	fea42623          	sw	a0,-20(s0)
20003a30:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:346
	if (idx == 0) {
20003a34:	fe842783          	lw	a5,-24(s0)
20003a38:	e791                	bnez	a5,20003a44 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:347
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20003a3a:	800007b7          	lui	a5,0x80000
20003a3e:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe91c>
20003a42:	a011                	j	20003a46 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:350
	}
	else {
		return NULL;
20003a44:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:352
	}
}
20003a46:	853e                	mv	a0,a5
20003a48:	4472                	lw	s0,28(sp)
20003a4a:	6105                	addi	sp,sp,32
20003a4c:	8082                	ret

20003a4e <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:355

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20003a4e:	1101                	addi	sp,sp,-32
20003a50:	ce22                	sw	s0,28(sp)
20003a52:	1000                	addi	s0,sp,32
20003a54:	fea42623          	sw	a0,-20(s0)
20003a58:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:356
	if (idx == 0) {
20003a5c:	fe842783          	lw	a5,-24(s0)
20003a60:	e399                	bnez	a5,20003a66 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:357
		return 11;
20003a62:	47ad                	li	a5,11
20003a64:	a011                	j	20003a68 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:360
	}
	else {
		return 0;
20003a66:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:362
	}
}
20003a68:	853e                	mv	a0,a5
20003a6a:	4472                	lw	s0,28(sp)
20003a6c:	6105                	addi	sp,sp,32
20003a6e:	8082                	ret

20003a70 <__metal_driver_sifive_plic0_context_ids>:
__metal_driver_sifive_plic0_context_ids():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:365

static __inline__ int __metal_driver_sifive_plic0_context_ids(int hartid)
{
20003a70:	1101                	addi	sp,sp,-32
20003a72:	ce22                	sw	s0,28(sp)
20003a74:	1000                	addi	s0,sp,32
20003a76:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:366
	if (hartid == 0) {
20003a7a:	fec42783          	lw	a5,-20(s0)
20003a7e:	e399                	bnez	a5,20003a84 <__metal_driver_sifive_plic0_context_ids+0x14>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:367
		return 0;
20003a80:	4781                	li	a5,0
20003a82:	a011                	j	20003a86 <__metal_driver_sifive_plic0_context_ids+0x16>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:370
	}
	else {
		return -1;
20003a84:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:372
	}
}
20003a86:	853e                	mv	a0,a5
20003a88:	4472                	lw	s0,28(sp)
20003a8a:	6105                	addi	sp,sp,32
20003a8c:	8082                	ret

20003a8e <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
#include <metal/machine.h>
#include <metal/shutdown.h>

unsigned int
__metal_plic0_claim_interrupt(struct __metal_driver_riscv_plic0 *plic,
                              int context_id) {
20003a8e:	7179                	addi	sp,sp,-48
20003a90:	d606                	sw	ra,44(sp)
20003a92:	d422                	sw	s0,40(sp)
20003a94:	1800                	addi	s0,sp,48
20003a96:	fca42e23          	sw	a0,-36(s0)
20003a9a:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:17
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
20003a9e:	fdc42503          	lw	a0,-36(s0)
20003aa2:	3721                	jal	200039aa <__metal_driver_sifive_plic0_control_base>
20003aa4:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:19
        (struct metal_interrupt *)plic);
    return __METAL_ACCESS_ONCE(
20003aa8:	fd842783          	lw	a5,-40(s0)
20003aac:	00c79713          	slli	a4,a5,0xc
20003ab0:	fec42783          	lw	a5,-20(s0)
20003ab4:	973e                	add	a4,a4,a5
20003ab6:	002007b7          	lui	a5,0x200
20003aba:	0791                	addi	a5,a5,4
20003abc:	97ba                	add	a5,a5,a4
20003abe:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM));
}
20003ac0:	853e                	mv	a0,a5
20003ac2:	50b2                	lw	ra,44(sp)
20003ac4:	5422                	lw	s0,40(sp)
20003ac6:	6145                	addi	sp,sp,48
20003ac8:	8082                	ret

20003aca <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
                                      int context_id, unsigned int id) {
20003aca:	7179                	addi	sp,sp,-48
20003acc:	d606                	sw	ra,44(sp)
20003ace:	d422                	sw	s0,40(sp)
20003ad0:	1800                	addi	s0,sp,48
20003ad2:	fca42e23          	sw	a0,-36(s0)
20003ad6:	fcb42c23          	sw	a1,-40(s0)
20003ada:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:27
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
20003ade:	fdc42503          	lw	a0,-36(s0)
20003ae2:	35e1                	jal	200039aa <__metal_driver_sifive_plic0_control_base>
20003ae4:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29
        (struct metal_interrupt *)plic);
    __METAL_ACCESS_ONCE(
20003ae8:	fd842783          	lw	a5,-40(s0)
20003aec:	00c79713          	slli	a4,a5,0xc
20003af0:	fec42783          	lw	a5,-20(s0)
20003af4:	973e                	add	a4,a4,a5
20003af6:	002007b7          	lui	a5,0x200
20003afa:	0791                	addi	a5,a5,4
20003afc:	97ba                	add	a5,a5,a4
20003afe:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM)) = id;
20003b00:	fd442783          	lw	a5,-44(s0)
20003b04:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
}
20003b06:	0001                	nop
20003b08:	50b2                	lw	ra,44(sp)
20003b0a:	5422                	lw	s0,40(sp)
20003b0c:	6145                	addi	sp,sp,48
20003b0e:	8082                	ret

20003b10 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:36

int __metal_plic0_set_threshold(struct metal_interrupt *controller,
                                int context_id, unsigned int threshold) {
20003b10:	7179                	addi	sp,sp,-48
20003b12:	d606                	sw	ra,44(sp)
20003b14:	d422                	sw	s0,40(sp)
20003b16:	1800                	addi	s0,sp,48
20003b18:	fca42e23          	sw	a0,-36(s0)
20003b1c:	fcb42c23          	sw	a1,-40(s0)
20003b20:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
20003b24:	fdc42503          	lw	a0,-36(s0)
20003b28:	3549                	jal	200039aa <__metal_driver_sifive_plic0_control_base>
20003b2a:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:39
    __METAL_ACCESS_ONCE(
20003b2e:	fd842783          	lw	a5,-40(s0)
20003b32:	00c79713          	slli	a4,a5,0xc
20003b36:	fec42783          	lw	a5,-20(s0)
20003b3a:	973e                	add	a4,a4,a5
20003b3c:	002007b7          	lui	a5,0x200
20003b40:	97ba                	add	a5,a5,a4
20003b42:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD)) = threshold;
20003b44:	fd442783          	lw	a5,-44(s0)
20003b48:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:43
    return 0;
20003b4a:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:44
}
20003b4c:	853e                	mv	a0,a5
20003b4e:	50b2                	lw	ra,44(sp)
20003b50:	5422                	lw	s0,40(sp)
20003b52:	6145                	addi	sp,sp,48
20003b54:	8082                	ret

20003b56 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller,
                                         int context_id) {
20003b56:	7179                	addi	sp,sp,-48
20003b58:	d606                	sw	ra,44(sp)
20003b5a:	d422                	sw	s0,40(sp)
20003b5c:	1800                	addi	s0,sp,48
20003b5e:	fca42e23          	sw	a0,-36(s0)
20003b62:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
20003b66:	fdc42503          	lw	a0,-36(s0)
20003b6a:	3581                	jal	200039aa <__metal_driver_sifive_plic0_control_base>
20003b6c:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:50
    return __METAL_ACCESS_ONCE(
20003b70:	fd842783          	lw	a5,-40(s0)
20003b74:	00c79713          	slli	a4,a5,0xc
20003b78:	fec42783          	lw	a5,-20(s0)
20003b7c:	973e                	add	a4,a4,a5
20003b7e:	002007b7          	lui	a5,0x200
20003b82:	97ba                	add	a5,a5,a4
20003b84:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD));
}
20003b86:	853e                	mv	a0,a5
20003b88:	50b2                	lw	ra,44(sp)
20003b8a:	5422                	lw	s0,40(sp)
20003b8c:	6145                	addi	sp,sp,48
20003b8e:	8082                	ret

20003b90 <__metal_driver_riscv_plic0_set_priority>:
__metal_driver_riscv_plic0_set_priority():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:57

int __metal_driver_riscv_plic0_set_priority(struct metal_interrupt *controller,
                                            int id, unsigned int priority) {
20003b90:	7179                	addi	sp,sp,-48
20003b92:	d606                	sw	ra,44(sp)
20003b94:	d422                	sw	s0,40(sp)
20003b96:	1800                	addi	s0,sp,48
20003b98:	fca42e23          	sw	a0,-36(s0)
20003b9c:	fcb42c23          	sw	a1,-40(s0)
20003ba0:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
20003ba4:	fdc42503          	lw	a0,-36(s0)
20003ba8:	3509                	jal	200039aa <__metal_driver_sifive_plic0_control_base>
20003baa:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:60
        (struct metal_interrupt *)controller);
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority(
20003bae:	fdc42503          	lw	a0,-36(s0)
20003bb2:	35b1                	jal	200039fe <__metal_driver_sifive_plic0_max_priority>
20003bb4:	87aa                	mv	a5,a0
20003bb6:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:62
        (struct metal_interrupt *)controller);
    if ((max_priority) && (priority < max_priority)) {
20003bba:	fe842783          	lw	a5,-24(s0)
20003bbe:	c785                	beqz	a5,20003be6 <__metal_driver_riscv_plic0_set_priority+0x56>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:62 (discriminator 1)
20003bc0:	fd442703          	lw	a4,-44(s0)
20003bc4:	fe842783          	lw	a5,-24(s0)
20003bc8:	00f77f63          	bgeu	a4,a5,20003be6 <__metal_driver_riscv_plic0_set_priority+0x56>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:63
        __METAL_ACCESS_ONCE(
20003bcc:	fd842783          	lw	a5,-40(s0)
20003bd0:	078a                	slli	a5,a5,0x2
20003bd2:	873e                	mv	a4,a5
20003bd4:	fec42783          	lw	a5,-20(s0)
20003bd8:	97ba                	add	a5,a5,a4
20003bda:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:65
            (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                               (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) =
20003bdc:	fd442783          	lw	a5,-44(s0)
20003be0:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67
            priority;
        return 0;
20003be2:	4781                	li	a5,0
20003be4:	a011                	j	20003be8 <__metal_driver_riscv_plic0_set_priority+0x58>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    }
    return -1;
20003be6:	57fd                	li	a5,-1
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:70
}
20003be8:	853e                	mv	a0,a5
20003bea:	50b2                	lw	ra,44(sp)
20003bec:	5422                	lw	s0,40(sp)
20003bee:	6145                	addi	sp,sp,48
20003bf0:	8082                	ret

20003bf2 <__metal_driver_riscv_plic0_get_priority>:
__metal_driver_riscv_plic0_get_priority():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74

unsigned int
__metal_driver_riscv_plic0_get_priority(struct metal_interrupt *controller,
                                        int id) {
20003bf2:	7179                	addi	sp,sp,-48
20003bf4:	d606                	sw	ra,44(sp)
20003bf6:	d422                	sw	s0,40(sp)
20003bf8:	1800                	addi	s0,sp,48
20003bfa:	fca42e23          	sw	a0,-36(s0)
20003bfe:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
20003c02:	fdc42503          	lw	a0,-36(s0)
20003c06:	3355                	jal	200039aa <__metal_driver_sifive_plic0_control_base>
20003c08:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78

    return __METAL_ACCESS_ONCE(
20003c0c:	fd842783          	lw	a5,-40(s0)
20003c10:	078a                	slli	a5,a5,0x2
20003c12:	873e                	mv	a4,a5
20003c14:	fec42783          	lw	a5,-20(s0)
20003c18:	97ba                	add	a5,a5,a4
20003c1a:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                           (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20003c1c:	853e                	mv	a0,a5
20003c1e:	50b2                	lw	ra,44(sp)
20003c20:	5422                	lw	s0,40(sp)
20003c22:	6145                	addi	sp,sp,48
20003c24:	8082                	ret

20003c26 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:84

int __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic,
                         int context_id, int id, int enable) {
20003c26:	7179                	addi	sp,sp,-48
20003c28:	d606                	sw	ra,44(sp)
20003c2a:	d422                	sw	s0,40(sp)
20003c2c:	1800                	addi	s0,sp,48
20003c2e:	fca42e23          	sw	a0,-36(s0)
20003c32:	fcb42c23          	sw	a1,-40(s0)
20003c36:	fcc42a23          	sw	a2,-44(s0)
20003c3a:	fcd42823          	sw	a3,-48(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
20003c3e:	fdc42503          	lw	a0,-36(s0)
20003c42:	33a5                	jal	200039aa <__metal_driver_sifive_plic0_control_base>
20003c44:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
        (struct metal_interrupt *)plic);

    current = __METAL_ACCESS_ONCE(
20003c48:	fd842783          	lw	a5,-40(s0)
20003c4c:	00779713          	slli	a4,a5,0x7
20003c50:	fec42783          	lw	a5,-20(s0)
20003c54:	97ba                	add	a5,a5,a4
20003c56:	fd442703          	lw	a4,-44(s0)
20003c5a:	8715                	srai	a4,a4,0x5
20003c5c:	070a                	slli	a4,a4,0x2
20003c5e:	973e                	add	a4,a4,a5
20003c60:	6789                	lui	a5,0x2
20003c62:	97ba                	add	a5,a5,a4
20003c64:	439c                	lw	a5,0(a5)
20003c66:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:98
    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_ENABLE_BASE +
                           (context_id * METAL_RISCV_PLIC0_ENABLE_PER_HART) +
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20003c6a:	fd042783          	lw	a5,-48(s0)
20003c6e:	cf81                	beqz	a5,20003c86 <__metal_plic0_enable+0x60>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97 (discriminator 1)
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20003c70:	fd442783          	lw	a5,-44(s0)
20003c74:	8bfd                	andi	a5,a5,31
20003c76:	4705                	li	a4,1
20003c78:	00f717b3          	sll	a5,a4,a5
20003c7c:	873e                	mv	a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:98 (discriminator 1)
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20003c7e:	fe842783          	lw	a5,-24(s0)
20003c82:	8fd9                	or	a5,a5,a4
20003c84:	a829                	j	20003c9e <__metal_plic0_enable+0x78>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:98 (discriminator 2)
20003c86:	fd442783          	lw	a5,-44(s0)
20003c8a:	8bfd                	andi	a5,a5,31
20003c8c:	4705                	li	a4,1
20003c8e:	00f717b3          	sll	a5,a4,a5
20003c92:	fff7c793          	not	a5,a5
20003c96:	873e                	mv	a4,a5
20003c98:	fe842783          	lw	a5,-24(s0)
20003c9c:	8ff9                	and	a5,a5,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:93
    __METAL_ACCESS_ONCE(
20003c9e:	fd842703          	lw	a4,-40(s0)
20003ca2:	00771693          	slli	a3,a4,0x7
20003ca6:	fec42703          	lw	a4,-20(s0)
20003caa:	9736                	add	a4,a4,a3
20003cac:	fd442683          	lw	a3,-44(s0)
20003cb0:	8695                	srai	a3,a3,0x5
20003cb2:	068a                	slli	a3,a3,0x2
20003cb4:	96ba                	add	a3,a3,a4
20003cb6:	6709                	lui	a4,0x2
20003cb8:	9736                	add	a4,a4,a3
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20003cba:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

    return 0;
20003cbc:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
}
20003cbe:	853e                	mv	a0,a5
20003cc0:	50b2                	lw	ra,44(sp)
20003cc2:	5422                	lw	s0,40(sp)
20003cc4:	6145                	addi	sp,sp,48
20003cc6:	8082                	ret

20003cc8 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

void __metal_plic0_default_handler(int id, void *priv) { metal_shutdown(300); }
20003cc8:	1101                	addi	sp,sp,-32
20003cca:	ce06                	sw	ra,28(sp)
20003ccc:	cc22                	sw	s0,24(sp)
20003cce:	1000                	addi	s0,sp,32
20003cd0:	fea42623          	sw	a0,-20(s0)
20003cd4:	feb42423          	sw	a1,-24(s0)
20003cd8:	12c00513          	li	a0,300
20003cdc:	1ae020ef          	jal	ra,20005e8a <metal_shutdown>

20003ce0 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:105

void __metal_plic0_handler(int id, void *priv) {
20003ce0:	7179                	addi	sp,sp,-48
20003ce2:	d606                	sw	ra,44(sp)
20003ce4:	d422                	sw	s0,40(sp)
20003ce6:	1800                	addi	s0,sp,48
20003ce8:	fca42e23          	sw	a0,-36(s0)
20003cec:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:106
    struct __metal_driver_riscv_plic0 *plic = priv;
20003cf0:	fd842783          	lw	a5,-40(s0)
20003cf4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
    int contextid =
        __metal_driver_sifive_plic0_context_ids(__metal_myhart_id());
20003cf8:	d84fe0ef          	jal	ra,2000227c <__metal_myhart_id>
20003cfc:	87aa                	mv	a5,a0
20003cfe:	853e                	mv	a0,a5
20003d00:	3b85                	jal	20003a70 <__metal_driver_sifive_plic0_context_ids>
20003d02:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
    unsigned int idx = __metal_plic0_claim_interrupt(plic, contextid);
20003d06:	fe842583          	lw	a1,-24(s0)
20003d0a:	fec42503          	lw	a0,-20(s0)
20003d0e:	3341                	jal	20003a8e <__metal_plic0_claim_interrupt>
20003d10:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts(
20003d14:	fec42503          	lw	a0,-20(s0)
20003d18:	3975                	jal	200039d4 <__metal_driver_sifive_plic0_num_interrupts>
20003d1a:	87aa                	mv	a5,a0
20003d1c:	fef42023          	sw	a5,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113
        (struct metal_interrupt *)plic);

    if ((idx < num_interrupts) && (plic->metal_exint_table[idx])) {
20003d20:	fe442703          	lw	a4,-28(s0)
20003d24:	fe042783          	lw	a5,-32(s0)
20003d28:	04f77263          	bgeu	a4,a5,20003d6c <__metal_plic0_handler+0x8c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113 (discriminator 1)
20003d2c:	fec42703          	lw	a4,-20(s0)
20003d30:	fe442783          	lw	a5,-28(s0)
20003d34:	078a                	slli	a5,a5,0x2
20003d36:	97ba                	add	a5,a5,a4
20003d38:	479c                	lw	a5,8(a5)
20003d3a:	cb8d                	beqz	a5,20003d6c <__metal_plic0_handler+0x8c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:114
        plic->metal_exint_table[idx](idx,
20003d3c:	fec42703          	lw	a4,-20(s0)
20003d40:	fe442783          	lw	a5,-28(s0)
20003d44:	078a                	slli	a5,a5,0x2
20003d46:	97ba                	add	a5,a5,a4
20003d48:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20003d4c:	fe442603          	lw	a2,-28(s0)
20003d50:	fec42683          	lw	a3,-20(s0)
20003d54:	fe442703          	lw	a4,-28(s0)
20003d58:	87ba                	mv	a5,a4
20003d5a:	0786                	slli	a5,a5,0x1
20003d5c:	97ba                	add	a5,a5,a4
20003d5e:	078e                	slli	a5,a5,0x3
20003d60:	97b6                	add	a5,a5,a3
20003d62:	0f07a783          	lw	a5,240(a5)
20003d66:	85be                	mv	a1,a5
20003d68:	8532                	mv	a0,a2
20003d6a:	9802                	jalr	a6
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118
                                     plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, contextid, idx);
20003d6c:	fe442603          	lw	a2,-28(s0)
20003d70:	fe842583          	lw	a1,-24(s0)
20003d74:	fec42503          	lw	a0,-20(s0)
20003d78:	3b89                	jal	20003aca <__metal_plic0_complete_interrupt>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119
}
20003d7a:	0001                	nop
20003d7c:	50b2                	lw	ra,44(sp)
20003d7e:	5422                	lw	s0,40(sp)
20003d80:	6145                	addi	sp,sp,48
20003d82:	8082                	ret

20003d84 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:121

void __metal_driver_riscv_plic0_init(struct metal_interrupt *controller) {
20003d84:	7139                	addi	sp,sp,-64
20003d86:	de06                	sw	ra,60(sp)
20003d88:	dc22                	sw	s0,56(sp)
20003d8a:	0080                	addi	s0,sp,64
20003d8c:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:122
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20003d90:	fcc42783          	lw	a5,-52(s0)
20003d94:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:124

    if (!plic->init_done) {
20003d98:	fe442783          	lw	a5,-28(s0)
20003d9c:	43dc                	lw	a5,4(a5)
20003d9e:	12079363          	bnez	a5,20003ec4 <__metal_driver_riscv_plic0_init+0x140>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128
        int num_interrupts, line;
        struct metal_interrupt *intc;

        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20003da2:	fe042623          	sw	zero,-20(s0)
20003da6:	a239                	j	20003eb4 <__metal_driver_riscv_plic0_init+0x130>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130
            num_interrupts =
                __metal_driver_sifive_plic0_num_interrupts(controller);
20003da8:	fcc42503          	lw	a0,-52(s0)
20003dac:	c29ff0ef          	jal	ra,200039d4 <__metal_driver_sifive_plic0_num_interrupts>
20003db0:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:131
            intc = __metal_driver_sifive_plic0_interrupt_parents(controller,
20003db4:	fec42583          	lw	a1,-20(s0)
20003db8:	fcc42503          	lw	a0,-52(s0)
20003dbc:	c6bff0ef          	jal	ra,20003a26 <__metal_driver_sifive_plic0_interrupt_parents>
20003dc0:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
                                                                 parent);
            line =
                __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20003dc4:	fec42583          	lw	a1,-20(s0)
20003dc8:	fcc42503          	lw	a0,-52(s0)
20003dcc:	c83ff0ef          	jal	ra,20003a4e <__metal_driver_sifive_plic0_interrupt_lines>
20003dd0:	fca42c23          	sw	a0,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:137

            /* Initialize ist parent controller, aka cpu_intc. */
            intc->vtable->interrupt_init(intc);
20003dd4:	fdc42783          	lw	a5,-36(s0)
20003dd8:	439c                	lw	a5,0(a5)
20003dda:	439c                	lw	a5,0(a5)
20003ddc:	fdc42503          	lw	a0,-36(s0)
20003de0:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

            for (int i = 0; i < num_interrupts; i++) {
20003de2:	fe042423          	sw	zero,-24(s0)
20003de6:	a095                	j	20003e4a <__metal_driver_riscv_plic0_init+0xc6>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140 (discriminator 3)
                __metal_plic0_enable(plic, parent, i, METAL_DISABLE);
20003de8:	4681                	li	a3,0
20003dea:	fe842603          	lw	a2,-24(s0)
20003dee:	fec42583          	lw	a1,-20(s0)
20003df2:	fe442503          	lw	a0,-28(s0)
20003df6:	3d05                	jal	20003c26 <__metal_plic0_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 3)
                __metal_driver_riscv_plic0_set_priority(controller, i, 0);
20003df8:	4601                	li	a2,0
20003dfa:	fe842583          	lw	a1,-24(s0)
20003dfe:	fcc42503          	lw	a0,-52(s0)
20003e02:	3379                	jal	20003b90 <__metal_driver_riscv_plic0_set_priority>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142 (discriminator 3)
                plic->metal_exint_table[i] = NULL;
20003e04:	fe442703          	lw	a4,-28(s0)
20003e08:	fe842783          	lw	a5,-24(s0)
20003e0c:	078a                	slli	a5,a5,0x2
20003e0e:	97ba                	add	a5,a5,a4
20003e10:	0007a423          	sw	zero,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143 (discriminator 3)
                plic->metal_exdata_table[i].sub_int = NULL;
20003e14:	fe442683          	lw	a3,-28(s0)
20003e18:	fe842703          	lw	a4,-24(s0)
20003e1c:	87ba                	mv	a5,a4
20003e1e:	0786                	slli	a5,a5,0x1
20003e20:	97ba                	add	a5,a5,a4
20003e22:	078e                	slli	a5,a5,0x3
20003e24:	97b6                	add	a5,a5,a3
20003e26:	0e07a623          	sw	zero,236(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:144 (discriminator 3)
                plic->metal_exdata_table[i].exint_data = NULL;
20003e2a:	fe442683          	lw	a3,-28(s0)
20003e2e:	fe842703          	lw	a4,-24(s0)
20003e32:	87ba                	mv	a5,a4
20003e34:	0786                	slli	a5,a5,0x1
20003e36:	97ba                	add	a5,a5,a4
20003e38:	078e                	slli	a5,a5,0x3
20003e3a:	97b6                	add	a5,a5,a3
20003e3c:	0e07a823          	sw	zero,240(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139 (discriminator 3)
            for (int i = 0; i < num_interrupts; i++) {
20003e40:	fe842783          	lw	a5,-24(s0)
20003e44:	0785                	addi	a5,a5,1
20003e46:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139 (discriminator 1)
20003e4a:	fe842703          	lw	a4,-24(s0)
20003e4e:	fe042783          	lw	a5,-32(s0)
20003e52:	f8f74be3          	blt	a4,a5,20003de8 <__metal_driver_riscv_plic0_init+0x64>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147 (discriminator 2)
            }

            __metal_plic0_set_threshold(controller, parent, 0);
20003e56:	4601                	li	a2,0
20003e58:	fec42583          	lw	a1,-20(s0)
20003e5c:	fcc42503          	lw	a0,-52(s0)
20003e60:	3945                	jal	20003b10 <__metal_plic0_set_threshold>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:150 (discriminator 2)

            /* Register plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_register(intc, line, NULL, plic);
20003e62:	fdc42783          	lw	a5,-36(s0)
20003e66:	439c                	lw	a5,0(a5)
20003e68:	4fdc                	lw	a5,28(a5)
20003e6a:	fe442683          	lw	a3,-28(s0)
20003e6e:	4601                	li	a2,0
20003e70:	fd842583          	lw	a1,-40(s0)
20003e74:	fdc42503          	lw	a0,-36(s0)
20003e78:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152 (discriminator 2)
            /* Register plic handler for dispatching its device interrupts */
            intc->vtable->interrupt_register(intc, line, __metal_plic0_handler,
20003e7a:	fdc42783          	lw	a5,-36(s0)
20003e7e:	439c                	lw	a5,0(a5)
20003e80:	4fd8                	lw	a4,28(a5)
20003e82:	fe442683          	lw	a3,-28(s0)
20003e86:	200047b7          	lui	a5,0x20004
20003e8a:	ce078613          	addi	a2,a5,-800 # 20003ce0 <__metal_plic0_handler>
20003e8e:	fd842583          	lw	a1,-40(s0)
20003e92:	fdc42503          	lw	a0,-36(s0)
20003e96:	9702                	jalr	a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:155 (discriminator 2)
                                             plic);
            /* Enable plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_enable(intc, line);
20003e98:	fdc42783          	lw	a5,-36(s0)
20003e9c:	439c                	lw	a5,0(a5)
20003e9e:	53dc                	lw	a5,36(a5)
20003ea0:	fd842583          	lw	a1,-40(s0)
20003ea4:	fdc42503          	lw	a0,-36(s0)
20003ea8:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20003eaa:	fec42783          	lw	a5,-20(s0)
20003eae:	0785                	addi	a5,a5,1
20003eb0:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 1)
20003eb4:	fec42783          	lw	a5,-20(s0)
20003eb8:	eef058e3          	blez	a5,20003da8 <__metal_driver_riscv_plic0_init+0x24>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
        }
        plic->init_done = 1;
20003ebc:	fe442783          	lw	a5,-28(s0)
20003ec0:	4705                	li	a4,1
20003ec2:	c3d8                	sw	a4,4(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:159
    }
}
20003ec4:	0001                	nop
20003ec6:	50f2                	lw	ra,60(sp)
20003ec8:	5462                	lw	s0,56(sp)
20003eca:	6121                	addi	sp,sp,64
20003ecc:	8082                	ret

20003ece <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

int __metal_driver_riscv_plic0_register(struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv) {
20003ece:	7179                	addi	sp,sp,-48
20003ed0:	d606                	sw	ra,44(sp)
20003ed2:	d422                	sw	s0,40(sp)
20003ed4:	1800                	addi	s0,sp,48
20003ed6:	fca42e23          	sw	a0,-36(s0)
20003eda:	fcb42c23          	sw	a1,-40(s0)
20003ede:	fcc42a23          	sw	a2,-44(s0)
20003ee2:	fcd42823          	sw	a3,-48(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20003ee6:	fdc42783          	lw	a5,-36(s0)
20003eea:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:166

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20003eee:	fdc42503          	lw	a0,-36(s0)
20003ef2:	ae3ff0ef          	jal	ra,200039d4 <__metal_driver_sifive_plic0_num_interrupts>
20003ef6:	872a                	mv	a4,a0
20003ef8:	fd842783          	lw	a5,-40(s0)
20003efc:	00e7c463          	blt	a5,a4,20003f04 <__metal_driver_riscv_plic0_register+0x36>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
        return -1;
20003f00:	57fd                	li	a5,-1
20003f02:	a051                	j	20003f86 <__metal_driver_riscv_plic0_register+0xb8>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:170
    }

    if (isr) {
20003f04:	fd442783          	lw	a5,-44(s0)
20003f08:	cf9d                	beqz	a5,20003f46 <__metal_driver_riscv_plic0_register+0x78>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:171
        __metal_driver_riscv_plic0_set_priority(controller, id, 2);
20003f0a:	4609                	li	a2,2
20003f0c:	fd842583          	lw	a1,-40(s0)
20003f10:	fdc42503          	lw	a0,-36(s0)
20003f14:	c7dff0ef          	jal	ra,20003b90 <__metal_driver_riscv_plic0_set_priority>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172
        plic->metal_exint_table[id] = isr;
20003f18:	fec42703          	lw	a4,-20(s0)
20003f1c:	fd842783          	lw	a5,-40(s0)
20003f20:	078a                	slli	a5,a5,0x2
20003f22:	97ba                	add	a5,a5,a4
20003f24:	fd442703          	lw	a4,-44(s0)
20003f28:	c798                	sw	a4,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
        plic->metal_exdata_table[id].exint_data = priv;
20003f2a:	fec42683          	lw	a3,-20(s0)
20003f2e:	fd842703          	lw	a4,-40(s0)
20003f32:	87ba                	mv	a5,a4
20003f34:	0786                	slli	a5,a5,0x1
20003f36:	97ba                	add	a5,a5,a4
20003f38:	078e                	slli	a5,a5,0x3
20003f3a:	97b6                	add	a5,a5,a3
20003f3c:	fd042703          	lw	a4,-48(s0)
20003f40:	0ee7a823          	sw	a4,240(a5)
20003f44:	a081                	j	20003f84 <__metal_driver_riscv_plic0_register+0xb6>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175
    } else {
        __metal_driver_riscv_plic0_set_priority(controller, id, 1);
20003f46:	4605                	li	a2,1
20003f48:	fd842583          	lw	a1,-40(s0)
20003f4c:	fdc42503          	lw	a0,-36(s0)
20003f50:	c41ff0ef          	jal	ra,20003b90 <__metal_driver_riscv_plic0_set_priority>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        plic->metal_exint_table[id] = __metal_plic0_default_handler;
20003f54:	fec42703          	lw	a4,-20(s0)
20003f58:	fd842783          	lw	a5,-40(s0)
20003f5c:	078a                	slli	a5,a5,0x2
20003f5e:	97ba                	add	a5,a5,a4
20003f60:	20004737          	lui	a4,0x20004
20003f64:	cc870713          	addi	a4,a4,-824 # 20003cc8 <__metal_plic0_default_handler>
20003f68:	c798                	sw	a4,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:177
        plic->metal_exdata_table[id].sub_int = priv;
20003f6a:	fec42683          	lw	a3,-20(s0)
20003f6e:	fd842703          	lw	a4,-40(s0)
20003f72:	87ba                	mv	a5,a4
20003f74:	0786                	slli	a5,a5,0x1
20003f76:	97ba                	add	a5,a5,a4
20003f78:	078e                	slli	a5,a5,0x3
20003f7a:	97b6                	add	a5,a5,a3
20003f7c:	fd042703          	lw	a4,-48(s0)
20003f80:	0ee7a623          	sw	a4,236(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
    }

    return 0;
20003f84:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:181
}
20003f86:	853e                	mv	a0,a5
20003f88:	50b2                	lw	ra,44(sp)
20003f8a:	5422                	lw	s0,40(sp)
20003f8c:	6145                	addi	sp,sp,48
20003f8e:	8082                	ret

20003f90 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:184

int __metal_driver_riscv_plic0_enable(struct metal_interrupt *controller,
                                      int id) {
20003f90:	7179                	addi	sp,sp,-48
20003f92:	d606                	sw	ra,44(sp)
20003f94:	d422                	sw	s0,40(sp)
20003f96:	1800                	addi	s0,sp,48
20003f98:	fca42e23          	sw	a0,-36(s0)
20003f9c:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:185
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20003fa0:	fdc42783          	lw	a5,-36(s0)
20003fa4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:187

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20003fa8:	fdc42503          	lw	a0,-36(s0)
20003fac:	a29ff0ef          	jal	ra,200039d4 <__metal_driver_sifive_plic0_num_interrupts>
20003fb0:	872a                	mv	a4,a0
20003fb2:	fd842783          	lw	a5,-40(s0)
20003fb6:	00e7c463          	blt	a5,a4,20003fbe <__metal_driver_riscv_plic0_enable+0x2e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:188
        return -1;
20003fba:	57fd                	li	a5,-1
20003fbc:	a829                	j	20003fd6 <__metal_driver_riscv_plic0_enable+0x46>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:191
    }

    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_ENABLE);
20003fbe:	abefe0ef          	jal	ra,2000227c <__metal_myhart_id>
20003fc2:	87aa                	mv	a5,a0
20003fc4:	4685                	li	a3,1
20003fc6:	fd842603          	lw	a2,-40(s0)
20003fca:	85be                	mv	a1,a5
20003fcc:	fec42503          	lw	a0,-20(s0)
20003fd0:	c57ff0ef          	jal	ra,20003c26 <__metal_plic0_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:192
    return 0;
20003fd4:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:193
}
20003fd6:	853e                	mv	a0,a5
20003fd8:	50b2                	lw	ra,44(sp)
20003fda:	5422                	lw	s0,40(sp)
20003fdc:	6145                	addi	sp,sp,48
20003fde:	8082                	ret

20003fe0 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:196

int __metal_driver_riscv_plic0_disable(struct metal_interrupt *controller,
                                       int id) {
20003fe0:	7179                	addi	sp,sp,-48
20003fe2:	d606                	sw	ra,44(sp)
20003fe4:	d422                	sw	s0,40(sp)
20003fe6:	1800                	addi	s0,sp,48
20003fe8:	fca42e23          	sw	a0,-36(s0)
20003fec:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:197
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20003ff0:	fdc42783          	lw	a5,-36(s0)
20003ff4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:199

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20003ff8:	fdc42503          	lw	a0,-36(s0)
20003ffc:	9d9ff0ef          	jal	ra,200039d4 <__metal_driver_sifive_plic0_num_interrupts>
20004000:	872a                	mv	a4,a0
20004002:	fd842783          	lw	a5,-40(s0)
20004006:	00e7c463          	blt	a5,a4,2000400e <__metal_driver_riscv_plic0_disable+0x2e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:200
        return -1;
2000400a:	57fd                	li	a5,-1
2000400c:	a829                	j	20004026 <__metal_driver_riscv_plic0_disable+0x46>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:202
    }
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_DISABLE);
2000400e:	a6efe0ef          	jal	ra,2000227c <__metal_myhart_id>
20004012:	87aa                	mv	a5,a0
20004014:	4681                	li	a3,0
20004016:	fd842603          	lw	a2,-40(s0)
2000401a:	85be                	mv	a1,a5
2000401c:	fec42503          	lw	a0,-20(s0)
20004020:	c07ff0ef          	jal	ra,20003c26 <__metal_plic0_enable>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:203
    return 0;
20004024:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:204
}
20004026:	853e                	mv	a0,a5
20004028:	50b2                	lw	ra,44(sp)
2000402a:	5422                	lw	s0,40(sp)
2000402c:	6145                	addi	sp,sp,48
2000402e:	8082                	ret

20004030 <__metal_driver_riscv_plic0_set_threshold>:
__metal_driver_riscv_plic0_set_threshold():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:207

int __metal_driver_riscv_plic0_set_threshold(struct metal_interrupt *controller,
                                             unsigned int threshold) {
20004030:	1101                	addi	sp,sp,-32
20004032:	ce06                	sw	ra,28(sp)
20004034:	cc22                	sw	s0,24(sp)
20004036:	1000                	addi	s0,sp,32
20004038:	fea42623          	sw	a0,-20(s0)
2000403c:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:208
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
20004040:	a3cfe0ef          	jal	ra,2000227c <__metal_myhart_id>
20004044:	87aa                	mv	a5,a0
20004046:	fe842603          	lw	a2,-24(s0)
2000404a:	85be                	mv	a1,a5
2000404c:	fec42503          	lw	a0,-20(s0)
20004050:	ac1ff0ef          	jal	ra,20003b10 <__metal_plic0_set_threshold>
20004054:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:210
                                       threshold);
}
20004056:	853e                	mv	a0,a5
20004058:	40f2                	lw	ra,28(sp)
2000405a:	4462                	lw	s0,24(sp)
2000405c:	6105                	addi	sp,sp,32
2000405e:	8082                	ret

20004060 <__metal_driver_riscv_plic0_get_threshold>:
__metal_driver_riscv_plic0_get_threshold():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:213

unsigned int
__metal_driver_riscv_plic0_get_threshold(struct metal_interrupt *controller) {
20004060:	1101                	addi	sp,sp,-32
20004062:	ce06                	sw	ra,28(sp)
20004064:	cc22                	sw	s0,24(sp)
20004066:	1000                	addi	s0,sp,32
20004068:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:214
    return __metal_plic0_get_threshold(controller, __metal_myhart_id());
2000406c:	a10fe0ef          	jal	ra,2000227c <__metal_myhart_id>
20004070:	87aa                	mv	a5,a0
20004072:	85be                	mv	a1,a5
20004074:	fec42503          	lw	a0,-20(s0)
20004078:	adfff0ef          	jal	ra,20003b56 <__metal_plic0_get_threshold>
2000407c:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:215
}
2000407e:	853e                	mv	a0,a5
20004080:	40f2                	lw	ra,28(sp)
20004082:	4462                	lw	s0,24(sp)
20004084:	6105                	addi	sp,sp,32
20004086:	8082                	ret

20004088 <__metal_driver_riscv_plic0_affinity_enable>:
__metal_driver_riscv_plic0_affinity_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:219

metal_affinity
__metal_driver_riscv_plic0_affinity_enable(struct metal_interrupt *controller,
                                           metal_affinity bitmask, int id) {
20004088:	7179                	addi	sp,sp,-48
2000408a:	d606                	sw	ra,44(sp)
2000408c:	d422                	sw	s0,40(sp)
2000408e:	1800                	addi	s0,sp,48
20004090:	fca42e23          	sw	a0,-36(s0)
20004094:	fcb42c23          	sw	a1,-40(s0)
20004098:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:223
    metal_affinity ret;
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2000409c:	fdc42783          	lw	a5,-36(s0)
200040a0:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:225

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
200040a4:	fdc42503          	lw	a0,-36(s0)
200040a8:	92dff0ef          	jal	ra,200039d4 <__metal_driver_sifive_plic0_num_interrupts>
200040ac:	872a                	mv	a4,a0
200040ae:	fd442783          	lw	a5,-44(s0)
200040b2:	00e7c863          	blt	a5,a4,200040c2 <__metal_driver_riscv_plic0_affinity_enable+0x3a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:226
        metal_affinity_set_val(ret, -1);
200040b6:	57fd                	li	a5,-1
200040b8:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:227
        return ret;
200040bc:	fe442783          	lw	a5,-28(s0)
200040c0:	a899                	j	20004116 <__metal_driver_riscv_plic0_affinity_enable+0x8e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:230
    }

    for_each_metal_affinity(context, bitmask) {
200040c2:	fe042623          	sw	zero,-20(s0)
200040c6:	a099                	j	2000410c <__metal_driver_riscv_plic0_affinity_enable+0x84>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:231
        if (context != 0)
200040c8:	fec42783          	lw	a5,-20(s0)
200040cc:	c795                	beqz	a5,200040f8 <__metal_driver_riscv_plic0_affinity_enable+0x70>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:232
            metal_affinity_set_bit(
200040ce:	4685                	li	a3,1
200040d0:	fd442603          	lw	a2,-44(s0)
200040d4:	fec42583          	lw	a1,-20(s0)
200040d8:	fe842503          	lw	a0,-24(s0)
200040dc:	b4bff0ef          	jal	ra,20003c26 <__metal_plic0_enable>
200040e0:	87aa                	mv	a5,a0
200040e2:	0017f713          	andi	a4,a5,1
200040e6:	fec42783          	lw	a5,-20(s0)
200040ea:	00f71733          	sll	a4,a4,a5
200040ee:	fe442783          	lw	a5,-28(s0)
200040f2:	8fd9                	or	a5,a5,a4
200040f4:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:230 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
200040f8:	fec42783          	lw	a5,-20(s0)
200040fc:	0785                	addi	a5,a5,1
200040fe:	fef42623          	sw	a5,-20(s0)
20004102:	fd842783          	lw	a5,-40(s0)
20004106:	8385                	srli	a5,a5,0x1
20004108:	fcf42c23          	sw	a5,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:230 (discriminator 1)
2000410c:	fd842783          	lw	a5,-40(s0)
20004110:	ffc5                	bnez	a5,200040c8 <__metal_driver_riscv_plic0_affinity_enable+0x40>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:237
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_ENABLE));
    }

    return ret;
20004112:	fe442783          	lw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:238 (discriminator 1)
}
20004116:	853e                	mv	a0,a5
20004118:	50b2                	lw	ra,44(sp)
2000411a:	5422                	lw	s0,40(sp)
2000411c:	6145                	addi	sp,sp,48
2000411e:	8082                	ret

20004120 <__metal_driver_riscv_plic0_affinity_disable>:
__metal_driver_riscv_plic0_affinity_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:242

metal_affinity
__metal_driver_riscv_plic0_affinity_disable(struct metal_interrupt *controller,
                                            metal_affinity bitmask, int id) {
20004120:	7179                	addi	sp,sp,-48
20004122:	d606                	sw	ra,44(sp)
20004124:	d422                	sw	s0,40(sp)
20004126:	1800                	addi	s0,sp,48
20004128:	fca42e23          	sw	a0,-36(s0)
2000412c:	fcb42c23          	sw	a1,-40(s0)
20004130:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:246
    metal_affinity ret;
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20004134:	fdc42783          	lw	a5,-36(s0)
20004138:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:248

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2000413c:	fdc42503          	lw	a0,-36(s0)
20004140:	895ff0ef          	jal	ra,200039d4 <__metal_driver_sifive_plic0_num_interrupts>
20004144:	872a                	mv	a4,a0
20004146:	fd442783          	lw	a5,-44(s0)
2000414a:	00e7c863          	blt	a5,a4,2000415a <__metal_driver_riscv_plic0_affinity_disable+0x3a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:249
        metal_affinity_set_val(ret, -1);
2000414e:	57fd                	li	a5,-1
20004150:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:250
        return ret;
20004154:	fe442783          	lw	a5,-28(s0)
20004158:	a899                	j	200041ae <__metal_driver_riscv_plic0_affinity_disable+0x8e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:253
    }

    for_each_metal_affinity(context, bitmask) {
2000415a:	fe042623          	sw	zero,-20(s0)
2000415e:	a099                	j	200041a4 <__metal_driver_riscv_plic0_affinity_disable+0x84>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:254
        if (context != 0)
20004160:	fec42783          	lw	a5,-20(s0)
20004164:	c795                	beqz	a5,20004190 <__metal_driver_riscv_plic0_affinity_disable+0x70>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:255
            metal_affinity_set_bit(
20004166:	4681                	li	a3,0
20004168:	fd442603          	lw	a2,-44(s0)
2000416c:	fec42583          	lw	a1,-20(s0)
20004170:	fe842503          	lw	a0,-24(s0)
20004174:	ab3ff0ef          	jal	ra,20003c26 <__metal_plic0_enable>
20004178:	87aa                	mv	a5,a0
2000417a:	0017f713          	andi	a4,a5,1
2000417e:	fec42783          	lw	a5,-20(s0)
20004182:	00f71733          	sll	a4,a4,a5
20004186:	fe442783          	lw	a5,-28(s0)
2000418a:	8fd9                	or	a5,a5,a4
2000418c:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:253 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
20004190:	fec42783          	lw	a5,-20(s0)
20004194:	0785                	addi	a5,a5,1
20004196:	fef42623          	sw	a5,-20(s0)
2000419a:	fd842783          	lw	a5,-40(s0)
2000419e:	8385                	srli	a5,a5,0x1
200041a0:	fcf42c23          	sw	a5,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:253 (discriminator 1)
200041a4:	fd842783          	lw	a5,-40(s0)
200041a8:	ffc5                	bnez	a5,20004160 <__metal_driver_riscv_plic0_affinity_disable+0x40>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:260
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_DISABLE));
    }

    return ret;
200041aa:	fe442783          	lw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:261 (discriminator 1)
}
200041ae:	853e                	mv	a0,a5
200041b0:	50b2                	lw	ra,44(sp)
200041b2:	5422                	lw	s0,40(sp)
200041b4:	6145                	addi	sp,sp,48
200041b6:	8082                	ret

200041b8 <__metal_driver_riscv_plic0_affinity_set_threshold>:
__metal_driver_riscv_plic0_affinity_set_threshold():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:265

metal_affinity __metal_driver_riscv_plic0_affinity_set_threshold(
    struct metal_interrupt *controller, metal_affinity bitmask,
    unsigned int threshold) {
200041b8:	7179                	addi	sp,sp,-48
200041ba:	d606                	sw	ra,44(sp)
200041bc:	d422                	sw	s0,40(sp)
200041be:	1800                	addi	s0,sp,48
200041c0:	fca42e23          	sw	a0,-36(s0)
200041c4:	fcb42c23          	sw	a1,-40(s0)
200041c8:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:269
    metal_affinity ret;
    int context;

    for_each_metal_affinity(context, bitmask) {
200041cc:	fe042623          	sw	zero,-20(s0)
200041d0:	a091                	j	20004214 <__metal_driver_riscv_plic0_affinity_set_threshold+0x5c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:270
        if (context != 0)
200041d2:	fec42783          	lw	a5,-20(s0)
200041d6:	c78d                	beqz	a5,20004200 <__metal_driver_riscv_plic0_affinity_set_threshold+0x48>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:271
            metal_affinity_set_bit(
200041d8:	fd442603          	lw	a2,-44(s0)
200041dc:	fec42583          	lw	a1,-20(s0)
200041e0:	fdc42503          	lw	a0,-36(s0)
200041e4:	92dff0ef          	jal	ra,20003b10 <__metal_plic0_set_threshold>
200041e8:	87aa                	mv	a5,a0
200041ea:	0017f713          	andi	a4,a5,1
200041ee:	fec42783          	lw	a5,-20(s0)
200041f2:	00f71733          	sll	a4,a4,a5
200041f6:	fe842783          	lw	a5,-24(s0)
200041fa:	8fd9                	or	a5,a5,a4
200041fc:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:269 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
20004200:	fec42783          	lw	a5,-20(s0)
20004204:	0785                	addi	a5,a5,1
20004206:	fef42623          	sw	a5,-20(s0)
2000420a:	fd842783          	lw	a5,-40(s0)
2000420e:	8385                	srli	a5,a5,0x1
20004210:	fcf42c23          	sw	a5,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:269 (discriminator 1)
20004214:	fd842783          	lw	a5,-40(s0)
20004218:	ffcd                	bnez	a5,200041d2 <__metal_driver_riscv_plic0_affinity_set_threshold+0x1a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:276
                ret, context,
                __metal_plic0_set_threshold(controller, context, threshold));
    }

    return ret;
2000421a:	fe842783          	lw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:277
}
2000421e:	853e                	mv	a0,a5
20004220:	50b2                	lw	ra,44(sp)
20004222:	5422                	lw	s0,40(sp)
20004224:	6145                	addi	sp,sp,48
20004226:	8082                	ret

20004228 <__metal_driver_riscv_plic0_affinity_get_threshold>:
__metal_driver_riscv_plic0_affinity_get_threshold():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:280

unsigned int __metal_driver_riscv_plic0_affinity_get_threshold(
    struct metal_interrupt *controller, int context_id) {
20004228:	1101                	addi	sp,sp,-32
2000422a:	ce06                	sw	ra,28(sp)
2000422c:	cc22                	sw	s0,24(sp)
2000422e:	1000                	addi	s0,sp,32
20004230:	fea42623          	sw	a0,-20(s0)
20004234:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:281
    __metal_plic0_get_threshold(controller, context_id);
20004238:	fe842583          	lw	a1,-24(s0)
2000423c:	fec42503          	lw	a0,-20(s0)
20004240:	917ff0ef          	jal	ra,20003b56 <__metal_plic0_get_threshold>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:282
    return 0;
20004244:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:283
}
20004246:	853e                	mv	a0,a5
20004248:	40f2                	lw	ra,28(sp)
2000424a:	4462                	lw	s0,24(sp)
2000424c:	6105                	addi	sp,sp,32
2000424e:	8082                	ret

20004250 <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:921



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
20004250:	1101                	addi	sp,sp,-32
20004252:	ce22                	sw	s0,28(sp)
20004254:	1000                	addi	s0,sp,32
20004256:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:922
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
2000425a:	800007b7          	lui	a5,0x80000
2000425e:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffe8f8>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:923
}
20004262:	853e                	mv	a0,a5
20004264:	4472                	lw	s0,28(sp)
20004266:	6105                	addi	sp,sp,32
20004268:	8082                	ret

2000426a <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:926

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
2000426a:	1101                	addi	sp,sp,-32
2000426c:	ce22                	sw	s0,28(sp)
2000426e:	1000                	addi	s0,sp,32
20004270:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:927
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20004274:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:928
}
20004278:	853e                	mv	a0,a5
2000427a:	4472                	lw	s0,28(sp)
2000427c:	6105                	addi	sp,sp,32
2000427e:	8082                	ret

20004280 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:936
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
20004280:	1101                	addi	sp,sp,-32
20004282:	ce22                	sw	s0,28(sp)
20004284:	1000                	addi	s0,sp,32
20004286:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:937
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
2000428a:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:938
}
2000428c:	853e                	mv	a0,a5
2000428e:	4472                	lw	s0,28(sp)
20004290:	6105                	addi	sp,sp,32
20004292:	8082                	ret

20004294 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1053
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
20004294:	1141                	addi	sp,sp,-16
20004296:	c622                	sw	s0,12(sp)
20004298:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1054
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
2000429a:	83418793          	addi	a5,gp,-1996 # 80000abc <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1055
}
2000429e:	853e                	mv	a0,a5
200042a0:	4432                	lw	s0,12(sp)
200042a2:	0141                	addi	sp,sp,16
200042a4:	8082                	ret

200042a6 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM 0x001F0000UL
#define CONFIG_ENABLE 0x40000000UL
#define CONFIG_READY 0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(
    const struct metal_clock *clock) {
200042a6:	7139                	addi	sp,sp,-64
200042a8:	de06                	sw	ra,60(sp)
200042aa:	dc22                	sw	s0,56(sp)
200042ac:	0080                	addi	s0,sp,64
200042ae:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    struct metal_clock *ref =
        __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
200042b2:	fcc42503          	lw	a0,-52(s0)
200042b6:	3f69                	jal	20004250 <__metal_driver_sifive_fe310_g000_hfrosc_ref>
200042b8:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    long config_offset =
        __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
200042bc:	fcc42503          	lw	a0,-52(s0)
200042c0:	37c1                	jal	20004280 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
200042c2:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
        __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
200042c6:	fcc42503          	lw	a0,-52(s0)
200042ca:	3745                	jal	2000426a <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
200042cc:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:25
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
        __metal_driver_sifive_fe310_g000_prci_vtable();
200042d0:	37d1                	jal	20004294 <__metal_driver_sifive_fe310_g000_prci_vtable>
200042d2:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26
    long cfg = vtable->get_reg(config_base, config_offset);
200042d6:	fe042783          	lw	a5,-32(s0)
200042da:	439c                	lw	a5,0(a5)
200042dc:	fe842583          	lw	a1,-24(s0)
200042e0:	fe442503          	lw	a0,-28(s0)
200042e4:	9782                	jalr	a5
200042e6:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28

    if ((cfg & CONFIG_ENABLE) == 0)
200042ea:	fdc42703          	lw	a4,-36(s0)
200042ee:	400007b7          	lui	a5,0x40000
200042f2:	8ff9                	and	a5,a5,a4
200042f4:	e399                	bnez	a5,200042fa <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
200042f6:	57fd                	li	a5,-1
200042f8:	a025                	j	20004320 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    if ((cfg & CONFIG_READY) == 0)
200042fa:	fdc42783          	lw	a5,-36(s0)
200042fe:	0007c463          	bltz	a5,20004306 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
        return -1;
20004302:	57fd                	li	a5,-1
20004304:	a831                	j	20004320 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:32
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20004306:	fec42503          	lw	a0,-20(s0)
2000430a:	243010ef          	jal	ra,20005d4c <metal_clock_get_rate_hz>
2000430e:	87aa                	mv	a5,a0
20004310:	873e                	mv	a4,a5
20004312:	fdc42783          	lw	a5,-36(s0)
20004316:	03f7f793          	andi	a5,a5,63
2000431a:	0785                	addi	a5,a5,1
2000431c:	02f757b3          	divu	a5,a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:33
}
20004320:	853e                	mv	a0,a5
20004322:	50f2                	lw	ra,60(sp)
20004324:	5462                	lw	s0,56(sp)
20004326:	6121                	addi	sp,sp,64
20004328:	8082                	ret

2000432a <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(
    struct metal_clock *clock, long rate) {
2000432a:	1101                	addi	sp,sp,-32
2000432c:	ce06                	sw	ra,28(sp)
2000432e:	cc22                	sw	s0,24(sp)
20004330:	1000                	addi	s0,sp,32
20004332:	fea42623          	sw	a0,-20(s0)
20004336:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:37
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
2000433a:	fec42503          	lw	a0,-20(s0)
2000433e:	37a5                	jal	200042a6 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20004340:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:38
}
20004342:	853e                	mv	a0,a5
20004344:	40f2                	lw	ra,28(sp)
20004346:	4462                	lw	s0,24(sp)
20004348:	6105                	addi	sp,sp,32
2000434a:	8082                	ret

2000434c <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:944
{
2000434c:	1101                	addi	sp,sp,-32
2000434e:	ce22                	sw	s0,28(sp)
20004350:	1000                	addi	s0,sp,32
20004352:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:945
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20004356:	800007b7          	lui	a5,0x80000
2000435a:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe8ec>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:946
}
2000435e:	853e                	mv	a0,a5
20004360:	4472                	lw	s0,28(sp)
20004362:	6105                	addi	sp,sp,32
20004364:	8082                	ret

20004366 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:949
{
20004366:	1101                	addi	sp,sp,-32
20004368:	ce22                	sw	s0,28(sp)
2000436a:	1000                	addi	s0,sp,32
2000436c:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:950
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20004370:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:951
}
20004374:	853e                	mv	a0,a5
20004376:	4472                	lw	s0,28(sp)
20004378:	6105                	addi	sp,sp,32
2000437a:	8082                	ret

2000437c <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:954
{
2000437c:	1101                	addi	sp,sp,-32
2000437e:	ce22                	sw	s0,28(sp)
20004380:	1000                	addi	s0,sp,32
20004382:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:955
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
20004386:	4791                	li	a5,4
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:956
}
20004388:	853e                	mv	a0,a5
2000438a:	4472                	lw	s0,28(sp)
2000438c:	6105                	addi	sp,sp,32
2000438e:	8082                	ret

20004390 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1053
{
20004390:	1141                	addi	sp,sp,-16
20004392:	c622                	sw	s0,12(sp)
20004394:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1054
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20004396:	83418793          	addi	a5,gp,-1996 # 80000abc <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1055
}
2000439a:	853e                	mv	a0,a5
2000439c:	4432                	lw	s0,12(sp)
2000439e:	0141                	addi	sp,sp,16
200043a0:	8082                	ret

200043a2 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE 0x40000000UL
#define CONFIG_READY 0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(
    const struct metal_clock *clock) {
200043a2:	7139                	addi	sp,sp,-64
200043a4:	de06                	sw	ra,60(sp)
200043a6:	dc22                	sw	s0,56(sp)
200043a8:	0080                	addi	s0,sp,64
200043aa:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    struct metal_clock *ref =
        __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
200043ae:	fcc42503          	lw	a0,-52(s0)
200043b2:	3f69                	jal	2000434c <__metal_driver_sifive_fe310_g000_hfxosc_ref>
200043b4:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    long config_offset =
        __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
200043b8:	fcc42503          	lw	a0,-52(s0)
200043bc:	37c1                	jal	2000437c <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
200043be:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
        __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
200043c2:	fcc42503          	lw	a0,-52(s0)
200043c6:	3745                	jal	20004366 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
200043c8:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
        __metal_driver_sifive_fe310_g000_prci_vtable();
200043cc:	37d1                	jal	20004390 <__metal_driver_sifive_fe310_g000_prci_vtable>
200043ce:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
200043d2:	fe042783          	lw	a5,-32(s0)
200043d6:	439c                	lw	a5,0(a5)
200043d8:	fe842583          	lw	a1,-24(s0)
200043dc:	fe442503          	lw	a0,-28(s0)
200043e0:	9782                	jalr	a5
200043e2:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
200043e6:	fdc42703          	lw	a4,-36(s0)
200043ea:	400007b7          	lui	a5,0x40000
200043ee:	8ff9                	and	a5,a5,a4
200043f0:	e399                	bnez	a5,200043f6 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
200043f2:	57fd                	li	a5,-1
200043f4:	a821                	j	2000440c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    if ((cfg & CONFIG_READY) == 0)
200043f6:	fdc42783          	lw	a5,-36(s0)
200043fa:	0007c463          	bltz	a5,20004402 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
        return -1;
200043fe:	57fd                	li	a5,-1
20004400:	a031                	j	2000440c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:30
    return metal_clock_get_rate_hz(ref);
20004402:	fec42503          	lw	a0,-20(s0)
20004406:	147010ef          	jal	ra,20005d4c <metal_clock_get_rate_hz>
2000440a:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:31
}
2000440c:	853e                	mv	a0,a5
2000440e:	50f2                	lw	ra,60(sp)
20004410:	5462                	lw	s0,56(sp)
20004412:	6121                	addi	sp,sp,64
20004414:	8082                	ret

20004416 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(
    struct metal_clock *clock, long rate) {
20004416:	1101                	addi	sp,sp,-32
20004418:	ce06                	sw	ra,28(sp)
2000441a:	cc22                	sw	s0,24(sp)
2000441c:	1000                	addi	s0,sp,32
2000441e:	fea42623          	sw	a0,-20(s0)
20004422:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:35
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20004426:	fec42503          	lw	a0,-20(s0)
2000442a:	3fa5                	jal	200043a2 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
2000442c:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:36
}
2000442e:	853e                	mv	a0,a5
20004430:	40f2                	lw	ra,28(sp)
20004432:	4462                	lw	s0,24(sp)
20004434:	6105                	addi	sp,sp,32
20004436:	8082                	ret

20004438 <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1005
{
20004438:	1101                	addi	sp,sp,-32
2000443a:	ce22                	sw	s0,28(sp)
2000443c:	1000                	addi	s0,sp,32
2000443e:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1006
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20004442:	800017b7          	lui	a5,0x80001
20004446:	a6078793          	addi	a5,a5,-1440 # 80000a60 <metal_segment_heap_target_end+0xfffff2ec>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1007
}
2000444a:	853e                	mv	a0,a5
2000444c:	4472                	lw	s0,28(sp)
2000444e:	6105                	addi	sp,sp,32
20004450:	8082                	ret

20004452 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1010
{
20004452:	1101                	addi	sp,sp,-32
20004454:	ce22                	sw	s0,28(sp)
20004456:	1000                	addi	s0,sp,32
20004458:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1011
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
2000445c:	800017b7          	lui	a5,0x80001
20004460:	a6c78793          	addi	a5,a5,-1428 # 80000a6c <metal_segment_heap_target_end+0xfffff2f8>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1012
}
20004464:	853e                	mv	a0,a5
20004466:	4472                	lw	s0,28(sp)
20004468:	6105                	addi	sp,sp,32
2000446a:	8082                	ret

2000446c <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1015
{
2000446c:	1101                	addi	sp,sp,-32
2000446e:	ce22                	sw	s0,28(sp)
20004470:	1000                	addi	s0,sp,32
20004472:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1016
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20004476:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1017
}
2000447a:	853e                	mv	a0,a5
2000447c:	4472                	lw	s0,28(sp)
2000447e:	6105                	addi	sp,sp,32
20004480:	8082                	ret

20004482 <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1020
{
20004482:	1101                	addi	sp,sp,-32
20004484:	ce22                	sw	s0,28(sp)
20004486:	1000                	addi	s0,sp,32
20004488:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1021
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
2000448c:	47b1                	li	a5,12
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1022
}
2000448e:	853e                	mv	a0,a5
20004490:	4472                	lw	s0,28(sp)
20004492:	6105                	addi	sp,sp,32
20004494:	8082                	ret

20004496 <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1025
{
20004496:	1141                	addi	sp,sp,-16
20004498:	c622                	sw	s0,12(sp)
2000449a:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1026
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
2000449c:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1027
}
200044a0:	853e                	mv	a0,a5
200044a2:	4432                	lw	s0,12(sp)
200044a4:	0141                	addi	sp,sp,16
200044a6:	8082                	ret

200044a8 <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1030
{
200044a8:	1141                	addi	sp,sp,-16
200044aa:	c622                	sw	s0,12(sp)
200044ac:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1031
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
200044ae:	47a1                	li	a5,8
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1032
}
200044b0:	853e                	mv	a0,a5
200044b2:	4432                	lw	s0,12(sp)
200044b4:	0141                	addi	sp,sp,16
200044b6:	8082                	ret

200044b8 <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1035
{
200044b8:	1141                	addi	sp,sp,-16
200044ba:	c622                	sw	s0,12(sp)
200044bc:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1036
		return 16000000;
200044be:	00f427b7          	lui	a5,0xf42
200044c2:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1037
}
200044c6:	853e                	mv	a0,a5
200044c8:	4432                	lw	s0,12(sp)
200044ca:	0141                	addi	sp,sp,16
200044cc:	8082                	ret

200044ce <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1043
{
200044ce:	1141                	addi	sp,sp,-16
200044d0:	c622                	sw	s0,12(sp)
200044d2:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1044
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
200044d4:	100087b7          	lui	a5,0x10008
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1045
}
200044d8:	853e                	mv	a0,a5
200044da:	4432                	lw	s0,12(sp)
200044dc:	0141                	addi	sp,sp,16
200044de:	8082                	ret

200044e0 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1053
{
200044e0:	1141                	addi	sp,sp,-16
200044e2:	c622                	sw	s0,12(sp)
200044e4:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1054
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
200044e6:	83418793          	addi	a5,gp,-1996 # 80000abc <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1055
}
200044ea:	853e                	mv	a0,a5
200044ec:	4432                	lw	s0,12(sp)
200044ee:	0141                	addi	sp,sp,16
200044f0:	8082                	ret

200044f2 <get_pll_config_freq>:
get_pll_config_freq():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:140
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input
 * frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate,
                                const struct pll_config_t *config) {
200044f2:	1101                	addi	sp,sp,-32
200044f4:	ce22                	sw	s0,28(sp)
200044f6:	1000                	addi	s0,sp,32
200044f8:	fea42623          	sw	a0,-20(s0)
200044fc:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141
    if (pll_input_rate < config->min_input_rate ||
20004500:	fe842783          	lw	a5,-24(s0)
20004504:	479c                	lw	a5,8(a5)
20004506:	fec42703          	lw	a4,-20(s0)
2000450a:	00f76963          	bltu	a4,a5,2000451c <get_pll_config_freq+0x2a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142 (discriminator 1)
        pll_input_rate > config->max_input_rate)
2000450e:	fe842783          	lw	a5,-24(s0)
20004512:	47dc                	lw	a5,12(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141 (discriminator 1)
    if (pll_input_rate < config->min_input_rate ||
20004514:	fec42703          	lw	a4,-20(s0)
20004518:	00e7f463          	bgeu	a5,a4,20004520 <get_pll_config_freq+0x2e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:143
        return PLL_CONFIG_NOT_VALID;
2000451c:	57fd                	li	a5,-1
2000451e:	a829                	j	20004538 <get_pll_config_freq+0x46>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:145

    return pll_input_rate * config->multiplier / config->divisor;
20004520:	fe842783          	lw	a5,-24(s0)
20004524:	4398                	lw	a4,0(a5)
20004526:	fec42783          	lw	a5,-20(s0)
2000452a:	02f70733          	mul	a4,a4,a5
2000452e:	fe842783          	lw	a5,-24(s0)
20004532:	43dc                	lw	a5,4(a5)
20004534:	02f757b3          	divu	a5,a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:146
}
20004538:	853e                	mv	a0,a5
2000453a:	4472                	lw	s0,28(sp)
2000453c:	6105                	addi	sp,sp,32
2000453e:	8082                	ret

20004540 <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:161
}

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(
    struct __metal_driver_sifive_fe310_g000_pll *pll) {
20004540:	7139                	addi	sp,sp,-64
20004542:	de06                	sw	ra,60(sp)
20004544:	dc22                	sw	s0,56(sp)
20004546:	0080                	addi	s0,sp,64
20004548:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:163
    struct metal_clock *pllref =
        __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
2000454c:	fcc42783          	lw	a5,-52(s0)
20004550:	853e                	mv	a0,a5
20004552:	3701                	jal	20004452 <__metal_driver_sifive_fe310_g000_pll_pllref>
20004554:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:164
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20004558:	3785                	jal	200044b8 <__metal_driver_sifive_fe310_g000_pll_init_rate>
2000455a:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
2000455e:	37a9                	jal	200044a8 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20004560:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:166
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20004564:	37ad                	jal	200044ce <__metal_driver_sifive_fe310_g000_prci_base>
20004566:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    __metal_io_u32 *pllcfg = (__metal_io_u32 *)(base + config_offset);
2000456a:	fe042703          	lw	a4,-32(s0)
2000456e:	fe442783          	lw	a5,-28(s0)
20004572:	97ba                	add	a5,a5,a4
20004574:	fcf42e23          	sw	a5,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it
     */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20004578:	fcc42783          	lw	a5,-52(s0)
2000457c:	43dc                	lw	a5,4(a5)
2000457e:	853e                	mv	a0,a5
20004580:	738010ef          	jal	ra,20005cb8 <_metal_clock_call_all_callbacks>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:176

    /* If we're running off of the PLL, switch off before we start configuring
     * it*/
    if ((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20004584:	fdc42783          	lw	a5,-36(s0)
20004588:	4398                	lw	a4,0(a5)
2000458a:	67c1                	lui	a5,0x10
2000458c:	8ff9                	and	a5,a5,a4
2000458e:	eb91                	bnez	a5,200045a2 <__metal_driver_sifive_fe310_g000_pll_init+0x62>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:177
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20004590:	fdc42783          	lw	a5,-36(s0)
20004594:	4398                	lw	a4,0(a5)
20004596:	77c1                	lui	a5,0xffff0
20004598:	17fd                	addi	a5,a5,-1
2000459a:	8f7d                	and	a4,a4,a5
2000459c:	fdc42783          	lw	a5,-36(s0)
200045a0:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:180

    /* Make sure we're running off of the external oscillator for stability */
    if (pllref != NULL)
200045a2:	fec42783          	lw	a5,-20(s0)
200045a6:	cb91                	beqz	a5,200045ba <__metal_driver_sifive_fe310_g000_pll_init+0x7a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
200045a8:	fdc42783          	lw	a5,-36(s0)
200045ac:	4398                	lw	a4,0(a5)
200045ae:	000207b7          	lui	a5,0x20
200045b2:	8f5d                	or	a4,a4,a5
200045b4:	fdc42783          	lw	a5,-36(s0)
200045b8:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
200045ba:	fcc42783          	lw	a5,-52(s0)
200045be:	439c                	lw	a5,0(a5)
200045c0:	43d8                	lw	a4,4(a5)
200045c2:	fcc42783          	lw	a5,-52(s0)
200045c6:	fe842583          	lw	a1,-24(s0)
200045ca:	853e                	mv	a0,a5
200045cc:	9702                	jalr	a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:189

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
200045ce:	fcc42783          	lw	a5,-52(s0)
200045d2:	479c                	lw	a5,8(a5)
200045d4:	853e                	mv	a0,a5
200045d6:	6e2010ef          	jal	ra,20005cb8 <_metal_clock_call_all_callbacks>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
}
200045da:	0001                	nop
200045dc:	50f2                	lw	ra,60(sp)
200045de:	5462                	lw	s0,56(sp)
200045e0:	6121                	addi	sp,sp,64
200045e2:	8082                	ret

200045e4 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(
    const struct metal_clock *clock) {
200045e4:	711d                	addi	sp,sp,-96
200045e6:	ce86                	sw	ra,92(sp)
200045e8:	cca2                	sw	s0,88(sp)
200045ea:	1080                	addi	s0,sp,96
200045ec:	faa42623          	sw	a0,-84(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    struct metal_clock *pllref =
        __metal_driver_sifive_fe310_g000_pll_pllref(clock);
200045f0:	fac42503          	lw	a0,-84(s0)
200045f4:	3db9                	jal	20004452 <__metal_driver_sifive_fe310_g000_pll_pllref>
200045f6:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197
    struct metal_clock *pllsel0 =
        __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
200045fa:	fac42503          	lw	a0,-84(s0)
200045fe:	3d2d                	jal	20004438 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20004600:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:199
    long config_offset =
        __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20004604:	fac42503          	lw	a0,-84(s0)
20004608:	3545                	jal	200044a8 <__metal_driver_sifive_fe310_g000_pll_config_offset>
2000460a:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:201
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
        __metal_driver_sifive_fe310_g000_pll_config_base(clock);
2000460e:	fac42503          	lw	a0,-84(s0)
20004612:	3551                	jal	20004496 <__metal_driver_sifive_fe310_g000_pll_config_base>
20004614:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
    long divider_offset =
        __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20004618:	fac42503          	lw	a0,-84(s0)
2000461c:	359d                	jal	20004482 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
2000461e:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:205
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
        __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20004622:	fac42503          	lw	a0,-84(s0)
20004626:	3599                	jal	2000446c <__metal_driver_sifive_fe310_g000_pll_divider_base>
20004628:	fca42c23          	sw	a0,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
        __metal_driver_sifive_fe310_g000_prci_vtable();
2000462c:	3d55                	jal	200044e0 <__metal_driver_sifive_fe310_g000_prci_vtable>
2000462e:	fca42a23          	sw	a0,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:209

    long cfg = vtable->get_reg(config_base, config_offset);
20004632:	fd442783          	lw	a5,-44(s0)
20004636:	439c                	lw	a5,0(a5)
20004638:	fe442583          	lw	a1,-28(s0)
2000463c:	fe042503          	lw	a0,-32(s0)
20004640:	9782                	jalr	a5
20004642:	fca42823          	sw	a0,-48(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:210
    long div = vtable->get_reg(divider_base, divider_offset);
20004646:	fd442783          	lw	a5,-44(s0)
2000464a:	439c                	lw	a5,0(a5)
2000464c:	fdc42583          	lw	a1,-36(s0)
20004650:	fd842503          	lw	a0,-40(s0)
20004654:	9782                	jalr	a5
20004656:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:214

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
2000465a:	fd042703          	lw	a4,-48(s0)
2000465e:	67c1                	lui	a5,0x10
20004660:	8f7d                	and	a4,a4,a5
20004662:	67c1                	lui	a5,0x10
20004664:	00f77863          	bgeu	a4,a5,20004674 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x90>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215
        return metal_clock_get_rate_hz(pllsel0);
20004668:	fe842503          	lw	a0,-24(s0)
2000466c:	6e0010ef          	jal	ra,20005d4c <metal_clock_get_rate_hz>
20004670:	87aa                	mv	a5,a0
20004672:	a8e1                	j	2000474a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(
        __METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20004674:	fd042703          	lw	a4,-48(s0)
20004678:	000207b7          	lui	a5,0x20
2000467c:	8f7d                	and	a4,a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long ref_hz = metal_clock_get_rate_hz(
2000467e:	000207b7          	lui	a5,0x20
20004682:	00f76563          	bltu	a4,a5,2000468c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa8>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219 (discriminator 1)
20004686:	fec42783          	lw	a5,-20(s0)
2000468a:	a019                	j	20004690 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xac>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219 (discriminator 2)
2000468c:	fe842783          	lw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219 (discriminator 4)
20004690:	853e                	mv	a0,a5
20004692:	6ba010ef          	jal	ra,20005d4c <metal_clock_get_rate_hz>
20004696:	fca42423          	sw	a0,-56(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
2000469a:	fd042703          	lw	a4,-48(s0)
2000469e:	000407b7          	lui	a5,0x40
200046a2:	8f7d                	and	a4,a4,a5
200046a4:	000407b7          	lui	a5,0x40
200046a8:	00f76563          	bltu	a4,a5,200046b2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xce>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
        return ref_hz;
200046ac:	fc842783          	lw	a5,-56(s0)
200046b0:	a869                	j	2000474a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
200046b2:	fd042783          	lw	a5,-48(s0)
200046b6:	8b9d                	andi	a5,a5,7
200046b8:	0785                	addi	a5,a5,1
200046ba:	fcf42223          	sw	a5,-60(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
200046be:	fd042783          	lw	a5,-48(s0)
200046c2:	3f07f793          	andi	a5,a5,1008
200046c6:	8391                	srli	a5,a5,0x4
200046c8:	0785                	addi	a5,a5,1
200046ca:	0786                	slli	a5,a5,0x1
200046cc:	fcf42023          	sw	a5,-64(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:230
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
200046d0:	fd042703          	lw	a4,-48(s0)
200046d4:	6785                	lui	a5,0x1
200046d6:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
200046da:	8f7d                	and	a4,a4,a5
200046dc:	3ff00793          	li	a5,1023
200046e0:	00e7e463          	bltu	a5,a4,200046e8 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x104>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:231
        return -1;
200046e4:	57fd                	li	a5,-1
200046e6:	a095                	j	2000474a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:232
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
200046e8:	fd042703          	lw	a4,-48(s0)
200046ec:	6785                	lui	a5,0x1
200046ee:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
200046f2:	8ff9                	and	a5,a5,a4
200046f4:	83a9                	srli	a5,a5,0xa
200046f6:	4705                	li	a4,1
200046f8:	00f717b3          	sll	a5,a4,a5
200046fc:	faf42e23          	sw	a5,-68(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:237

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20004700:	fc842703          	lw	a4,-56(s0)
20004704:	fc442783          	lw	a5,-60(s0)
20004708:	02f74733          	div	a4,a4,a5
2000470c:	fc042783          	lw	a5,-64(s0)
20004710:	02f70733          	mul	a4,a4,a5
20004714:	fbc42783          	lw	a5,-68(s0)
20004718:	02f747b3          	div	a5,a4,a5
2000471c:	faf42c23          	sw	a5,-72(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:238
    if (__METAL_GET_FIELD(div, DIV_1))
20004720:	fcc42783          	lw	a5,-52(s0)
20004724:	1007f713          	andi	a4,a5,256
20004728:	0ff00793          	li	a5,255
2000472c:	00e7f563          	bgeu	a5,a4,20004736 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x152>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:239
        return pllout;
20004730:	fb842783          	lw	a5,-72(s0)
20004734:	a819                	j	2000474a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20004736:	fb842703          	lw	a4,-72(s0)
2000473a:	fcc42783          	lw	a5,-52(s0)
2000473e:	03f7f793          	andi	a5,a5,63
20004742:	0785                	addi	a5,a5,1
20004744:	0786                	slli	a5,a5,0x1
20004746:	02f757b3          	divu	a5,a4,a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
}
2000474a:	853e                	mv	a0,a5
2000474c:	40f6                	lw	ra,92(sp)
2000474e:	4466                	lw	s0,88(sp)
20004750:	6125                	addi	sp,sp,96
20004752:	8082                	ret

20004754 <find_closest_config>:
find_closest_config():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
 *  - ref_hz PLL input frequency
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate) {
20004754:	7139                	addi	sp,sp,-64
20004756:	de06                	sw	ra,60(sp)
20004758:	dc22                	sw	s0,56(sp)
2000475a:	0080                	addi	s0,sp,64
2000475c:	fca42623          	sw	a0,-52(s0)
20004760:	fcb42423          	sw	a1,-56(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:253
    int closest_index = -1;
20004764:	57fd                	li	a5,-1
20004766:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
    long closest_diff = LONG_MAX;
2000476a:	800007b7          	lui	a5,0x80000
2000476e:	fff7c793          	not	a5,a5
20004772:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:258

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for (int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0;
20004776:	04300793          	li	a5,67
2000477a:	fef42223          	sw	a5,-28(s0)
2000477e:	a0b5                	j	200047ea <find_closest_config+0x96>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
         i--) {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
20004780:	fcc42683          	lw	a3,-52(s0)
20004784:	fe442783          	lw	a5,-28(s0)
20004788:	00579713          	slli	a4,a5,0x5
2000478c:	200067b7          	lui	a5,0x20006
20004790:	3f078793          	addi	a5,a5,1008 # 200063f0 <pll_configs>
20004794:	97ba                	add	a5,a5,a4
20004796:	85be                	mv	a1,a5
20004798:	8536                	mv	a0,a3
2000479a:	d59ff0ef          	jal	ra,200044f2 <get_pll_config_freq>
2000479e:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
        if (config_freq != PLL_CONFIG_NOT_VALID) {
200047a2:	fe042703          	lw	a4,-32(s0)
200047a6:	57fd                	li	a5,-1
200047a8:	02f70c63          	beq	a4,a5,200047e0 <find_closest_config+0x8c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:262
            long freq_diff = abs(config_freq - rate);
200047ac:	fe042703          	lw	a4,-32(s0)
200047b0:	fc842783          	lw	a5,-56(s0)
200047b4:	8f1d                	sub	a4,a4,a5
200047b6:	41f75793          	srai	a5,a4,0x1f
200047ba:	8f3d                	xor	a4,a4,a5
200047bc:	40f707b3          	sub	a5,a4,a5
200047c0:	fcf42e23          	sw	a5,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:263
            if (freq_diff < closest_diff) {
200047c4:	fdc42703          	lw	a4,-36(s0)
200047c8:	fe842783          	lw	a5,-24(s0)
200047cc:	00f75a63          	bge	a4,a5,200047e0 <find_closest_config+0x8c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:264
                closest_index = i;
200047d0:	fe442783          	lw	a5,-28(s0)
200047d4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265
                closest_diff = freq_diff;
200047d8:	fdc42783          	lw	a5,-36(s0)
200047dc:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:259
         i--) {
200047e0:	fe442783          	lw	a5,-28(s0)
200047e4:	17fd                	addi	a5,a5,-1
200047e6:	fef42223          	sw	a5,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:258 (discriminator 1)
    for (int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0;
200047ea:	fe442783          	lw	a5,-28(s0)
200047ee:	f807d9e3          	bgez	a5,20004780 <find_closest_config+0x2c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
            }
        }
    }

    return closest_index;
200047f2:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:271
}
200047f6:	853e                	mv	a0,a5
200047f8:	50f2                	lw	ra,60(sp)
200047fa:	5462                	lw	s0,56(sp)
200047fc:	6121                	addi	sp,sp,64
200047fe:	8082                	ret

20004800 <configure_pll>:
configure_pll():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv,
                          const struct pll_config_t *config) {
20004800:	1101                	addi	sp,sp,-32
20004802:	ce22                	sw	s0,28(sp)
20004804:	1000                	addi	s0,sp,32
20004806:	fea42623          	sw	a0,-20(s0)
2000480a:	feb42423          	sw	a1,-24(s0)
2000480e:	fec42223          	sw	a2,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:276
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
20004812:	fec42783          	lw	a5,-20(s0)
20004816:	439c                	lw	a5,0(a5)
20004818:	ff87f713          	andi	a4,a5,-8
2000481c:	fec42783          	lw	a5,-20(s0)
20004820:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:277
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
20004822:	fec42783          	lw	a5,-20(s0)
20004826:	4398                	lw	a4,0(a5)
20004828:	fe442783          	lw	a5,-28(s0)
2000482c:	4b9c                	lw	a5,16(a5)
2000482e:	8b9d                	andi	a5,a5,7
20004830:	8f5d                	or	a4,a4,a5
20004832:	fec42783          	lw	a5,-20(s0)
20004836:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:279

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20004838:	fec42783          	lw	a5,-20(s0)
2000483c:	439c                	lw	a5,0(a5)
2000483e:	c0f7f713          	andi	a4,a5,-1009
20004842:	fec42783          	lw	a5,-20(s0)
20004846:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20004848:	fec42783          	lw	a5,-20(s0)
2000484c:	4398                	lw	a4,0(a5)
2000484e:	fe442783          	lw	a5,-28(s0)
20004852:	4bdc                	lw	a5,20(a5)
20004854:	0792                	slli	a5,a5,0x4
20004856:	3f07f793          	andi	a5,a5,1008
2000485a:	8f5d                	or	a4,a4,a5
2000485c:	fec42783          	lw	a5,-20(s0)
20004860:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:282

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
20004862:	fec42783          	lw	a5,-20(s0)
20004866:	4398                	lw	a4,0(a5)
20004868:	77fd                	lui	a5,0xfffff
2000486a:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffdc8b>
2000486e:	8f7d                	and	a4,a4,a5
20004870:	fec42783          	lw	a5,-20(s0)
20004874:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:283
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
20004876:	fec42783          	lw	a5,-20(s0)
2000487a:	4398                	lw	a4,0(a5)
2000487c:	fe442783          	lw	a5,-28(s0)
20004880:	4f9c                	lw	a5,24(a5)
20004882:	00a79693          	slli	a3,a5,0xa
20004886:	6785                	lui	a5,0x1
20004888:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
2000488c:	8ff5                	and	a5,a5,a3
2000488e:	8f5d                	or	a4,a4,a5
20004890:	fec42783          	lw	a5,-20(s0)
20004894:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285

    if (config->d < 0) {
20004896:	fe442783          	lw	a5,-28(s0)
2000489a:	4fdc                	lw	a5,28(a5)
2000489c:	0207db63          	bgez	a5,200048d2 <configure_pll+0xd2>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
200048a0:	fe842783          	lw	a5,-24(s0)
200048a4:	439c                	lw	a5,0(a5)
200048a6:	1007e713          	ori	a4,a5,256
200048aa:	fe842783          	lw	a5,-24(s0)
200048ae:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:289

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
200048b0:	fe842783          	lw	a5,-24(s0)
200048b4:	439c                	lw	a5,0(a5)
200048b6:	fc07f713          	andi	a4,a5,-64
200048ba:	fe842783          	lw	a5,-24(s0)
200048be:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:290
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
200048c0:	fe842783          	lw	a5,-24(s0)
200048c4:	439c                	lw	a5,0(a5)
200048c6:	0017e713          	ori	a4,a5,1
200048ca:	fe842783          	lw	a5,-24(s0)
200048ce:	c398                	sw	a4,0(a5)
200048d0:	a82d                	j	2000490a <configure_pll+0x10a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:292
    } else {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
200048d2:	fe842783          	lw	a5,-24(s0)
200048d6:	439c                	lw	a5,0(a5)
200048d8:	eff7f713          	andi	a4,a5,-257
200048dc:	fe842783          	lw	a5,-24(s0)
200048e0:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
200048e2:	fe842783          	lw	a5,-24(s0)
200048e6:	439c                	lw	a5,0(a5)
200048e8:	fc07f713          	andi	a4,a5,-64
200048ec:	fe842783          	lw	a5,-24(s0)
200048f0:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
200048f2:	fe842783          	lw	a5,-24(s0)
200048f6:	4398                	lw	a4,0(a5)
200048f8:	fe442783          	lw	a5,-28(s0)
200048fc:	4fdc                	lw	a5,28(a5)
200048fe:	03f7f793          	andi	a5,a5,63
20004902:	8f5d                	or	a4,a4,a5
20004904:	fe842783          	lw	a5,-24(s0)
20004908:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
2000490a:	fec42783          	lw	a5,-20(s0)
2000490e:	4398                	lw	a4,0(a5)
20004910:	fffc07b7          	lui	a5,0xfffc0
20004914:	17fd                	addi	a5,a5,-1
20004916:	8f7d                	and	a4,a4,a5
20004918:	fec42783          	lw	a5,-20(s0)
2000491c:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301

    /* Wait for PLL to lock */
    while ((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0)
2000491e:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301 (discriminator 1)
20004920:	fec42783          	lw	a5,-20(s0)
20004924:	439c                	lw	a5,0(a5)
20004926:	fe07dde3          	bgez	a5,20004920 <configure_pll+0x120>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
        ;
}
2000492a:	0001                	nop
2000492c:	4472                	lw	s0,28(sp)
2000492e:	6105                	addi	sp,sp,32
20004930:	8082                	ret

20004932 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock,
                                                      long rate) {
20004932:	715d                	addi	sp,sp,-80
20004934:	c686                	sw	ra,76(sp)
20004936:	c4a2                	sw	s0,72(sp)
20004938:	0880                	addi	s0,sp,80
2000493a:	faa42e23          	sw	a0,-68(s0)
2000493e:	fab42c23          	sw	a1,-72(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:308
    struct metal_clock *pllref =
        __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20004942:	fbc42503          	lw	a0,-68(s0)
20004946:	b0dff0ef          	jal	ra,20004452 <__metal_driver_sifive_fe310_g000_pll_pllref>
2000494a:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
    struct metal_clock *pllsel0 =
        __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
2000494e:	fbc42503          	lw	a0,-68(s0)
20004952:	ae7ff0ef          	jal	ra,20004438 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20004956:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:312
    long config_offset =
        __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
2000495a:	fbc42503          	lw	a0,-68(s0)
2000495e:	b4bff0ef          	jal	ra,200044a8 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20004962:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314
    long divider_offset =
        __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20004966:	fbc42503          	lw	a0,-68(s0)
2000496a:	b19ff0ef          	jal	ra,20004482 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
2000496e:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:315
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20004972:	b5dff0ef          	jal	ra,200044ce <__metal_driver_sifive_fe310_g000_prci_base>
20004976:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317

    __metal_io_u32 *pllcfg = (__metal_io_u32 *)(base + config_offset);
2000497a:	fdc42703          	lw	a4,-36(s0)
2000497e:	fe442783          	lw	a5,-28(s0)
20004982:	97ba                	add	a5,a5,a4
20004984:	fcf42c23          	sw	a5,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:318
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *)(base + divider_offset);
20004988:	fdc42703          	lw	a4,-36(s0)
2000498c:	fe042783          	lw	a5,-32(s0)
20004990:	97ba                	add	a5,a5,a4
20004992:	fcf42a23          	sw	a5,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:321

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20004996:	fd842783          	lw	a5,-40(s0)
2000499a:	4398                	lw	a4,0(a5)
2000499c:	67c1                	lui	a5,0x10
2000499e:	8ff9                	and	a5,a5,a4
200049a0:	cb91                	beqz	a5,200049b4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:322
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
200049a2:	fd842783          	lw	a5,-40(s0)
200049a6:	4398                	lw	a4,0(a5)
200049a8:	77c1                	lui	a5,0xffff0
200049aa:	17fd                	addi	a5,a5,-1
200049ac:	8f7d                	and	a4,a4,a5
200049ae:	fd842783          	lw	a5,-40(s0)
200049b2:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:327

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(
        __METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
200049b4:	fd842783          	lw	a5,-40(s0)
200049b8:	4398                	lw	a4,0(a5)
200049ba:	000207b7          	lui	a5,0x20
200049be:	8ff9                	and	a5,a5,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
    long ref_hz = metal_clock_get_rate_hz(
200049c0:	c781                	beqz	a5,200049c8 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326 (discriminator 1)
200049c2:	fec42783          	lw	a5,-20(s0)
200049c6:	a019                	j	200049cc <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326 (discriminator 2)
200049c8:	fe842783          	lw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326 (discriminator 4)
200049cc:	853e                	mv	a0,a5
200049ce:	37e010ef          	jal	ra,20005d4c <metal_clock_get_rate_hz>
200049d2:	fca42823          	sw	a0,-48(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL
     */
    if ((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate) {
200049d6:	fd042703          	lw	a4,-48(s0)
200049da:	87ba                	mv	a5,a4
200049dc:	0786                	slli	a5,a5,0x1
200049de:	97ba                	add	a5,a5,a4
200049e0:	41f7d713          	srai	a4,a5,0x1f
200049e4:	8b0d                	andi	a4,a4,3
200049e6:	97ba                	add	a5,a5,a4
200049e8:	8789                	srai	a5,a5,0x2
200049ea:	873e                	mv	a4,a5
200049ec:	fb842783          	lw	a5,-72(s0)
200049f0:	02e7cb63          	blt	a5,a4,20004a26 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331 (discriminator 1)
200049f4:	fd042703          	lw	a4,-48(s0)
200049f8:	87ba                	mv	a5,a4
200049fa:	078a                	slli	a5,a5,0x2
200049fc:	97ba                	add	a5,a5,a4
200049fe:	41f7d713          	srai	a4,a5,0x1f
20004a02:	8b0d                	andi	a4,a4,3
20004a04:	97ba                	add	a5,a5,a4
20004a06:	8789                	srai	a5,a5,0x2
20004a08:	873e                	mv	a4,a5
20004a0a:	fb842783          	lw	a5,-72(s0)
20004a0e:	00f74c63          	blt	a4,a5,20004a26 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:332
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20004a12:	fd842783          	lw	a5,-40(s0)
20004a16:	4398                	lw	a4,0(a5)
20004a18:	000407b7          	lui	a5,0x40
20004a1c:	8f5d                	or	a4,a4,a5
20004a1e:	fd842783          	lw	a5,-40(s0)
20004a22:	c398                	sw	a4,0(a5)
20004a24:	a881                	j	20004a74 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:334
    } else {
        int config_index = find_closest_config(ref_hz, rate);
20004a26:	fb842583          	lw	a1,-72(s0)
20004a2a:	fd042503          	lw	a0,-48(s0)
20004a2e:	d27ff0ef          	jal	ra,20004754 <find_closest_config>
20004a32:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:335
        if (config_index != -1) {
20004a36:	fcc42703          	lw	a4,-52(s0)
20004a3a:	57fd                	li	a5,-1
20004a3c:	02f70363          	beq	a4,a5,20004a62 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x130>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
20004a40:	fcc42783          	lw	a5,-52(s0)
20004a44:	00579713          	slli	a4,a5,0x5
20004a48:	200067b7          	lui	a5,0x20006
20004a4c:	3f078793          	addi	a5,a5,1008 # 200063f0 <pll_configs>
20004a50:	97ba                	add	a5,a5,a4
20004a52:	863e                	mv	a2,a5
20004a54:	fd442583          	lw	a1,-44(s0)
20004a58:	fd842503          	lw	a0,-40(s0)
20004a5c:	da5ff0ef          	jal	ra,20004800 <configure_pll>
20004a60:	a811                	j	20004a74 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
        } else {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20004a62:	fd842783          	lw	a5,-40(s0)
20004a66:	4398                	lw	a4,0(a5)
20004a68:	000407b7          	lui	a5,0x40
20004a6c:	8f5d                	or	a4,a4,a5
20004a6e:	fd842783          	lw	a5,-40(s0)
20004a72:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
20004a74:	fd842783          	lw	a5,-40(s0)
20004a78:	4398                	lw	a4,0(a5)
20004a7a:	67c1                	lui	a5,0x10
20004a7c:	8f5d                	or	a4,a4,a5
20004a7e:	fd842783          	lw	a5,-40(s0)
20004a82:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
20004a84:	fbc42503          	lw	a0,-68(s0)
20004a88:	b5dff0ef          	jal	ra,200045e4 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
20004a8c:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:347
}
20004a8e:	853e                	mv	a0,a5
20004a90:	40b6                	lw	ra,76(sp)
20004a92:	4426                	lw	s0,72(sp)
20004a94:	6161                	addi	sp,sp,80
20004a96:	8082                	ret

20004a98 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1043
{
20004a98:	1141                	addi	sp,sp,-16
20004a9a:	c622                	sw	s0,12(sp)
20004a9c:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1044
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20004a9e:	100087b7          	lui	a5,0x10008
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:1045
}
20004aa2:	853e                	mv	a0,a5
20004aa4:	4432                	lw	s0,12(sp)
20004aa6:	0141                	addi	sp,sp,16
20004aa8:	8082                	ret

20004aaa <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(
    const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
20004aaa:	7179                	addi	sp,sp,-48
20004aac:	d606                	sw	ra,44(sp)
20004aae:	d422                	sw	s0,40(sp)
20004ab0:	1800                	addi	s0,sp,48
20004ab2:	fca42e23          	sw	a0,-36(s0)
20004ab6:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
20004aba:	3ff9                	jal	20004a98 <__metal_driver_sifive_fe310_g000_prci_base>
20004abc:	87aa                	mv	a5,a0
20004abe:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
20004ac2:	fd842703          	lw	a4,-40(s0)
20004ac6:	fec42783          	lw	a5,-20(s0)
20004aca:	97ba                	add	a5,a5,a4
20004acc:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:15
}
20004ace:	853e                	mv	a0,a5
20004ad0:	50b2                	lw	ra,44(sp)
20004ad2:	5422                	lw	s0,40(sp)
20004ad4:	6145                	addi	sp,sp,48
20004ad6:	8082                	ret

20004ad8 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19

long __metal_driver_sifive_fe310_g000_prci_set_reg(
    const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset,
    long value) {
20004ad8:	7179                	addi	sp,sp,-48
20004ada:	d606                	sw	ra,44(sp)
20004adc:	d422                	sw	s0,40(sp)
20004ade:	1800                	addi	s0,sp,48
20004ae0:	fca42e23          	sw	a0,-36(s0)
20004ae4:	fcb42c23          	sw	a1,-40(s0)
20004ae8:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:20
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
20004aec:	3775                	jal	20004a98 <__metal_driver_sifive_fe310_g000_prci_base>
20004aee:	87aa                	mv	a5,a0
20004af0:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:21
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
20004af4:	fd842703          	lw	a4,-40(s0)
20004af8:	fec42783          	lw	a5,-20(s0)
20004afc:	97ba                	add	a5,a5,a4
20004afe:	873e                	mv	a4,a5
20004b00:	fd442783          	lw	a5,-44(s0)
20004b04:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:22
}
20004b06:	853e                	mv	a0,a5
20004b08:	50b2                	lw	ra,44(sp)
20004b0a:	5422                	lw	s0,40(sp)
20004b0c:	6145                	addi	sp,sp,48
20004b0e:	8082                	ret

20004b10 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:390
{
20004b10:	1101                	addi	sp,sp,-32
20004b12:	ce22                	sw	s0,28(sp)
20004b14:	1000                	addi	s0,sp,32
20004b16:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:391
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20004b1a:	fec42703          	lw	a4,-20(s0)
20004b1e:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004b22:	00f71563          	bne	a4,a5,20004b2c <__metal_driver_sifive_gpio0_base+0x1c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:392
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20004b26:	100127b7          	lui	a5,0x10012
20004b2a:	a011                	j	20004b2e <__metal_driver_sifive_gpio0_base+0x1e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:395
		return 0;
20004b2c:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:397
}
20004b2e:	853e                	mv	a0,a5
20004b30:	4472                	lw	s0,28(sp)
20004b32:	6105                	addi	sp,sp,32
20004b34:	8082                	ret

20004b36 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:420
{
20004b36:	1101                	addi	sp,sp,-32
20004b38:	ce22                	sw	s0,28(sp)
20004b3a:	1000                	addi	s0,sp,32
20004b3c:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:421
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20004b40:	fec42703          	lw	a4,-20(s0)
20004b44:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004b48:	00f71763          	bne	a4,a5,20004b56 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:422
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20004b4c:	800007b7          	lui	a5,0x80000
20004b50:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecd4>
20004b54:	a011                	j	20004b58 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:425
		return 0;
20004b56:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:427
}
20004b58:	853e                	mv	a0,a5
20004b5a:	4472                	lw	s0,28(sp)
20004b5c:	6105                	addi	sp,sp,32
20004b5e:	8082                	ret

20004b60 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:430
{
20004b60:	1101                	addi	sp,sp,-32
20004b62:	ce22                	sw	s0,28(sp)
20004b64:	1000                	addi	s0,sp,32
20004b66:	fea42623          	sw	a0,-20(s0)
20004b6a:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:431
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20004b6e:	fec42703          	lw	a4,-20(s0)
20004b72:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004b76:	00f71763          	bne	a4,a5,20004b84 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:431 (discriminator 1)
20004b7a:	fe842783          	lw	a5,-24(s0)
20004b7e:	e399                	bnez	a5,20004b84 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:432
		return 8;
20004b80:	47a1                	li	a5,8
20004b82:	ae15                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:434
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20004b84:	fec42703          	lw	a4,-20(s0)
20004b88:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004b8c:	00f71963          	bne	a4,a5,20004b9e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:434 (discriminator 1)
20004b90:	fe842703          	lw	a4,-24(s0)
20004b94:	4785                	li	a5,1
20004b96:	00f71463          	bne	a4,a5,20004b9e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:435
		return 9;
20004b9a:	47a5                	li	a5,9
20004b9c:	ae29                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:437
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20004b9e:	fec42703          	lw	a4,-20(s0)
20004ba2:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004ba6:	00f71963          	bne	a4,a5,20004bb8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:437 (discriminator 1)
20004baa:	fe842703          	lw	a4,-24(s0)
20004bae:	4789                	li	a5,2
20004bb0:	00f71463          	bne	a4,a5,20004bb8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:438
		return 10;
20004bb4:	47a9                	li	a5,10
20004bb6:	a601                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:440
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20004bb8:	fec42703          	lw	a4,-20(s0)
20004bbc:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004bc0:	00f71963          	bne	a4,a5,20004bd2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:440 (discriminator 1)
20004bc4:	fe842703          	lw	a4,-24(s0)
20004bc8:	478d                	li	a5,3
20004bca:	00f71463          	bne	a4,a5,20004bd2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:441
		return 11;
20004bce:	47ad                	li	a5,11
20004bd0:	a4dd                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:443
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20004bd2:	fec42703          	lw	a4,-20(s0)
20004bd6:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004bda:	00f71963          	bne	a4,a5,20004bec <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:443 (discriminator 1)
20004bde:	fe842703          	lw	a4,-24(s0)
20004be2:	4791                	li	a5,4
20004be4:	00f71463          	bne	a4,a5,20004bec <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:444
		return 12;
20004be8:	47b1                	li	a5,12
20004bea:	a4f1                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:446
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20004bec:	fec42703          	lw	a4,-20(s0)
20004bf0:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004bf4:	00f71963          	bne	a4,a5,20004c06 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:446 (discriminator 1)
20004bf8:	fe842703          	lw	a4,-24(s0)
20004bfc:	4795                	li	a5,5
20004bfe:	00f71463          	bne	a4,a5,20004c06 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:447
		return 13;
20004c02:	47b5                	li	a5,13
20004c04:	ac4d                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:449
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20004c06:	fec42703          	lw	a4,-20(s0)
20004c0a:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004c0e:	00f71963          	bne	a4,a5,20004c20 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:449 (discriminator 1)
20004c12:	fe842703          	lw	a4,-24(s0)
20004c16:	4799                	li	a5,6
20004c18:	00f71463          	bne	a4,a5,20004c20 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:450
		return 14;
20004c1c:	47b9                	li	a5,14
20004c1e:	ac61                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:452
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20004c20:	fec42703          	lw	a4,-20(s0)
20004c24:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004c28:	00f71963          	bne	a4,a5,20004c3a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:452 (discriminator 1)
20004c2c:	fe842703          	lw	a4,-24(s0)
20004c30:	479d                	li	a5,7
20004c32:	00f71463          	bne	a4,a5,20004c3a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:453
		return 15;
20004c36:	47bd                	li	a5,15
20004c38:	acbd                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:455
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20004c3a:	fec42703          	lw	a4,-20(s0)
20004c3e:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004c42:	00f71963          	bne	a4,a5,20004c54 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:455 (discriminator 1)
20004c46:	fe842703          	lw	a4,-24(s0)
20004c4a:	47a1                	li	a5,8
20004c4c:	00f71463          	bne	a4,a5,20004c54 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:456
		return 16;
20004c50:	47c1                	li	a5,16
20004c52:	a495                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:458
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20004c54:	fec42703          	lw	a4,-20(s0)
20004c58:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004c5c:	00f71963          	bne	a4,a5,20004c6e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:458 (discriminator 1)
20004c60:	fe842703          	lw	a4,-24(s0)
20004c64:	47a5                	li	a5,9
20004c66:	00f71463          	bne	a4,a5,20004c6e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:459
		return 17;
20004c6a:	47c5                	li	a5,17
20004c6c:	a4a9                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:461
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20004c6e:	fec42703          	lw	a4,-20(s0)
20004c72:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004c76:	00f71963          	bne	a4,a5,20004c88 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:461 (discriminator 1)
20004c7a:	fe842703          	lw	a4,-24(s0)
20004c7e:	47a9                	li	a5,10
20004c80:	00f71463          	bne	a4,a5,20004c88 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:462
		return 18;
20004c84:	47c9                	li	a5,18
20004c86:	ac05                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:464
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20004c88:	fec42703          	lw	a4,-20(s0)
20004c8c:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004c90:	00f71963          	bne	a4,a5,20004ca2 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:464 (discriminator 1)
20004c94:	fe842703          	lw	a4,-24(s0)
20004c98:	47ad                	li	a5,11
20004c9a:	00f71463          	bne	a4,a5,20004ca2 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:465
		return 19;
20004c9e:	47cd                	li	a5,19
20004ca0:	ac19                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:467
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20004ca2:	fec42703          	lw	a4,-20(s0)
20004ca6:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004caa:	00f71963          	bne	a4,a5,20004cbc <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:467 (discriminator 1)
20004cae:	fe842703          	lw	a4,-24(s0)
20004cb2:	47b1                	li	a5,12
20004cb4:	00f71463          	bne	a4,a5,20004cbc <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:468
		return 20;
20004cb8:	47d1                	li	a5,20
20004cba:	aaf5                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:470
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20004cbc:	fec42703          	lw	a4,-20(s0)
20004cc0:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004cc4:	00f71963          	bne	a4,a5,20004cd6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:470 (discriminator 1)
20004cc8:	fe842703          	lw	a4,-24(s0)
20004ccc:	47b5                	li	a5,13
20004cce:	00f71463          	bne	a4,a5,20004cd6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:471
		return 21;
20004cd2:	47d5                	li	a5,21
20004cd4:	a2cd                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:473
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20004cd6:	fec42703          	lw	a4,-20(s0)
20004cda:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004cde:	00f71963          	bne	a4,a5,20004cf0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:473 (discriminator 1)
20004ce2:	fe842703          	lw	a4,-24(s0)
20004ce6:	47b9                	li	a5,14
20004ce8:	00f71463          	bne	a4,a5,20004cf0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:474
		return 22;
20004cec:	47d9                	li	a5,22
20004cee:	a2e1                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:476
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20004cf0:	fec42703          	lw	a4,-20(s0)
20004cf4:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004cf8:	00f71963          	bne	a4,a5,20004d0a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:476 (discriminator 1)
20004cfc:	fe842703          	lw	a4,-24(s0)
20004d00:	47bd                	li	a5,15
20004d02:	00f71463          	bne	a4,a5,20004d0a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:477
		return 23;
20004d06:	47dd                	li	a5,23
20004d08:	a27d                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:479
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 16))) {
20004d0a:	fec42703          	lw	a4,-20(s0)
20004d0e:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004d12:	00f71963          	bne	a4,a5,20004d24 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:479 (discriminator 1)
20004d16:	fe842703          	lw	a4,-24(s0)
20004d1a:	47c1                	li	a5,16
20004d1c:	00f71463          	bne	a4,a5,20004d24 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:480
		return 24;
20004d20:	47e1                	li	a5,24
20004d22:	aa51                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:482
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 17))) {
20004d24:	fec42703          	lw	a4,-20(s0)
20004d28:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004d2c:	00f71963          	bne	a4,a5,20004d3e <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:482 (discriminator 1)
20004d30:	fe842703          	lw	a4,-24(s0)
20004d34:	47c5                	li	a5,17
20004d36:	00f71463          	bne	a4,a5,20004d3e <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:483
		return 25;
20004d3a:	47e5                	li	a5,25
20004d3c:	aaad                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:485
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 18))) {
20004d3e:	fec42703          	lw	a4,-20(s0)
20004d42:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004d46:	00f71963          	bne	a4,a5,20004d58 <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:485 (discriminator 1)
20004d4a:	fe842703          	lw	a4,-24(s0)
20004d4e:	47c9                	li	a5,18
20004d50:	00f71463          	bne	a4,a5,20004d58 <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:486
		return 26;
20004d54:	47e9                	li	a5,26
20004d56:	a285                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:488
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 19))) {
20004d58:	fec42703          	lw	a4,-20(s0)
20004d5c:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004d60:	00f71963          	bne	a4,a5,20004d72 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:488 (discriminator 1)
20004d64:	fe842703          	lw	a4,-24(s0)
20004d68:	47cd                	li	a5,19
20004d6a:	00f71463          	bne	a4,a5,20004d72 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:489
		return 27;
20004d6e:	47ed                	li	a5,27
20004d70:	a299                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:491
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 20))) {
20004d72:	fec42703          	lw	a4,-20(s0)
20004d76:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004d7a:	00f71963          	bne	a4,a5,20004d8c <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:491 (discriminator 1)
20004d7e:	fe842703          	lw	a4,-24(s0)
20004d82:	47d1                	li	a5,20
20004d84:	00f71463          	bne	a4,a5,20004d8c <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:492
		return 28;
20004d88:	47f1                	li	a5,28
20004d8a:	a235                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:494
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 21))) {
20004d8c:	fec42703          	lw	a4,-20(s0)
20004d90:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004d94:	00f71963          	bne	a4,a5,20004da6 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:494 (discriminator 1)
20004d98:	fe842703          	lw	a4,-24(s0)
20004d9c:	47d5                	li	a5,21
20004d9e:	00f71463          	bne	a4,a5,20004da6 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:495
		return 29;
20004da2:	47f5                	li	a5,29
20004da4:	aa09                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:497
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 22))) {
20004da6:	fec42703          	lw	a4,-20(s0)
20004daa:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004dae:	00f71963          	bne	a4,a5,20004dc0 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:497 (discriminator 1)
20004db2:	fe842703          	lw	a4,-24(s0)
20004db6:	47d9                	li	a5,22
20004db8:	00f71463          	bne	a4,a5,20004dc0 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:498
		return 30;
20004dbc:	47f9                	li	a5,30
20004dbe:	a8e5                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:500
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 23))) {
20004dc0:	fec42703          	lw	a4,-20(s0)
20004dc4:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004dc8:	00f71963          	bne	a4,a5,20004dda <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:500 (discriminator 1)
20004dcc:	fe842703          	lw	a4,-24(s0)
20004dd0:	47dd                	li	a5,23
20004dd2:	00f71463          	bne	a4,a5,20004dda <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:501
		return 31;
20004dd6:	47fd                	li	a5,31
20004dd8:	a8f9                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:503
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 24))) {
20004dda:	fec42703          	lw	a4,-20(s0)
20004dde:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004de2:	00f71a63          	bne	a4,a5,20004df6 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:503 (discriminator 1)
20004de6:	fe842703          	lw	a4,-24(s0)
20004dea:	47e1                	li	a5,24
20004dec:	00f71563          	bne	a4,a5,20004df6 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:504
		return 32;
20004df0:	02000793          	li	a5,32
20004df4:	a0c9                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:506
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 25))) {
20004df6:	fec42703          	lw	a4,-20(s0)
20004dfa:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004dfe:	00f71a63          	bne	a4,a5,20004e12 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:506 (discriminator 1)
20004e02:	fe842703          	lw	a4,-24(s0)
20004e06:	47e5                	li	a5,25
20004e08:	00f71563          	bne	a4,a5,20004e12 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:507
		return 33;
20004e0c:	02100793          	li	a5,33
20004e10:	a05d                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:509
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 26))) {
20004e12:	fec42703          	lw	a4,-20(s0)
20004e16:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004e1a:	00f71a63          	bne	a4,a5,20004e2e <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:509 (discriminator 1)
20004e1e:	fe842703          	lw	a4,-24(s0)
20004e22:	47e9                	li	a5,26
20004e24:	00f71563          	bne	a4,a5,20004e2e <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:510
		return 34;
20004e28:	02200793          	li	a5,34
20004e2c:	a069                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:512
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 27))) {
20004e2e:	fec42703          	lw	a4,-20(s0)
20004e32:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004e36:	00f71a63          	bne	a4,a5,20004e4a <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:512 (discriminator 1)
20004e3a:	fe842703          	lw	a4,-24(s0)
20004e3e:	47ed                	li	a5,27
20004e40:	00f71563          	bne	a4,a5,20004e4a <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:513
		return 35;
20004e44:	02300793          	li	a5,35
20004e48:	a0bd                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:515
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 28))) {
20004e4a:	fec42703          	lw	a4,-20(s0)
20004e4e:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004e52:	00f71a63          	bne	a4,a5,20004e66 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:515 (discriminator 1)
20004e56:	fe842703          	lw	a4,-24(s0)
20004e5a:	47f1                	li	a5,28
20004e5c:	00f71563          	bne	a4,a5,20004e66 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:516
		return 36;
20004e60:	02400793          	li	a5,36
20004e64:	a889                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:518
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 29))) {
20004e66:	fec42703          	lw	a4,-20(s0)
20004e6a:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004e6e:	00f71963          	bne	a4,a5,20004e80 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:518 (discriminator 1)
20004e72:	fe842703          	lw	a4,-24(s0)
20004e76:	47f5                	li	a5,29
20004e78:	00f71463          	bne	a4,a5,20004e80 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:519
		return 27;
20004e7c:	47ed                	li	a5,27
20004e7e:	a825                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:521
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 30))) {
20004e80:	fec42703          	lw	a4,-20(s0)
20004e84:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004e88:	00f71963          	bne	a4,a5,20004e9a <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:521 (discriminator 1)
20004e8c:	fe842703          	lw	a4,-24(s0)
20004e90:	47f9                	li	a5,30
20004e92:	00f71463          	bne	a4,a5,20004e9a <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:522
		return 28;
20004e96:	47f1                	li	a5,28
20004e98:	a839                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:524
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 31))) {
20004e9a:	fec42703          	lw	a4,-20(s0)
20004e9e:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20004ea2:	00f71963          	bne	a4,a5,20004eb4 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:524 (discriminator 1)
20004ea6:	fe842703          	lw	a4,-24(s0)
20004eaa:	47fd                	li	a5,31
20004eac:	00f71463          	bne	a4,a5,20004eb4 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:525
		return 29;
20004eb0:	47f5                	li	a5,29
20004eb2:	a011                	j	20004eb6 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:528
		return 0;
20004eb4:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:530
}
20004eb6:	853e                	mv	a0,a5
20004eb8:	4472                	lw	s0,28(sp)
20004eba:	6105                	addi	sp,sp,32
20004ebc:	8082                	ret

20004ebe <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio,
                                             long source) {
20004ebe:	7179                	addi	sp,sp,-48
20004ec0:	d606                	sw	ra,44(sp)
20004ec2:	d422                	sw	s0,40(sp)
20004ec4:	1800                	addi	s0,sp,48
20004ec6:	fca42e23          	sw	a0,-36(s0)
20004eca:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20004ece:	fdc42503          	lw	a0,-36(s0)
20004ed2:	c3fff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20004ed6:	87aa                	mv	a5,a0
20004ed8:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:17

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) |= source;
20004edc:	fec42783          	lw	a5,-20(s0)
20004ee0:	0791                	addi	a5,a5,4
20004ee2:	4398                	lw	a4,0(a5)
20004ee4:	fd842783          	lw	a5,-40(s0)
20004ee8:	fec42683          	lw	a3,-20(s0)
20004eec:	0691                	addi	a3,a3,4
20004eee:	8fd9                	or	a5,a5,a4
20004ef0:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19

    return 0;
20004ef2:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:20
}
20004ef4:	853e                	mv	a0,a5
20004ef6:	50b2                	lw	ra,44(sp)
20004ef8:	5422                	lw	s0,40(sp)
20004efa:	6145                	addi	sp,sp,48
20004efc:	8082                	ret

20004efe <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio,
                                              long source) {
20004efe:	7179                	addi	sp,sp,-48
20004f00:	d606                	sw	ra,44(sp)
20004f02:	d422                	sw	s0,40(sp)
20004f04:	1800                	addi	s0,sp,48
20004f06:	fca42e23          	sw	a0,-36(s0)
20004f0a:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:24
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20004f0e:	fdc42503          	lw	a0,-36(s0)
20004f12:	bffff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20004f16:	87aa                	mv	a5,a0
20004f18:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) &= ~source;
20004f1c:	fec42783          	lw	a5,-20(s0)
20004f20:	0791                	addi	a5,a5,4
20004f22:	439c                	lw	a5,0(a5)
20004f24:	fd842703          	lw	a4,-40(s0)
20004f28:	fff74713          	not	a4,a4
20004f2c:	86ba                	mv	a3,a4
20004f2e:	fec42703          	lw	a4,-20(s0)
20004f32:	0711                	addi	a4,a4,4
20004f34:	8ff5                	and	a5,a5,a3
20004f36:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:29

    return 0;
20004f38:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:30
}
20004f3a:	853e                	mv	a0,a5
20004f3c:	50b2                	lw	ra,44(sp)
20004f3e:	5422                	lw	s0,40(sp)
20004f40:	6145                	addi	sp,sp,48
20004f42:	8082                	ret

20004f44 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio) {
20004f44:	7179                	addi	sp,sp,-48
20004f46:	d606                	sw	ra,44(sp)
20004f48:	d422                	sw	s0,40(sp)
20004f4a:	1800                	addi	s0,sp,48
20004f4c:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:33
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20004f50:	fdc42503          	lw	a0,-36(s0)
20004f54:	bbdff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20004f58:	87aa                	mv	a5,a0
20004f5a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35

    return __METAL_ACCESS_ONCE(
20004f5e:	fec42783          	lw	a5,-20(s0)
20004f62:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:37
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
}
20004f64:	853e                	mv	a0,a5
20004f66:	50b2                	lw	ra,44(sp)
20004f68:	5422                	lw	s0,40(sp)
20004f6a:	6145                	addi	sp,sp,48
20004f6c:	8082                	ret

20004f6e <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio) {
20004f6e:	7179                	addi	sp,sp,-48
20004f70:	d606                	sw	ra,44(sp)
20004f72:	d422                	sw	s0,40(sp)
20004f74:	1800                	addi	s0,sp,48
20004f76:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:40
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20004f7a:	fdc42503          	lw	a0,-36(s0)
20004f7e:	b93ff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20004f82:	87aa                	mv	a5,a0
20004f84:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42

    return __METAL_ACCESS_ONCE(
20004f88:	fec42783          	lw	a5,-20(s0)
20004f8c:	07b1                	addi	a5,a5,12
20004f8e:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:44
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
}
20004f90:	853e                	mv	a0,a5
20004f92:	50b2                	lw	ra,44(sp)
20004f94:	5422                	lw	s0,40(sp)
20004f96:	6145                	addi	sp,sp,48
20004f98:	8082                	ret

20004f9a <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47

int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio,
                                               long source) {
20004f9a:	7179                	addi	sp,sp,-48
20004f9c:	d606                	sw	ra,44(sp)
20004f9e:	d422                	sw	s0,40(sp)
20004fa0:	1800                	addi	s0,sp,48
20004fa2:	fca42e23          	sw	a0,-36(s0)
20004fa6:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:48
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20004faa:	fdc42503          	lw	a0,-36(s0)
20004fae:	b63ff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20004fb2:	87aa                	mv	a5,a0
20004fb4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) &= ~source;
20004fb8:	fec42783          	lw	a5,-20(s0)
20004fbc:	07a1                	addi	a5,a5,8
20004fbe:	439c                	lw	a5,0(a5)
20004fc0:	fd842703          	lw	a4,-40(s0)
20004fc4:	fff74713          	not	a4,a4
20004fc8:	86ba                	mv	a3,a4
20004fca:	fec42703          	lw	a4,-20(s0)
20004fce:	0721                	addi	a4,a4,8
20004fd0:	8ff5                	and	a5,a5,a3
20004fd2:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:53

    return 0;
20004fd4:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:54
}
20004fd6:	853e                	mv	a0,a5
20004fd8:	50b2                	lw	ra,44(sp)
20004fda:	5422                	lw	s0,40(sp)
20004fdc:	6145                	addi	sp,sp,48
20004fde:	8082                	ret

20004fe0 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:57

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio,
                                              long source) {
20004fe0:	7179                	addi	sp,sp,-48
20004fe2:	d606                	sw	ra,44(sp)
20004fe4:	d422                	sw	s0,40(sp)
20004fe6:	1800                	addi	s0,sp,48
20004fe8:	fca42e23          	sw	a0,-36(s0)
20004fec:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20004ff0:	fdc42503          	lw	a0,-36(s0)
20004ff4:	b1dff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20004ff8:	87aa                	mv	a5,a0
20004ffa:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) |= source;
20004ffe:	fec42783          	lw	a5,-20(s0)
20005002:	07a1                	addi	a5,a5,8
20005004:	4398                	lw	a4,0(a5)
20005006:	fd842783          	lw	a5,-40(s0)
2000500a:	fec42683          	lw	a3,-20(s0)
2000500e:	06a1                	addi	a3,a3,8
20005010:	8fd9                	or	a5,a5,a4
20005012:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:63

    return 0;
20005014:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64
}
20005016:	853e                	mv	a0,a5
20005018:	50b2                	lw	ra,44(sp)
2000501a:	5422                	lw	s0,40(sp)
2000501c:	6145                	addi	sp,sp,48
2000501e:	8082                	ret

20005020 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio,
                                           long value) {
20005020:	7179                	addi	sp,sp,-48
20005022:	d606                	sw	ra,44(sp)
20005024:	d422                	sw	s0,40(sp)
20005026:	1800                	addi	s0,sp,48
20005028:	fca42e23          	sw	a0,-36(s0)
2000502c:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:68
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20005030:	fdc42503          	lw	a0,-36(s0)
20005034:	addff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20005038:	87aa                	mv	a5,a0
2000503a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |=
2000503e:	fec42783          	lw	a5,-20(s0)
20005042:	07b1                	addi	a5,a5,12
20005044:	4398                	lw	a4,0(a5)
20005046:	fd842783          	lw	a5,-40(s0)
2000504a:	fec42683          	lw	a3,-20(s0)
2000504e:	06b1                	addi	a3,a3,12
20005050:	8fd9                	or	a5,a5,a4
20005052:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73
        value;

    return 0;
20005054:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
}
20005056:	853e                	mv	a0,a5
20005058:	50b2                	lw	ra,44(sp)
2000505a:	5422                	lw	s0,40(sp)
2000505c:	6145                	addi	sp,sp,48
2000505e:	8082                	ret

20005060 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:77

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio,
                                             long value) {
20005060:	7179                	addi	sp,sp,-48
20005062:	d606                	sw	ra,44(sp)
20005064:	d422                	sw	s0,40(sp)
20005066:	1800                	addi	s0,sp,48
20005068:	fca42e23          	sw	a0,-36(s0)
2000506c:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20005070:	fdc42503          	lw	a0,-36(s0)
20005074:	a9dff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20005078:	87aa                	mv	a5,a0
2000507a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:80

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
2000507e:	fec42783          	lw	a5,-20(s0)
20005082:	07b1                	addi	a5,a5,12
20005084:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:81
        ~value;
20005086:	fd842703          	lw	a4,-40(s0)
2000508a:	fff74713          	not	a4,a4
2000508e:	86ba                	mv	a3,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:80
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
20005090:	fec42703          	lw	a4,-20(s0)
20005094:	0731                	addi	a4,a4,12
20005096:	8ff5                	and	a5,a5,a3
20005098:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83

    return 0;
2000509a:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:84
}
2000509c:	853e                	mv	a0,a5
2000509e:	50b2                	lw	ra,44(sp)
200050a0:	5422                	lw	s0,40(sp)
200050a2:	6145                	addi	sp,sp,48
200050a4:	8082                	ret

200050a6 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:87

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio,
                                              long value) {
200050a6:	7179                	addi	sp,sp,-48
200050a8:	d606                	sw	ra,44(sp)
200050aa:	d422                	sw	s0,40(sp)
200050ac:	1800                	addi	s0,sp,48
200050ae:	fca42e23          	sw	a0,-36(s0)
200050b2:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200050b6:	fdc42503          	lw	a0,-36(s0)
200050ba:	a57ff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
200050be:	87aa                	mv	a5,a0
200050c0:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:91

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
        __METAL_ACCESS_ONCE(
200050c4:	fec42783          	lw	a5,-20(s0)
200050c8:	07b1                	addi	a5,a5,12
200050ca:	4398                	lw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
200050cc:	fd842783          	lw	a5,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:90
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
200050d0:	fec42683          	lw	a3,-20(s0)
200050d4:	06b1                	addi	a3,a3,12
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
200050d6:	8fb9                	xor	a5,a5,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:90
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
200050d8:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95
        value;

    return 0;
200050da:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
}
200050dc:	853e                	mv	a0,a5
200050de:	50b2                	lw	ra,44(sp)
200050e0:	5422                	lw	s0,40(sp)
200050e2:	6145                	addi	sp,sp,48
200050e4:	8082                	ret

200050e6 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source,
                                          long dest) {
200050e6:	7179                	addi	sp,sp,-48
200050e8:	d606                	sw	ra,44(sp)
200050ea:	d422                	sw	s0,40(sp)
200050ec:	1800                	addi	s0,sp,48
200050ee:	fca42e23          	sw	a0,-36(s0)
200050f2:	fcb42c23          	sw	a1,-40(s0)
200050f6:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:100
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200050fa:	fdc42503          	lw	a0,-36(s0)
200050fe:	a13ff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20005102:	87aa                	mv	a5,a0
20005104:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20005108:	fec42783          	lw	a5,-20(s0)
2000510c:	03c78793          	addi	a5,a5,60
20005110:	439c                	lw	a5,0(a5)
20005112:	fd842703          	lw	a4,-40(s0)
20005116:	fff74713          	not	a4,a4
2000511a:	86ba                	mv	a3,a4
2000511c:	fec42703          	lw	a4,-20(s0)
20005120:	03c70713          	addi	a4,a4,60
20005124:	8ff5                	and	a5,a5,a3
20005126:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:104
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) |=
20005128:	fec42783          	lw	a5,-20(s0)
2000512c:	03878793          	addi	a5,a5,56
20005130:	4398                	lw	a4,0(a5)
20005132:	fd442783          	lw	a5,-44(s0)
20005136:	fec42683          	lw	a3,-20(s0)
2000513a:	03868693          	addi	a3,a3,56
2000513e:	8fd9                	or	a5,a5,a4
20005140:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107
        dest;

    return 0;
20005142:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20005144:	853e                	mv	a0,a5
20005146:	50b2                	lw	ra,44(sp)
20005148:	5422                	lw	s0,40(sp)
2000514a:	6145                	addi	sp,sp,48
2000514c:	8082                	ret

2000514e <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio,
                                           long source) {
2000514e:	7179                	addi	sp,sp,-48
20005150:	d606                	sw	ra,44(sp)
20005152:	d422                	sw	s0,40(sp)
20005154:	1800                	addi	s0,sp,48
20005156:	fca42e23          	sw	a0,-36(s0)
2000515a:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2000515e:	fdc42503          	lw	a0,-36(s0)
20005162:	9afff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
20005166:	87aa                	mv	a5,a0
20005168:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
2000516c:	fec42783          	lw	a5,-20(s0)
20005170:	03878793          	addi	a5,a5,56
20005174:	439c                	lw	a5,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:115
        ~source;
20005176:	fd842703          	lw	a4,-40(s0)
2000517a:	fff74713          	not	a4,a4
2000517e:	86ba                	mv	a3,a4
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
20005180:	fec42703          	lw	a4,-20(s0)
20005184:	03870713          	addi	a4,a4,56
20005188:	8ff5                	and	a5,a5,a3
2000518a:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117

    return 0;
2000518c:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
}
2000518e:	853e                	mv	a0,a5
20005190:	50b2                	lw	ra,44(sp)
20005192:	5422                	lw	s0,40(sp)
20005194:	6145                	addi	sp,sp,48
20005196:	8082                	ret

20005198 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio,
                                           long source, int intr_type) {
20005198:	7179                	addi	sp,sp,-48
2000519a:	d606                	sw	ra,44(sp)
2000519c:	d422                	sw	s0,40(sp)
2000519e:	1800                	addi	s0,sp,48
200051a0:	fca42e23          	sw	a0,-36(s0)
200051a4:	fcb42c23          	sw	a1,-40(s0)
200051a8:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:122
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200051ac:	fdc42503          	lw	a0,-36(s0)
200051b0:	961ff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
200051b4:	87aa                	mv	a5,a0
200051b6:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124

    switch (intr_type) {
200051ba:	fd442703          	lw	a4,-44(s0)
200051be:	479d                	li	a5,7
200051c0:	1ce7e963          	bltu	a5,a4,20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
200051c4:	fd442783          	lw	a5,-44(s0)
200051c8:	00279713          	slli	a4,a5,0x2
200051cc:	200077b7          	lui	a5,0x20007
200051d0:	c7c78793          	addi	a5,a5,-900 # 20006c7c <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
200051d4:	97ba                	add	a5,a5,a4
200051d6:	439c                	lw	a5,0(a5)
200051d8:	8782                	jr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
    case METAL_GPIO_INT_DISABLE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) &= ~source;
200051da:	fec42783          	lw	a5,-20(s0)
200051de:	07e1                	addi	a5,a5,24
200051e0:	439c                	lw	a5,0(a5)
200051e2:	fd842703          	lw	a4,-40(s0)
200051e6:	fff74713          	not	a4,a4
200051ea:	86ba                	mv	a3,a4
200051ec:	fec42703          	lw	a4,-20(s0)
200051f0:	0761                	addi	a4,a4,24
200051f2:	8ff5                	and	a5,a5,a3
200051f4:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) &= ~source;
200051f6:	fec42783          	lw	a5,-20(s0)
200051fa:	02078793          	addi	a5,a5,32
200051fe:	439c                	lw	a5,0(a5)
20005200:	fd842703          	lw	a4,-40(s0)
20005204:	fff74713          	not	a4,a4
20005208:	86ba                	mv	a3,a4
2000520a:	fec42703          	lw	a4,-20(s0)
2000520e:	02070713          	addi	a4,a4,32
20005212:	8ff5                	and	a5,a5,a3
20005214:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) &= ~source;
20005216:	fec42783          	lw	a5,-20(s0)
2000521a:	02878793          	addi	a5,a5,40
2000521e:	439c                	lw	a5,0(a5)
20005220:	fd842703          	lw	a4,-40(s0)
20005224:	fff74713          	not	a4,a4
20005228:	86ba                	mv	a3,a4
2000522a:	fec42703          	lw	a4,-20(s0)
2000522e:	02870713          	addi	a4,a4,40
20005232:	8ff5                	and	a5,a5,a3
20005234:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) &= ~source;
20005236:	fec42783          	lw	a5,-20(s0)
2000523a:	03078793          	addi	a5,a5,48
2000523e:	439c                	lw	a5,0(a5)
20005240:	fd842703          	lw	a4,-40(s0)
20005244:	fff74713          	not	a4,a4
20005248:	86ba                	mv	a3,a4
2000524a:	fec42703          	lw	a4,-20(s0)
2000524e:	03070713          	addi	a4,a4,48
20005252:	8ff5                	and	a5,a5,a3
20005254:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
        break;
20005256:	aa35                	j	20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
    case METAL_GPIO_INT_RISING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20005258:	fec42783          	lw	a5,-20(s0)
2000525c:	07e1                	addi	a5,a5,24
2000525e:	4398                	lw	a4,0(a5)
20005260:	fd842783          	lw	a5,-40(s0)
20005264:	fec42683          	lw	a3,-20(s0)
20005268:	06e1                	addi	a3,a3,24
2000526a:	8fd9                	or	a5,a5,a4
2000526c:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:138
        break;
2000526e:	a215                	j	20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
    case METAL_GPIO_INT_FALLING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20005270:	fec42783          	lw	a5,-20(s0)
20005274:	02078793          	addi	a5,a5,32
20005278:	4398                	lw	a4,0(a5)
2000527a:	fd842783          	lw	a5,-40(s0)
2000527e:	fec42683          	lw	a3,-20(s0)
20005282:	02068693          	addi	a3,a3,32
20005286:	8fd9                	or	a5,a5,a4
20005288:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:142
        break;
2000528a:	a221                	j	20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
    case METAL_GPIO_INT_BOTH_EDGE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
2000528c:	fec42783          	lw	a5,-20(s0)
20005290:	07e1                	addi	a5,a5,24
20005292:	4398                	lw	a4,0(a5)
20005294:	fd842783          	lw	a5,-40(s0)
20005298:	fec42683          	lw	a3,-20(s0)
2000529c:	06e1                	addi	a3,a3,24
2000529e:	8fd9                	or	a5,a5,a4
200052a0:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
200052a2:	fec42783          	lw	a5,-20(s0)
200052a6:	02078793          	addi	a5,a5,32
200052aa:	4398                	lw	a4,0(a5)
200052ac:	fd842783          	lw	a5,-40(s0)
200052b0:	fec42683          	lw	a3,-20(s0)
200052b4:	02068693          	addi	a3,a3,32
200052b8:	8fd9                	or	a5,a5,a4
200052ba:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:148
        break;
200052bc:	a8d9                	j	20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:151
    case METAL_GPIO_INT_HIGH:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
200052be:	fec42783          	lw	a5,-20(s0)
200052c2:	02878793          	addi	a5,a5,40
200052c6:	4398                	lw	a4,0(a5)
200052c8:	fd842783          	lw	a5,-40(s0)
200052cc:	fec42683          	lw	a3,-20(s0)
200052d0:	02868693          	addi	a3,a3,40
200052d4:	8fd9                	or	a5,a5,a4
200052d6:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:152
        break;
200052d8:	a86d                	j	20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:155
    case METAL_GPIO_INT_LOW:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
200052da:	fec42783          	lw	a5,-20(s0)
200052de:	03078793          	addi	a5,a5,48
200052e2:	4398                	lw	a4,0(a5)
200052e4:	fd842783          	lw	a5,-40(s0)
200052e8:	fec42683          	lw	a3,-20(s0)
200052ec:	03068693          	addi	a3,a3,48
200052f0:	8fd9                	or	a5,a5,a4
200052f2:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156
        break;
200052f4:	a879                	j	20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    case METAL_GPIO_INT_BOTH_LEVEL:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
200052f6:	fec42783          	lw	a5,-20(s0)
200052fa:	02878793          	addi	a5,a5,40
200052fe:	4398                	lw	a4,0(a5)
20005300:	fd842783          	lw	a5,-40(s0)
20005304:	fec42683          	lw	a3,-20(s0)
20005308:	02868693          	addi	a3,a3,40
2000530c:	8fd9                	or	a5,a5,a4
2000530e:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:161
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20005310:	fec42783          	lw	a5,-20(s0)
20005314:	03078793          	addi	a5,a5,48
20005318:	4398                	lw	a4,0(a5)
2000531a:	fd842783          	lw	a5,-40(s0)
2000531e:	fec42683          	lw	a3,-20(s0)
20005322:	03068693          	addi	a3,a3,48
20005326:	8fd9                	or	a5,a5,a4
20005328:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        break;
2000532a:	a0a5                	j	20005392 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
    case METAL_GPIO_INT_MAX:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
2000532c:	fec42783          	lw	a5,-20(s0)
20005330:	07e1                	addi	a5,a5,24
20005332:	4398                	lw	a4,0(a5)
20005334:	fd842783          	lw	a5,-40(s0)
20005338:	fec42683          	lw	a3,-20(s0)
2000533c:	06e1                	addi	a3,a3,24
2000533e:	8fd9                	or	a5,a5,a4
20005340:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20005342:	fec42783          	lw	a5,-20(s0)
20005346:	02078793          	addi	a5,a5,32
2000534a:	4398                	lw	a4,0(a5)
2000534c:	fd842783          	lw	a5,-40(s0)
20005350:	fec42683          	lw	a3,-20(s0)
20005354:	02068693          	addi	a3,a3,32
20005358:	8fd9                	or	a5,a5,a4
2000535a:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
2000535c:	fec42783          	lw	a5,-20(s0)
20005360:	02878793          	addi	a5,a5,40
20005364:	4398                	lw	a4,0(a5)
20005366:	fd842783          	lw	a5,-40(s0)
2000536a:	fec42683          	lw	a3,-20(s0)
2000536e:	02868693          	addi	a3,a3,40
20005372:	8fd9                	or	a5,a5,a4
20005374:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:171
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20005376:	fec42783          	lw	a5,-20(s0)
2000537a:	03078793          	addi	a5,a5,48
2000537e:	4398                	lw	a4,0(a5)
20005380:	fd842783          	lw	a5,-40(s0)
20005384:	fec42683          	lw	a3,-20(s0)
20005388:	03068693          	addi	a3,a3,48
2000538c:	8fd9                	or	a5,a5,a4
2000538e:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        break;
20005390:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:174
    }
    return 0;
20005392:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
}
20005394:	853e                	mv	a0,a5
20005396:	50b2                	lw	ra,44(sp)
20005398:	5422                	lw	s0,40(sp)
2000539a:	6145                	addi	sp,sp,48
2000539c:	8082                	ret

2000539e <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:178

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source,
                                          int intr_type) {
2000539e:	7179                	addi	sp,sp,-48
200053a0:	d606                	sw	ra,44(sp)
200053a2:	d422                	sw	s0,40(sp)
200053a4:	1800                	addi	s0,sp,48
200053a6:	fca42e23          	sw	a0,-36(s0)
200053aa:	fcb42c23          	sw	a1,-40(s0)
200053ae:	fcc42a23          	sw	a2,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200053b2:	fdc42503          	lw	a0,-36(s0)
200053b6:	f5aff0ef          	jal	ra,20004b10 <__metal_driver_sifive_gpio0_base>
200053ba:	87aa                	mv	a5,a0
200053bc:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181

    switch (intr_type) {
200053c0:	fd442703          	lw	a4,-44(s0)
200053c4:	479d                	li	a5,7
200053c6:	14e7ea63          	bltu	a5,a4,2000551a <__metal_driver_sifive_gpio0_clear_int+0x17c>
200053ca:	fd442783          	lw	a5,-44(s0)
200053ce:	00279713          	slli	a4,a5,0x2
200053d2:	200077b7          	lui	a5,0x20007
200053d6:	c9c78793          	addi	a5,a5,-868 # 20006c9c <__metal_driver_vtable_sifive_fe310_g000_pll+0x2c>
200053da:	97ba                	add	a5,a5,a4
200053dc:	439c                	lw	a5,0(a5)
200053de:	8782                	jr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:184
    case METAL_GPIO_INT_RISING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
200053e0:	fec42783          	lw	a5,-20(s0)
200053e4:	07f1                	addi	a5,a5,28
200053e6:	4398                	lw	a4,0(a5)
200053e8:	fd842783          	lw	a5,-40(s0)
200053ec:	fec42683          	lw	a3,-20(s0)
200053f0:	06f1                	addi	a3,a3,28
200053f2:	8fd9                	or	a5,a5,a4
200053f4:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
        break;
200053f6:	a215                	j	2000551a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:188
    case METAL_GPIO_INT_FALLING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
200053f8:	fec42783          	lw	a5,-20(s0)
200053fc:	02478793          	addi	a5,a5,36
20005400:	4398                	lw	a4,0(a5)
20005402:	fd842783          	lw	a5,-40(s0)
20005406:	fec42683          	lw	a3,-20(s0)
2000540a:	02468693          	addi	a3,a3,36
2000540e:	8fd9                	or	a5,a5,a4
20005410:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:189
        break;
20005412:	a221                	j	2000551a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
    case METAL_GPIO_INT_BOTH_EDGE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
20005414:	fec42783          	lw	a5,-20(s0)
20005418:	07f1                	addi	a5,a5,28
2000541a:	4398                	lw	a4,0(a5)
2000541c:	fd842783          	lw	a5,-40(s0)
20005420:	fec42683          	lw	a3,-20(s0)
20005424:	06f1                	addi	a3,a3,28
20005426:	8fd9                	or	a5,a5,a4
20005428:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:194
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
2000542a:	fec42783          	lw	a5,-20(s0)
2000542e:	02478793          	addi	a5,a5,36
20005432:	4398                	lw	a4,0(a5)
20005434:	fd842783          	lw	a5,-40(s0)
20005438:	fec42683          	lw	a3,-20(s0)
2000543c:	02468693          	addi	a3,a3,36
20005440:	8fd9                	or	a5,a5,a4
20005442:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195
        break;
20005444:	a8d9                	j	2000551a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    case METAL_GPIO_INT_HIGH:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
20005446:	fec42783          	lw	a5,-20(s0)
2000544a:	02c78793          	addi	a5,a5,44
2000544e:	4398                	lw	a4,0(a5)
20005450:	fd842783          	lw	a5,-40(s0)
20005454:	fec42683          	lw	a3,-20(s0)
20005458:	02c68693          	addi	a3,a3,44
2000545c:	8fd9                	or	a5,a5,a4
2000545e:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
        break;
20005460:	a86d                	j	2000551a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:202
    case METAL_GPIO_INT_LOW:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20005462:	fec42783          	lw	a5,-20(s0)
20005466:	03478793          	addi	a5,a5,52
2000546a:	4398                	lw	a4,0(a5)
2000546c:	fd842783          	lw	a5,-40(s0)
20005470:	fec42683          	lw	a3,-20(s0)
20005474:	03468693          	addi	a3,a3,52
20005478:	8fd9                	or	a5,a5,a4
2000547a:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:203
        break;
2000547c:	a879                	j	2000551a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:206
    case METAL_GPIO_INT_BOTH_LEVEL:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
2000547e:	fec42783          	lw	a5,-20(s0)
20005482:	02c78793          	addi	a5,a5,44
20005486:	4398                	lw	a4,0(a5)
20005488:	fd842783          	lw	a5,-40(s0)
2000548c:	fec42683          	lw	a3,-20(s0)
20005490:	02c68693          	addi	a3,a3,44
20005494:	8fd9                	or	a5,a5,a4
20005496:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:208
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20005498:	fec42783          	lw	a5,-20(s0)
2000549c:	03478793          	addi	a5,a5,52
200054a0:	4398                	lw	a4,0(a5)
200054a2:	fd842783          	lw	a5,-40(s0)
200054a6:	fec42683          	lw	a3,-20(s0)
200054aa:	03468693          	addi	a3,a3,52
200054ae:	8fd9                	or	a5,a5,a4
200054b0:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:209
        break;
200054b2:	a0a5                	j	2000551a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:212
    case METAL_GPIO_INT_MAX:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
200054b4:	fec42783          	lw	a5,-20(s0)
200054b8:	07f1                	addi	a5,a5,28
200054ba:	4398                	lw	a4,0(a5)
200054bc:	fd842783          	lw	a5,-40(s0)
200054c0:	fec42683          	lw	a3,-20(s0)
200054c4:	06f1                	addi	a3,a3,28
200054c6:	8fd9                	or	a5,a5,a4
200054c8:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:214
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
200054ca:	fec42783          	lw	a5,-20(s0)
200054ce:	02478793          	addi	a5,a5,36
200054d2:	4398                	lw	a4,0(a5)
200054d4:	fd842783          	lw	a5,-40(s0)
200054d8:	fec42683          	lw	a3,-20(s0)
200054dc:	02468693          	addi	a3,a3,36
200054e0:	8fd9                	or	a5,a5,a4
200054e2:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:216
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
200054e4:	fec42783          	lw	a5,-20(s0)
200054e8:	02c78793          	addi	a5,a5,44
200054ec:	4398                	lw	a4,0(a5)
200054ee:	fd842783          	lw	a5,-40(s0)
200054f2:	fec42683          	lw	a3,-20(s0)
200054f6:	02c68693          	addi	a3,a3,44
200054fa:	8fd9                	or	a5,a5,a4
200054fc:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:218
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
200054fe:	fec42783          	lw	a5,-20(s0)
20005502:	03478793          	addi	a5,a5,52
20005506:	4398                	lw	a4,0(a5)
20005508:	fd842783          	lw	a5,-40(s0)
2000550c:	fec42683          	lw	a3,-20(s0)
20005510:	03468693          	addi	a3,a3,52
20005514:	8fd9                	or	a5,a5,a4
20005516:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:219
        break;
20005518:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:221
    }
    return 0;
2000551a:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:222
}
2000551c:	853e                	mv	a0,a5
2000551e:	50b2                	lw	ra,44(sp)
20005520:	5422                	lw	s0,40(sp)
20005522:	6145                	addi	sp,sp,48
20005524:	8082                	ret

20005526 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:225

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio) {
20005526:	1101                	addi	sp,sp,-32
20005528:	ce06                	sw	ra,28(sp)
2000552a:	cc22                	sw	s0,24(sp)
2000552c:	1000                	addi	s0,sp,32
2000552e:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:226
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20005532:	fec42503          	lw	a0,-20(s0)
20005536:	e00ff0ef          	jal	ra,20004b36 <__metal_driver_sifive_gpio0_interrupt_parent>
2000553a:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:227
}
2000553c:	853e                	mv	a0,a5
2000553e:	40f2                	lw	ra,28(sp)
20005540:	4462                	lw	s0,24(sp)
20005542:	6105                	addi	sp,sp,32
20005544:	8082                	ret

20005546 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:229

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin) {
20005546:	7179                	addi	sp,sp,-48
20005548:	d606                	sw	ra,44(sp)
2000554a:	d422                	sw	s0,40(sp)
2000554c:	1800                	addi	s0,sp,48
2000554e:	fca42e23          	sw	a0,-36(s0)
20005552:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:231
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20005556:	fd842583          	lw	a1,-40(s0)
2000555a:	fdc42503          	lw	a0,-36(s0)
2000555e:	e02ff0ef          	jal	ra,20004b60 <__metal_driver_sifive_gpio0_interrupt_lines>
20005562:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:232
    return irq;
20005566:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:233
}
2000556a:	853e                	mv	a0,a5
2000556c:	50b2                	lw	ra,44(sp)
2000556e:	5422                	lw	s0,40(sp)
20005570:	6145                	addi	sp,sp,48
20005572:	8082                	ret

20005574 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:748
{
20005574:	1101                	addi	sp,sp,-32
20005576:	ce22                	sw	s0,28(sp)
20005578:	1000                	addi	s0,sp,32
2000557a:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:749
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2000557e:	fec42703          	lw	a4,-20(s0)
20005582:	800017b7          	lui	a5,0x80001
20005586:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
2000558a:	00f71563          	bne	a4,a5,20005594 <__metal_driver_sifive_uart0_control_base+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:750
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
2000558e:	100137b7          	lui	a5,0x10013
20005592:	a829                	j	200055ac <__metal_driver_sifive_uart0_control_base+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:752
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20005594:	fec42703          	lw	a4,-20(s0)
20005598:	800017b7          	lui	a5,0x80001
2000559c:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2cc>
200055a0:	00f71563          	bne	a4,a5,200055aa <__metal_driver_sifive_uart0_control_base+0x36>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:753
		return METAL_SIFIVE_UART0_10023000_BASE_ADDRESS;
200055a4:	100237b7          	lui	a5,0x10023
200055a8:	a011                	j	200055ac <__metal_driver_sifive_uart0_control_base+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:756
		return 0;
200055aa:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:758
}
200055ac:	853e                	mv	a0,a5
200055ae:	4472                	lw	s0,28(sp)
200055b0:	6105                	addi	sp,sp,32
200055b2:	8082                	ret

200055b4 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:787
{
200055b4:	1101                	addi	sp,sp,-32
200055b6:	ce22                	sw	s0,28(sp)
200055b8:	1000                	addi	s0,sp,32
200055ba:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:788
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
200055be:	fec42703          	lw	a4,-20(s0)
200055c2:	800017b7          	lui	a5,0x80001
200055c6:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
200055ca:	00f71763          	bne	a4,a5,200055d8 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:789
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
200055ce:	800007b7          	lui	a5,0x80000
200055d2:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecd4>
200055d6:	a821                	j	200055ee <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:791
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
200055d8:	fec42703          	lw	a4,-20(s0)
200055dc:	800017b7          	lui	a5,0x80001
200055e0:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2cc>
200055e4:	00f71463          	bne	a4,a5,200055ec <__metal_driver_sifive_uart0_interrupt_parent+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:792
		return NULL;
200055e8:	4781                	li	a5,0
200055ea:	a011                	j	200055ee <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:795
		return 0;
200055ec:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:797
}
200055ee:	853e                	mv	a0,a5
200055f0:	4472                	lw	s0,28(sp)
200055f2:	6105                	addi	sp,sp,32
200055f4:	8082                	ret

200055f6 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:800
{
200055f6:	1101                	addi	sp,sp,-32
200055f8:	ce22                	sw	s0,28(sp)
200055fa:	1000                	addi	s0,sp,32
200055fc:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:801
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20005600:	fec42703          	lw	a4,-20(s0)
20005604:	800017b7          	lui	a5,0x80001
20005608:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
2000560c:	00f71463          	bne	a4,a5,20005614 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:802
		return 3;
20005610:	478d                	li	a5,3
20005612:	a821                	j	2000562a <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:804
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20005614:	fec42703          	lw	a4,-20(s0)
20005618:	800017b7          	lui	a5,0x80001
2000561c:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2cc>
20005620:	00f71463          	bne	a4,a5,20005628 <__metal_driver_sifive_uart0_interrupt_line+0x32>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:805
		return 4;
20005624:	4791                	li	a5,4
20005626:	a011                	j	2000562a <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:808
		return 0;
20005628:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:810
}
2000562a:	853e                	mv	a0,a5
2000562c:	4472                	lw	s0,28(sp)
2000562e:	6105                	addi	sp,sp,32
20005630:	8082                	ret

20005632 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:813
{
20005632:	1101                	addi	sp,sp,-32
20005634:	ce22                	sw	s0,28(sp)
20005636:	1000                	addi	s0,sp,32
20005638:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:814
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2000563c:	fec42703          	lw	a4,-20(s0)
20005640:	800017b7          	lui	a5,0x80001
20005644:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
20005648:	00f71763          	bne	a4,a5,20005656 <__metal_driver_sifive_uart0_clock+0x24>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:815
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
2000564c:	800017b7          	lui	a5,0x80001
20005650:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff304>
20005654:	a839                	j	20005672 <__metal_driver_sifive_uart0_clock+0x40>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:817
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20005656:	fec42703          	lw	a4,-20(s0)
2000565a:	800017b7          	lui	a5,0x80001
2000565e:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2cc>
20005662:	00f71763          	bne	a4,a5,20005670 <__metal_driver_sifive_uart0_clock+0x3e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:818
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20005666:	800017b7          	lui	a5,0x80001
2000566a:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff304>
2000566e:	a011                	j	20005672 <__metal_driver_sifive_uart0_clock+0x40>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:821
		return 0;
20005670:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:823
}
20005672:	853e                	mv	a0,a5
20005674:	4472                	lw	s0,28(sp)
20005676:	6105                	addi	sp,sp,32
20005678:	8082                	ret

2000567a <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:826
{
2000567a:	1101                	addi	sp,sp,-32
2000567c:	ce22                	sw	s0,28(sp)
2000567e:	1000                	addi	s0,sp,32
20005680:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:827
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20005684:	fec42703          	lw	a4,-20(s0)
20005688:	800017b7          	lui	a5,0x80001
2000568c:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
20005690:	00f71563          	bne	a4,a5,2000569a <__metal_driver_sifive_uart0_pinmux+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:828
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20005694:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20005698:	a829                	j	200056b2 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:830
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
2000569a:	fec42703          	lw	a4,-20(s0)
2000569e:	800017b7          	lui	a5,0x80001
200056a2:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2cc>
200056a6:	00f71563          	bne	a4,a5,200056b0 <__metal_driver_sifive_uart0_pinmux+0x36>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:831
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
200056aa:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200056ae:	a011                	j	200056b2 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:834
		return 0;
200056b0:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:836
}
200056b2:	853e                	mv	a0,a5
200056b4:	4472                	lw	s0,28(sp)
200056b6:	6105                	addi	sp,sp,32
200056b8:	8082                	ret

200056ba <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:839
{
200056ba:	1101                	addi	sp,sp,-32
200056bc:	ce22                	sw	s0,28(sp)
200056be:	1000                	addi	s0,sp,32
200056c0:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:840
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
200056c4:	fec42703          	lw	a4,-20(s0)
200056c8:	800017b7          	lui	a5,0x80001
200056cc:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
200056d0:	00f71563          	bne	a4,a5,200056da <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:841
		return 196608;
200056d4:	000307b7          	lui	a5,0x30
200056d8:	a829                	j	200056f2 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:843
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
200056da:	fec42703          	lw	a4,-20(s0)
200056de:	800017b7          	lui	a5,0x80001
200056e2:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2cc>
200056e6:	00f71563          	bne	a4,a5,200056f0 <__metal_driver_sifive_uart0_pinmux_output_selector+0x36>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:844
		return 8650752;
200056ea:	008407b7          	lui	a5,0x840
200056ee:	a011                	j	200056f2 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:847
		return 0;
200056f0:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:849
}
200056f2:	853e                	mv	a0,a5
200056f4:	4472                	lw	s0,28(sp)
200056f6:	6105                	addi	sp,sp,32
200056f8:	8082                	ret

200056fa <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:852
{
200056fa:	1101                	addi	sp,sp,-32
200056fc:	ce22                	sw	s0,28(sp)
200056fe:	1000                	addi	s0,sp,32
20005700:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:853
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20005704:	fec42703          	lw	a4,-20(s0)
20005708:	800017b7          	lui	a5,0x80001
2000570c:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
20005710:	00f71563          	bne	a4,a5,2000571a <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:854
		return 196608;
20005714:	000307b7          	lui	a5,0x30
20005718:	a829                	j	20005732 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:856
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
2000571a:	fec42703          	lw	a4,-20(s0)
2000571e:	800017b7          	lui	a5,0x80001
20005722:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2cc>
20005726:	00f71563          	bne	a4,a5,20005730 <__metal_driver_sifive_uart0_pinmux_source_selector+0x36>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:857
		return 8650752;
2000572a:	008407b7          	lui	a5,0x840
2000572e:	a011                	j	20005732 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:860
		return 0;
20005730:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:862
}
20005732:	853e                	mv	a0,a5
20005734:	4472                	lw	s0,28(sp)
20005736:	6105                	addi	sp,sp,32
20005738:	8082                	ret

2000573a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37
    (__METAL_ACCESS_ONCE((__metal_io_u8 *)UART_REG(offset)))
#define UART_REGW(offset)                                                      \
    (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart) {
2000573a:	1101                	addi	sp,sp,-32
2000573c:	ce06                	sw	ra,28(sp)
2000573e:	cc22                	sw	s0,24(sp)
20005740:	1000                	addi	s0,sp,32
20005742:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20005746:	fec42503          	lw	a0,-20(s0)
2000574a:	e6bff0ef          	jal	ra,200055b4 <__metal_driver_sifive_uart0_interrupt_parent>
2000574e:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20005750:	853e                	mv	a0,a5
20005752:	40f2                	lw	ra,28(sp)
20005754:	4462                	lw	s0,24(sp)
20005756:	6105                	addi	sp,sp,32
20005758:	8082                	ret

2000575a <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:41

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart) {
2000575a:	1101                	addi	sp,sp,-32
2000575c:	ce06                	sw	ra,28(sp)
2000575e:	cc22                	sw	s0,24(sp)
20005760:	1000                	addi	s0,sp,32
20005762:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:42
    return __metal_driver_sifive_uart0_interrupt_line(uart);
20005766:	fec42503          	lw	a0,-20(s0)
2000576a:	e8dff0ef          	jal	ra,200055f6 <__metal_driver_sifive_uart0_interrupt_line>
2000576e:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43
}
20005770:	853e                	mv	a0,a5
20005772:	40f2                	lw	ra,28(sp)
20005774:	4462                	lw	s0,24(sp)
20005776:	6105                	addi	sp,sp,32
20005778:	8082                	ret

2000577a <__metal_driver_sifive_uart0_tx_interrupt_enable>:
__metal_driver_sifive_uart0_tx_interrupt_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:45

int __metal_driver_sifive_uart0_tx_interrupt_enable(struct metal_uart *uart) {
2000577a:	7179                	addi	sp,sp,-48
2000577c:	d606                	sw	ra,44(sp)
2000577e:	d422                	sw	s0,40(sp)
20005780:	1800                	addi	s0,sp,48
20005782:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20005786:	fdc42503          	lw	a0,-36(s0)
2000578a:	debff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
2000578e:	87aa                	mv	a5,a0
20005790:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:48

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_TXWM;
20005794:	fec42783          	lw	a5,-20(s0)
20005798:	07c1                	addi	a5,a5,16
2000579a:	439c                	lw	a5,0(a5)
2000579c:	fec42703          	lw	a4,-20(s0)
200057a0:	0741                	addi	a4,a4,16
200057a2:	0017e793          	ori	a5,a5,1
200057a6:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:49
    return 0;
200057a8:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:50
}
200057aa:	853e                	mv	a0,a5
200057ac:	50b2                	lw	ra,44(sp)
200057ae:	5422                	lw	s0,40(sp)
200057b0:	6145                	addi	sp,sp,48
200057b2:	8082                	ret

200057b4 <__metal_driver_sifive_uart0_tx_interrupt_disable>:
__metal_driver_sifive_uart0_tx_interrupt_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52

int __metal_driver_sifive_uart0_tx_interrupt_disable(struct metal_uart *uart) {
200057b4:	7179                	addi	sp,sp,-48
200057b6:	d606                	sw	ra,44(sp)
200057b8:	d422                	sw	s0,40(sp)
200057ba:	1800                	addi	s0,sp,48
200057bc:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:53
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
200057c0:	fdc42503          	lw	a0,-36(s0)
200057c4:	db1ff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
200057c8:	87aa                	mv	a5,a0
200057ca:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:55

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_TXWM;
200057ce:	fec42783          	lw	a5,-20(s0)
200057d2:	07c1                	addi	a5,a5,16
200057d4:	439c                	lw	a5,0(a5)
200057d6:	fec42703          	lw	a4,-20(s0)
200057da:	0741                	addi	a4,a4,16
200057dc:	9bf9                	andi	a5,a5,-2
200057de:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:56
    return 0;
200057e0:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
}
200057e2:	853e                	mv	a0,a5
200057e4:	50b2                	lw	ra,44(sp)
200057e6:	5422                	lw	s0,40(sp)
200057e8:	6145                	addi	sp,sp,48
200057ea:	8082                	ret

200057ec <__metal_driver_sifive_uart0_rx_interrupt_enable>:
__metal_driver_sifive_uart0_rx_interrupt_enable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59

int __metal_driver_sifive_uart0_rx_interrupt_enable(struct metal_uart *uart) {
200057ec:	7179                	addi	sp,sp,-48
200057ee:	d606                	sw	ra,44(sp)
200057f0:	d422                	sw	s0,40(sp)
200057f2:	1800                	addi	s0,sp,48
200057f4:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:60
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
200057f8:	fdc42503          	lw	a0,-36(s0)
200057fc:	d79ff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
20005800:	87aa                	mv	a5,a0
20005802:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:62

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_RXWM;
20005806:	fec42783          	lw	a5,-20(s0)
2000580a:	07c1                	addi	a5,a5,16
2000580c:	439c                	lw	a5,0(a5)
2000580e:	fec42703          	lw	a4,-20(s0)
20005812:	0741                	addi	a4,a4,16
20005814:	0027e793          	ori	a5,a5,2
20005818:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63
    return 0;
2000581a:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:64
}
2000581c:	853e                	mv	a0,a5
2000581e:	50b2                	lw	ra,44(sp)
20005820:	5422                	lw	s0,40(sp)
20005822:	6145                	addi	sp,sp,48
20005824:	8082                	ret

20005826 <__metal_driver_sifive_uart0_rx_interrupt_disable>:
__metal_driver_sifive_uart0_rx_interrupt_disable():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:66

int __metal_driver_sifive_uart0_rx_interrupt_disable(struct metal_uart *uart) {
20005826:	7179                	addi	sp,sp,-48
20005828:	d606                	sw	ra,44(sp)
2000582a:	d422                	sw	s0,40(sp)
2000582c:	1800                	addi	s0,sp,48
2000582e:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20005832:	fdc42503          	lw	a0,-36(s0)
20005836:	d3fff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
2000583a:	87aa                	mv	a5,a0
2000583c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_RXWM;
20005840:	fec42783          	lw	a5,-20(s0)
20005844:	07c1                	addi	a5,a5,16
20005846:	439c                	lw	a5,0(a5)
20005848:	fec42703          	lw	a4,-20(s0)
2000584c:	0741                	addi	a4,a4,16
2000584e:	9bf5                	andi	a5,a5,-3
20005850:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:70
    return 0;
20005852:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
}
20005854:	853e                	mv	a0,a5
20005856:	50b2                	lw	ra,44(sp)
20005858:	5422                	lw	s0,40(sp)
2000585a:	6145                	addi	sp,sp,48
2000585c:	8082                	ret

2000585e <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73

int __metal_driver_sifive_uart0_txready(struct metal_uart *uart) {
2000585e:	7179                	addi	sp,sp,-48
20005860:	d606                	sw	ra,44(sp)
20005862:	d422                	sw	s0,40(sp)
20005864:	1800                	addi	s0,sp,48
20005866:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2000586a:	fdc42503          	lw	a0,-36(s0)
2000586e:	d07ff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
20005872:	87aa                	mv	a5,a0
20005874:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:76

    return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20005878:	fec42783          	lw	a5,-20(s0)
2000587c:	439c                	lw	a5,0(a5)
2000587e:	fff7c793          	not	a5,a5
20005882:	83fd                	srli	a5,a5,0x1f
20005884:	0ff7f793          	andi	a5,a5,255
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:77
}
20005888:	853e                	mv	a0,a5
2000588a:	50b2                	lw	ra,44(sp)
2000588c:	5422                	lw	s0,40(sp)
2000588e:	6145                	addi	sp,sp,48
20005890:	8082                	ret

20005892 <__metal_driver_sifive_uart0_set_tx_watermark>:
__metal_driver_sifive_uart0_set_tx_watermark():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80

int __metal_driver_sifive_uart0_set_tx_watermark(struct metal_uart *uart,
                                                 size_t level) {
20005892:	7179                	addi	sp,sp,-48
20005894:	d606                	sw	ra,44(sp)
20005896:	d422                	sw	s0,40(sp)
20005898:	1800                	addi	s0,sp,48
2000589a:	fca42e23          	sw	a0,-36(s0)
2000589e:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
200058a2:	fdc42503          	lw	a0,-36(s0)
200058a6:	ccfff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
200058aa:	87aa                	mv	a5,a0
200058ac:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:83

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(level);
200058b0:	fec42783          	lw	a5,-20(s0)
200058b4:	07a1                	addi	a5,a5,8
200058b6:	4398                	lw	a4,0(a5)
200058b8:	fd842783          	lw	a5,-40(s0)
200058bc:	01079693          	slli	a3,a5,0x10
200058c0:	000707b7          	lui	a5,0x70
200058c4:	8ff5                	and	a5,a5,a3
200058c6:	fec42683          	lw	a3,-20(s0)
200058ca:	06a1                	addi	a3,a3,8
200058cc:	8fd9                	or	a5,a5,a4
200058ce:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84
    return 0;
200058d0:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
}
200058d2:	853e                	mv	a0,a5
200058d4:	50b2                	lw	ra,44(sp)
200058d6:	5422                	lw	s0,40(sp)
200058d8:	6145                	addi	sp,sp,48
200058da:	8082                	ret

200058dc <__metal_driver_sifive_uart0_get_tx_watermark>:
__metal_driver_sifive_uart0_get_tx_watermark():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87

size_t __metal_driver_sifive_uart0_get_tx_watermark(struct metal_uart *uart) {
200058dc:	7179                	addi	sp,sp,-48
200058de:	d606                	sw	ra,44(sp)
200058e0:	d422                	sw	s0,40(sp)
200058e2:	1800                	addi	s0,sp,48
200058e4:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:88
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
200058e8:	fdc42503          	lw	a0,-36(s0)
200058ec:	c89ff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
200058f0:	87aa                	mv	a5,a0
200058f2:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:90

    return ((UART_REGW(METAL_SIFIVE_UART0_TXCTRL) >> 16) & 0x7);
200058f6:	fec42783          	lw	a5,-20(s0)
200058fa:	07a1                	addi	a5,a5,8
200058fc:	439c                	lw	a5,0(a5)
200058fe:	83c1                	srli	a5,a5,0x10
20005900:	8b9d                	andi	a5,a5,7
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91
}
20005902:	853e                	mv	a0,a5
20005904:	50b2                	lw	ra,44(sp)
20005906:	5422                	lw	s0,40(sp)
20005908:	6145                	addi	sp,sp,48
2000590a:	8082                	ret

2000590c <__metal_driver_sifive_uart0_set_rx_watermark>:
__metal_driver_sifive_uart0_set_rx_watermark():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94

int __metal_driver_sifive_uart0_set_rx_watermark(struct metal_uart *uart,
                                                 size_t level) {
2000590c:	7179                	addi	sp,sp,-48
2000590e:	d606                	sw	ra,44(sp)
20005910:	d422                	sw	s0,40(sp)
20005912:	1800                	addi	s0,sp,48
20005914:	fca42e23          	sw	a0,-36(s0)
20005918:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2000591c:	fdc42503          	lw	a0,-36(s0)
20005920:	c55ff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
20005924:	87aa                	mv	a5,a0
20005926:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97

    UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXCNT(level);
2000592a:	fec42783          	lw	a5,-20(s0)
2000592e:	07b1                	addi	a5,a5,12
20005930:	4398                	lw	a4,0(a5)
20005932:	fd842783          	lw	a5,-40(s0)
20005936:	01079693          	slli	a3,a5,0x10
2000593a:	000707b7          	lui	a5,0x70
2000593e:	8ff5                	and	a5,a5,a3
20005940:	fec42683          	lw	a3,-20(s0)
20005944:	06b1                	addi	a3,a3,12
20005946:	8fd9                	or	a5,a5,a4
20005948:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
    return 0;
2000594a:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:99
}
2000594c:	853e                	mv	a0,a5
2000594e:	50b2                	lw	ra,44(sp)
20005950:	5422                	lw	s0,40(sp)
20005952:	6145                	addi	sp,sp,48
20005954:	8082                	ret

20005956 <__metal_driver_sifive_uart0_get_rx_watermark>:
__metal_driver_sifive_uart0_get_rx_watermark():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

size_t __metal_driver_sifive_uart0_get_rx_watermark(struct metal_uart *uart) {
20005956:	7179                	addi	sp,sp,-48
20005958:	d606                	sw	ra,44(sp)
2000595a:	d422                	sw	s0,40(sp)
2000595c:	1800                	addi	s0,sp,48
2000595e:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20005962:	fdc42503          	lw	a0,-36(s0)
20005966:	c0fff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
2000596a:	87aa                	mv	a5,a0
2000596c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104

    return ((UART_REGW(METAL_SIFIVE_UART0_RXCTRL) >> 16) & 0x7);
20005970:	fec42783          	lw	a5,-20(s0)
20005974:	07b1                	addi	a5,a5,12
20005976:	439c                	lw	a5,0(a5)
20005978:	83c1                	srli	a5,a5,0x10
2000597a:	8b9d                	andi	a5,a5,7
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:105
}
2000597c:	853e                	mv	a0,a5
2000597e:	50b2                	lw	ra,44(sp)
20005980:	5422                	lw	s0,40(sp)
20005982:	6145                	addi	sp,sp,48
20005984:	8082                	ret

20005986 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:107

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c) {
20005986:	7179                	addi	sp,sp,-48
20005988:	d606                	sw	ra,44(sp)
2000598a:	d422                	sw	s0,40(sp)
2000598c:	1800                	addi	s0,sp,48
2000598e:	fca42e23          	sw	a0,-36(s0)
20005992:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:108
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20005996:	fdc42503          	lw	a0,-36(s0)
2000599a:	bdbff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
2000599e:	87aa                	mv	a5,a0
200059a0:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110

    while (!__metal_driver_sifive_uart0_txready(uart)) {
200059a4:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110 (discriminator 1)
200059a6:	fdc42503          	lw	a0,-36(s0)
200059aa:	eb5ff0ef          	jal	ra,2000585e <__metal_driver_sifive_uart0_txready>
200059ae:	87aa                	mv	a5,a0
200059b0:	dbfd                	beqz	a5,200059a6 <__metal_driver_sifive_uart0_putc+0x20>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:113
        /* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
200059b2:	fec42783          	lw	a5,-20(s0)
200059b6:	fd842703          	lw	a4,-40(s0)
200059ba:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:114
    return 0;
200059bc:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:115
}
200059be:	853e                	mv	a0,a5
200059c0:	50b2                	lw	ra,44(sp)
200059c2:	5422                	lw	s0,40(sp)
200059c4:	6145                	addi	sp,sp,48
200059c6:	8082                	ret

200059c8 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:117

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c) {
200059c8:	7179                	addi	sp,sp,-48
200059ca:	d606                	sw	ra,44(sp)
200059cc:	d422                	sw	s0,40(sp)
200059ce:	1800                	addi	s0,sp,48
200059d0:	fca42e23          	sw	a0,-36(s0)
200059d4:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
200059d8:	fdc42503          	lw	a0,-36(s0)
200059dc:	b99ff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
200059e0:	87aa                	mv	a5,a0
200059e2:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:121
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);
200059e6:	fec42783          	lw	a5,-20(s0)
200059ea:	0791                	addi	a5,a5,4
200059ec:	439c                	lw	a5,0(a5)
200059ee:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123
    ;
    if (ch & UART_RXEMPTY) {
200059f2:	fe842783          	lw	a5,-24(s0)
200059f6:	0007d763          	bgez	a5,20005a04 <__metal_driver_sifive_uart0_getc+0x3c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
        *c = -1; /* aka: EOF in most of the world */
200059fa:	fd842783          	lw	a5,-40(s0)
200059fe:	577d                	li	a4,-1
20005a00:	c398                	sw	a4,0(a5)
20005a02:	a801                	j	20005a12 <__metal_driver_sifive_uart0_getc+0x4a>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:126
    } else {
        *c = ch & 0x0ff;
20005a04:	fe842783          	lw	a5,-24(s0)
20005a08:	0ff7f713          	andi	a4,a5,255
20005a0c:	fd842783          	lw	a5,-40(s0)
20005a10:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    }
    return 0;
20005a12:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
}
20005a14:	853e                	mv	a0,a5
20005a16:	50b2                	lw	ra,44(sp)
20005a18:	5422                	lw	s0,40(sp)
20005a1a:	6145                	addi	sp,sp,48
20005a1c:	8082                	ret

20005a1e <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:131

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart) {
20005a1e:	7179                	addi	sp,sp,-48
20005a20:	d622                	sw	s0,44(sp)
20005a22:	1800                	addi	s0,sp,48
20005a24:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:132
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20005a28:	fdc42783          	lw	a5,-36(s0)
20005a2c:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133
    return uart->baud_rate;
20005a30:	fec42783          	lw	a5,-20(s0)
20005a34:	43dc                	lw	a5,4(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
}
20005a36:	853e                	mv	a0,a5
20005a38:	5432                	lw	s0,44(sp)
20005a3a:	6145                	addi	sp,sp,48
20005a3c:	8082                	ret

20005a3e <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:137

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart,
                                              int baud_rate) {
20005a3e:	7179                	addi	sp,sp,-48
20005a40:	d606                	sw	ra,44(sp)
20005a42:	d422                	sw	s0,40(sp)
20005a44:	1800                	addi	s0,sp,48
20005a46:	fca42e23          	sw	a0,-36(s0)
20005a4a:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20005a4e:	fdc42783          	lw	a5,-36(s0)
20005a52:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20005a56:	fdc42503          	lw	a0,-36(s0)
20005a5a:	b1bff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
20005a5e:	87aa                	mv	a5,a0
20005a60:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20005a64:	fdc42503          	lw	a0,-36(s0)
20005a68:	bcbff0ef          	jal	ra,20005632 <__metal_driver_sifive_uart0_clock>
20005a6c:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:142

    uart->baud_rate = baud_rate;
20005a70:	fd842703          	lw	a4,-40(s0)
20005a74:	fec42783          	lw	a5,-20(s0)
20005a78:	c3d8                	sw	a4,4(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144

    if (clock != NULL) {
20005a7a:	fe442783          	lw	a5,-28(s0)
20005a7e:	cbb1                	beqz	a5,20005ad2 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        long clock_rate = clock->vtable->get_rate_hz(clock);
20005a80:	fe442783          	lw	a5,-28(s0)
20005a84:	439c                	lw	a5,0(a5)
20005a86:	439c                	lw	a5,0(a5)
20005a88:	fe442503          	lw	a0,-28(s0)
20005a8c:	9782                	jalr	a5
20005a8e:	fea42023          	sw	a0,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:146
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20005a92:	fe042703          	lw	a4,-32(s0)
20005a96:	fd842783          	lw	a5,-40(s0)
20005a9a:	02f747b3          	div	a5,a4,a5
20005a9e:	fff78713          	addi	a4,a5,-1 # 6ffff <__heap_size+0x6f7ff>
20005aa2:	fe842783          	lw	a5,-24(s0)
20005aa6:	07e1                	addi	a5,a5,24
20005aa8:	c398                	sw	a4,0(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:147
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20005aaa:	fe842783          	lw	a5,-24(s0)
20005aae:	07a1                	addi	a5,a5,8
20005ab0:	439c                	lw	a5,0(a5)
20005ab2:	fe842703          	lw	a4,-24(s0)
20005ab6:	0721                	addi	a4,a4,8
20005ab8:	0017e793          	ori	a5,a5,1
20005abc:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20005abe:	fe842783          	lw	a5,-24(s0)
20005ac2:	07b1                	addi	a5,a5,12
20005ac4:	439c                	lw	a5,0(a5)
20005ac6:	fe842703          	lw	a4,-24(s0)
20005aca:	0731                	addi	a4,a4,12
20005acc:	0017e793          	ori	a5,a5,1
20005ad0:	c31c                	sw	a5,0(a4)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150
    }
    return 0;
20005ad2:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
}
20005ad4:	853e                	mv	a0,a5
20005ad6:	50b2                	lw	ra,44(sp)
20005ad8:	5422                	lw	s0,40(sp)
20005ada:	6145                	addi	sp,sp,48
20005adc:	8082                	ret

20005ade <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153

static void pre_rate_change_callback_func(void *priv) {
20005ade:	7139                	addi	sp,sp,-64
20005ae0:	de06                	sw	ra,60(sp)
20005ae2:	dc22                	sw	s0,56(sp)
20005ae4:	0080                	addi	s0,sp,64
20005ae6:	fca42623          	sw	a0,-52(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:154
    struct __metal_driver_sifive_uart0 *uart = priv;
20005aea:	fcc42783          	lw	a5,-52(s0)
20005aee:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:156
    long control_base =
        __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20005af2:	fcc42503          	lw	a0,-52(s0)
20005af6:	a7fff0ef          	jal	ra,20005574 <__metal_driver_sifive_uart0_control_base>
20005afa:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:155
    long control_base =
20005afc:	fef42423          	sw	a5,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:158
    struct metal_clock *clock =
        __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20005b00:	fcc42503          	lw	a0,-52(s0)
20005b04:	b2fff0ef          	jal	ra,20005632 <__metal_driver_sifive_uart0_clock>
20005b08:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:163

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20005b0c:	fe842783          	lw	a5,-24(s0)
20005b10:	07a1                	addi	a5,a5,8
20005b12:	4398                	lw	a4,0(a5)
20005b14:	fe842783          	lw	a5,-24(s0)
20005b18:	07a1                	addi	a5,a5,8
20005b1a:	86be                	mv	a3,a5
20005b1c:	fff907b7          	lui	a5,0xfff90
20005b20:	17fd                	addi	a5,a5,-1
20005b22:	8ff9                	and	a5,a5,a4
20005b24:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:164
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20005b26:	fe842783          	lw	a5,-24(s0)
20005b2a:	07a1                	addi	a5,a5,8
20005b2c:	4398                	lw	a4,0(a5)
20005b2e:	fe842783          	lw	a5,-24(s0)
20005b32:	07a1                	addi	a5,a5,8
20005b34:	86be                	mv	a3,a5
20005b36:	67c1                	lui	a5,0x10
20005b38:	8fd9                	or	a5,a5,a4
20005b3a:	c29c                	sw	a5,0(a3)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:166

    while ((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0)
20005b3c:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:166 (discriminator 1)
20005b3e:	fe842783          	lw	a5,-24(s0)
20005b42:	07d1                	addi	a5,a5,20
20005b44:	439c                	lw	a5,0(a5)
20005b46:	8b85                	andi	a5,a5,1
20005b48:	dbfd                	beqz	a5,20005b3e <pre_rate_change_callback_func+0x60>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174
    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol =
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20005b4a:	fe842783          	lw	a5,-24(s0)
20005b4e:	07a1                	addi	a5,a5,8
20005b50:	439c                	lw	a5,0(a5)
20005b52:	8b89                	andi	a5,a5,2
20005b54:	c399                	beqz	a5,20005b5a <pre_rate_change_callback_func+0x7c>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 1)
20005b56:	47a5                	li	a5,9
20005b58:	a011                	j	20005b5c <pre_rate_change_callback_func+0x7e>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 2)
20005b5a:	47a9                	li	a5,10
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:173
    long bits_per_symbol =
20005b5c:	fef42023          	sw	a5,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
20005b60:	fe442783          	lw	a5,-28(s0)
20005b64:	439c                	lw	a5,0(a5)
20005b66:	439c                	lw	a5,0(a5)
20005b68:	fe442503          	lw	a0,-28(s0)
20005b6c:	9782                	jalr	a5
20005b6e:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:176
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20005b72:	fe042703          	lw	a4,-32(s0)
20005b76:	fdc42783          	lw	a5,-36(s0)
20005b7a:	02f707b3          	mul	a5,a4,a5
20005b7e:	873e                	mv	a4,a5
20005b80:	fec42783          	lw	a5,-20(s0)
20005b84:	43dc                	lw	a5,4(a5)
20005b86:	02f757b3          	divu	a5,a4,a5
20005b8a:	fcf42c23          	sw	a5,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178

    for (volatile long x = 0; x < cycles_to_wait; x++)
20005b8e:	fc042a23          	sw	zero,-44(s0)
20005b92:	a039                	j	20005ba0 <pre_rate_change_callback_func+0xc2>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:179 (discriminator 3)
        __asm__("nop");
20005b94:	0001                	nop
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 3)
    for (volatile long x = 0; x < cycles_to_wait; x++)
20005b96:	fd442783          	lw	a5,-44(s0)
20005b9a:	0785                	addi	a5,a5,1
20005b9c:	fcf42a23          	sw	a5,-44(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 1)
20005ba0:	fd442783          	lw	a5,-44(s0)
20005ba4:	fd842703          	lw	a4,-40(s0)
20005ba8:	fee7c6e3          	blt	a5,a4,20005b94 <pre_rate_change_callback_func+0xb6>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:180
}
20005bac:	0001                	nop
20005bae:	50f2                	lw	ra,60(sp)
20005bb0:	5462                	lw	s0,56(sp)
20005bb2:	6121                	addi	sp,sp,64
20005bb4:	8082                	ret

20005bb6 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:182

static void post_rate_change_callback_func(void *priv) {
20005bb6:	7179                	addi	sp,sp,-48
20005bb8:	d606                	sw	ra,44(sp)
20005bba:	d422                	sw	s0,40(sp)
20005bbc:	1800                	addi	s0,sp,48
20005bbe:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:183
    struct __metal_driver_sifive_uart0 *uart = priv;
20005bc2:	fdc42783          	lw	a5,-36(s0)
20005bc6:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:184
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20005bca:	fec42703          	lw	a4,-20(s0)
20005bce:	fec42783          	lw	a5,-20(s0)
20005bd2:	43dc                	lw	a5,4(a5)
20005bd4:	85be                	mv	a1,a5
20005bd6:	853a                	mv	a0,a4
20005bd8:	eb3fb0ef          	jal	ra,20001a8a <metal_uart_set_baud_rate>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:185
}
20005bdc:	0001                	nop
20005bde:	50b2                	lw	ra,44(sp)
20005be0:	5422                	lw	s0,40(sp)
20005be2:	6145                	addi	sp,sp,48
20005be4:	8082                	ret

20005be6 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:187

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate) {
20005be6:	7139                	addi	sp,sp,-64
20005be8:	de06                	sw	ra,60(sp)
20005bea:	dc22                	sw	s0,56(sp)
20005bec:	0080                	addi	s0,sp,64
20005bee:	fca42623          	sw	a0,-52(s0)
20005bf2:	fcb42423          	sw	a1,-56(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:188
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20005bf6:	fcc42783          	lw	a5,-52(s0)
20005bfa:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:189
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20005bfe:	fcc42503          	lw	a0,-52(s0)
20005c02:	a31ff0ef          	jal	ra,20005632 <__metal_driver_sifive_uart0_clock>
20005c06:	fea42423          	sw	a0,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:191
    struct __metal_driver_sifive_gpio0 *pinmux =
        __metal_driver_sifive_uart0_pinmux(guart);
20005c0a:	fcc42503          	lw	a0,-52(s0)
20005c0e:	a6dff0ef          	jal	ra,2000567a <__metal_driver_sifive_uart0_pinmux>
20005c12:	fea42223          	sw	a0,-28(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:193

    if (clock != NULL) {
20005c16:	fe842783          	lw	a5,-24(s0)
20005c1a:	c7b9                	beqz	a5,20005c68 <__metal_driver_sifive_uart0_init+0x82>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:194
        uart->pre_rate_change_callback.callback =
20005c1c:	fec42783          	lw	a5,-20(s0)
20005c20:	20006737          	lui	a4,0x20006
20005c24:	ade70713          	addi	a4,a4,-1314 # 20005ade <pre_rate_change_callback_func>
20005c28:	c798                	sw	a4,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:196
            &pre_rate_change_callback_func;
        uart->pre_rate_change_callback.priv = guart;
20005c2a:	fec42783          	lw	a5,-20(s0)
20005c2e:	fcc42703          	lw	a4,-52(s0)
20005c32:	c7d8                	sw	a4,12(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:197
        metal_clock_register_pre_rate_change_callback(
20005c34:	fec42783          	lw	a5,-20(s0)
20005c38:	07a1                	addi	a5,a5,8
20005c3a:	85be                	mv	a1,a5
20005c3c:	fe842503          	lw	a0,-24(s0)
20005c40:	2ab5                	jal	20005dbc <metal_clock_register_pre_rate_change_callback>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:200
            clock, &(uart->pre_rate_change_callback));

        uart->post_rate_change_callback.callback =
20005c42:	fec42783          	lw	a5,-20(s0)
20005c46:	20006737          	lui	a4,0x20006
20005c4a:	bb670713          	addi	a4,a4,-1098 # 20005bb6 <post_rate_change_callback_func>
20005c4e:	cbd8                	sw	a4,20(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:202
            &post_rate_change_callback_func;
        uart->post_rate_change_callback.priv = guart;
20005c50:	fec42783          	lw	a5,-20(s0)
20005c54:	fcc42703          	lw	a4,-52(s0)
20005c58:	cf98                	sw	a4,24(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:203
        metal_clock_register_post_rate_change_callback(
20005c5a:	fec42783          	lw	a5,-20(s0)
20005c5e:	07d1                	addi	a5,a5,20
20005c60:	85be                	mv	a1,a5
20005c62:	fe842503          	lw	a0,-24(s0)
20005c66:	2261                	jal	20005dee <metal_clock_register_post_rate_change_callback>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:207
            clock, &(uart->post_rate_change_callback));
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20005c68:	fec42783          	lw	a5,-20(s0)
20005c6c:	fc842583          	lw	a1,-56(s0)
20005c70:	853e                	mv	a0,a5
20005c72:	e19fb0ef          	jal	ra,20001a8a <metal_uart_set_baud_rate>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:209

    if (pinmux != NULL) {
20005c76:	fe442783          	lw	a5,-28(s0)
20005c7a:	cb95                	beqz	a5,20005cae <__metal_driver_sifive_uart0_init+0xc8>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:211
        long pinmux_output_selector =
            __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20005c7c:	fcc42503          	lw	a0,-52(s0)
20005c80:	a3bff0ef          	jal	ra,200056ba <__metal_driver_sifive_uart0_pinmux_output_selector>
20005c84:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:210
        long pinmux_output_selector =
20005c86:	fef42023          	sw	a5,-32(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:213
        long pinmux_source_selector =
            __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20005c8a:	fcc42503          	lw	a0,-52(s0)
20005c8e:	a6dff0ef          	jal	ra,200056fa <__metal_driver_sifive_uart0_pinmux_source_selector>
20005c92:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:212
        long pinmux_source_selector =
20005c94:	fcf42e23          	sw	a5,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
20005c98:	fe442783          	lw	a5,-28(s0)
20005c9c:	439c                	lw	a5,0(a5)
20005c9e:	53dc                	lw	a5,36(a5)
20005ca0:	fdc42603          	lw	a2,-36(s0)
20005ca4:	fe042583          	lw	a1,-32(s0)
20005ca8:	fe442503          	lw	a0,-28(s0)
20005cac:	9782                	jalr	a5
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:218
                                       pinmux_output_selector,
                                       pinmux_source_selector);
    }
}
20005cae:	0001                	nop
20005cb0:	50f2                	lw	ra,60(sp)
20005cb2:	5462                	lw	s0,56(sp)
20005cb4:	6121                	addi	sp,sp,64
20005cb6:	8082                	ret

20005cb8 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:50

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void
_metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
20005cb8:	7179                	addi	sp,sp,-48
20005cba:	d606                	sw	ra,44(sp)
20005cbc:	d422                	sw	s0,40(sp)
20005cbe:	1800                	addi	s0,sp,48
20005cc0:	fca42e23          	sw	a0,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:51
    const metal_clock_callback *current = list;
20005cc4:	fdc42783          	lw	a5,-36(s0)
20005cc8:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:52
    while (current) {
20005ccc:	a831                	j	20005ce8 <_metal_clock_call_all_callbacks+0x30>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:53
        current->callback(current->priv);
20005cce:	fec42783          	lw	a5,-20(s0)
20005cd2:	4398                	lw	a4,0(a5)
20005cd4:	fec42783          	lw	a5,-20(s0)
20005cd8:	43dc                	lw	a5,4(a5)
20005cda:	853e                	mv	a0,a5
20005cdc:	9702                	jalr	a4
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:54
        current = current->_next;
20005cde:	fec42783          	lw	a5,-20(s0)
20005ce2:	479c                	lw	a5,8(a5)
20005ce4:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:52
    while (current) {
20005ce8:	fec42783          	lw	a5,-20(s0)
20005cec:	f3ed                	bnez	a5,20005cce <_metal_clock_call_all_callbacks+0x16>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:56
    }
}
20005cee:	0001                	nop
20005cf0:	50b2                	lw	ra,44(sp)
20005cf2:	5422                	lw	s0,40(sp)
20005cf4:	6145                	addi	sp,sp,48
20005cf6:	8082                	ret

20005cf8 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:63
/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *
_metal_clock_append_to_callbacks(metal_clock_callback *list,
                                 metal_clock_callback *const cb) {
20005cf8:	7179                	addi	sp,sp,-48
20005cfa:	d622                	sw	s0,44(sp)
20005cfc:	1800                	addi	s0,sp,48
20005cfe:	fca42e23          	sw	a0,-36(s0)
20005d02:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:64
    cb->_next = NULL;
20005d06:	fd842783          	lw	a5,-40(s0)
20005d0a:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:66

    if (!list) {
20005d0e:	fdc42783          	lw	a5,-36(s0)
20005d12:	e781                	bnez	a5,20005d1a <_metal_clock_append_to_callbacks+0x22>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:67
        return cb;
20005d14:	fd842783          	lw	a5,-40(s0)
20005d18:	a035                	j	20005d44 <_metal_clock_append_to_callbacks+0x4c>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:70
    }

    metal_clock_callback *current = list;
20005d1a:	fdc42783          	lw	a5,-36(s0)
20005d1e:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:72

    while ((current->_next) != NULL) {
20005d22:	a031                	j	20005d2e <_metal_clock_append_to_callbacks+0x36>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:73
        current = current->_next;
20005d24:	fec42783          	lw	a5,-20(s0)
20005d28:	479c                	lw	a5,8(a5)
20005d2a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:72
    while ((current->_next) != NULL) {
20005d2e:	fec42783          	lw	a5,-20(s0)
20005d32:	479c                	lw	a5,8(a5)
20005d34:	fbe5                	bnez	a5,20005d24 <_metal_clock_append_to_callbacks+0x2c>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:76
    }

    current->_next = cb;
20005d36:	fec42783          	lw	a5,-20(s0)
20005d3a:	fd842703          	lw	a4,-40(s0)
20005d3e:	c798                	sw	a4,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:78

    return list;
20005d40:	fdc42783          	lw	a5,-36(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:79
}
20005d44:	853e                	mv	a0,a5
20005d46:	5432                	lw	s0,44(sp)
20005d48:	6145                	addi	sp,sp,48
20005d4a:	8082                	ret

20005d4c <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:110
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) {
20005d4c:	1101                	addi	sp,sp,-32
20005d4e:	ce06                	sw	ra,28(sp)
20005d50:	cc22                	sw	s0,24(sp)
20005d52:	1000                	addi	s0,sp,32
20005d54:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:111
    return clk->vtable->get_rate_hz(clk);
20005d58:	fec42783          	lw	a5,-20(s0)
20005d5c:	439c                	lw	a5,0(a5)
20005d5e:	439c                	lw	a5,0(a5)
20005d60:	fec42503          	lw	a0,-20(s0)
20005d64:	9782                	jalr	a5
20005d66:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:112
}
20005d68:	853e                	mv	a0,a5
20005d6a:	40f2                	lw	ra,28(sp)
20005d6c:	4462                	lw	s0,24(sp)
20005d6e:	6105                	addi	sp,sp,32
20005d70:	8082                	ret

20005d72 <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:128
 * could be anything!
 *
 * Prior to and after the rate change of the clock, this will call the
 * registered pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz) {
20005d72:	7179                	addi	sp,sp,-48
20005d74:	d606                	sw	ra,44(sp)
20005d76:	d422                	sw	s0,40(sp)
20005d78:	1800                	addi	s0,sp,48
20005d7a:	fca42e23          	sw	a0,-36(s0)
20005d7e:	fcb42c23          	sw	a1,-40(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:129
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
20005d82:	fdc42783          	lw	a5,-36(s0)
20005d86:	43dc                	lw	a5,4(a5)
20005d88:	853e                	mv	a0,a5
20005d8a:	373d                	jal	20005cb8 <_metal_clock_call_all_callbacks>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:131

    long out = clk->vtable->set_rate_hz(clk, hz);
20005d8c:	fdc42783          	lw	a5,-36(s0)
20005d90:	439c                	lw	a5,0(a5)
20005d92:	43dc                	lw	a5,4(a5)
20005d94:	fd842583          	lw	a1,-40(s0)
20005d98:	fdc42503          	lw	a0,-36(s0)
20005d9c:	9782                	jalr	a5
20005d9e:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:133

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
20005da2:	fdc42783          	lw	a5,-36(s0)
20005da6:	479c                	lw	a5,8(a5)
20005da8:	853e                	mv	a0,a5
20005daa:	f0fff0ef          	jal	ra,20005cb8 <_metal_clock_call_all_callbacks>
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:135

    return out;
20005dae:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:136
}
20005db2:	853e                	mv	a0,a5
20005db4:	50b2                	lw	ra,44(sp)
20005db6:	5422                	lw	s0,40(sp)
20005db8:	6145                	addi	sp,sp,48
20005dba:	8082                	ret

20005dbc <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:146
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_pre_rate_change_callback(struct metal_clock *clk,
                                              metal_clock_callback *cb) {
20005dbc:	1101                	addi	sp,sp,-32
20005dbe:	ce06                	sw	ra,28(sp)
20005dc0:	cc22                	sw	s0,24(sp)
20005dc2:	1000                	addi	s0,sp,32
20005dc4:	fea42623          	sw	a0,-20(s0)
20005dc8:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:148
    clk->_pre_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20005dcc:	fec42783          	lw	a5,-20(s0)
20005dd0:	43dc                	lw	a5,4(a5)
20005dd2:	fe842583          	lw	a1,-24(s0)
20005dd6:	853e                	mv	a0,a5
20005dd8:	f21ff0ef          	jal	ra,20005cf8 <_metal_clock_append_to_callbacks>
20005ddc:	872a                	mv	a4,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:147
    clk->_pre_rate_change_callback =
20005dde:	fec42783          	lw	a5,-20(s0)
20005de2:	c3d8                	sw	a4,4(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:149
}
20005de4:	0001                	nop
20005de6:	40f2                	lw	ra,28(sp)
20005de8:	4462                	lw	s0,24(sp)
20005dea:	6105                	addi	sp,sp,32
20005dec:	8082                	ret

20005dee <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:159
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_post_rate_change_callback(struct metal_clock *clk,
                                               metal_clock_callback *cb) {
20005dee:	1101                	addi	sp,sp,-32
20005df0:	ce06                	sw	ra,28(sp)
20005df2:	cc22                	sw	s0,24(sp)
20005df4:	1000                	addi	s0,sp,32
20005df6:	fea42623          	sw	a0,-20(s0)
20005dfa:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:161
    clk->_post_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20005dfe:	fec42783          	lw	a5,-20(s0)
20005e02:	479c                	lw	a5,8(a5)
20005e04:	fe842583          	lw	a1,-24(s0)
20005e08:	853e                	mv	a0,a5
20005e0a:	eefff0ef          	jal	ra,20005cf8 <_metal_clock_append_to_callbacks>
20005e0e:	872a                	mv	a4,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:160
    clk->_post_rate_change_callback =
20005e10:	fec42783          	lw	a5,-20(s0)
20005e14:	c798                	sw	a4,8(a5)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/clock.h:162
}
20005e16:	0001                	nop
20005e18:	40f2                	lw	ra,28(sp)
20005e1a:	4462                	lw	s0,24(sp)
20005e1c:	6105                	addi	sp,sp,32
20005e1e:	8082                	ret

20005e20 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/cpu.h:223
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt *
metal_cpu_interrupt_controller(struct metal_cpu *cpu) {
20005e20:	1101                	addi	sp,sp,-32
20005e22:	ce06                	sw	ra,28(sp)
20005e24:	cc22                	sw	s0,24(sp)
20005e26:	1000                	addi	s0,sp,32
20005e28:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/cpu.h:224
    return cpu->vtable->controller_interrupt(cpu);
20005e2c:	fec42783          	lw	a5,-20(s0)
20005e30:	439c                	lw	a5,0(a5)
20005e32:	57dc                	lw	a5,44(a5)
20005e34:	fec42503          	lw	a0,-20(s0)
20005e38:	9782                	jalr	a5
20005e3a:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/metal/cpu.h:225
}
20005e3c:	853e                	mv	a0,a5
20005e3e:	40f2                	lw	ra,28(sp)
20005e40:	4462                	lw	s0,24(sp)
20005e42:	6105                	addi	sp,sp,32
20005e44:	8082                	ret

20005e46 <metal_cpu_get>:
metal_cpu_get():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:7
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu *metal_cpu_get(unsigned int hartid) {
20005e46:	1101                	addi	sp,sp,-32
20005e48:	ce22                	sw	s0,28(sp)
20005e4a:	1000                	addi	s0,sp,32
20005e4c:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:8
    if (hartid < __METAL_DT_MAX_HARTS) {
20005e50:	fec42783          	lw	a5,-20(s0)
20005e54:	eb89                	bnez	a5,20005e66 <metal_cpu_get+0x20>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:9
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20005e56:	fec42703          	lw	a4,-20(s0)
20005e5a:	070a                	slli	a4,a4,0x2
20005e5c:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20005e60:	97ba                	add	a5,a5,a4
20005e62:	439c                	lw	a5,0(a5)
20005e64:	a011                	j	20005e68 <metal_cpu_get+0x22>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:11
    }
    return NULL;
20005e66:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:12
}
20005e68:	853e                	mv	a0,a5
20005e6a:	4472                	lw	s0,28(sp)
20005e6c:	6105                	addi	sp,sp,32
20005e6e:	8082                	ret

20005e70 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:14

int metal_cpu_get_current_hartid() {
20005e70:	1101                	addi	sp,sp,-32
20005e72:	ce22                	sw	s0,28(sp)
20005e74:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:17
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r"(mhartid));
20005e76:	f14027f3          	csrr	a5,mhartid
20005e7a:	fef42623          	sw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:18
    return mhartid;
20005e7e:	fec42783          	lw	a5,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/cpu.c:20
#endif
}
20005e82:	853e                	mv	a0,a5
20005e84:	4472                	lw	s0,28(sp)
20005e86:	6105                	addi	sp,sp,32
20005e88:	8082                	ret

20005e8a <metal_shutdown>:
metal_shutdown():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message(                                                               \
    "There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code) {
20005e8a:	1101                	addi	sp,sp,-32
20005e8c:	ce22                	sw	s0,28(sp)
20005e8e:	1000                	addi	s0,sp,32
20005e90:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
        __asm__ volatile("nop");
20005e94:	0001                	nop
20005e96:	bffd                	j	20005e94 <metal_shutdown+0xa>
	...

20005f00 <__metal_vector_table>:
IRQ_0():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20005f00:	ceafc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f04 <IRQ_1>:
IRQ_1():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20005f04:	ce6fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f08 <IRQ_2>:
IRQ_2():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20005f08:	ce2fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f0c <IRQ_3>:
IRQ_3():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20005f0c:	d0cfc06f          	j	20002418 <metal_software_interrupt_vector_handler>

20005f10 <IRQ_4>:
IRQ_4():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20005f10:	cdafc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f14 <IRQ_5>:
IRQ_5():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20005f14:	cd6fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f18 <IRQ_6>:
IRQ_6():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20005f18:	cd2fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f1c <IRQ_7>:
IRQ_7():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20005f1c:	deefc06f          	j	2000250a <metal_timer_interrupt_vector_handler>

20005f20 <IRQ_8>:
IRQ_8():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20005f20:	ccafc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f24 <IRQ_9>:
IRQ_9():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20005f24:	cc6fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f28 <IRQ_10>:
IRQ_10():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20005f28:	cc2fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f2c <IRQ_11>:
IRQ_11():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20005f2c:	cbefc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f30 <IRQ_12>:
IRQ_12():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20005f30:	cbafc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f34 <IRQ_13>:
IRQ_13():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20005f34:	cb6fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f38 <IRQ_14>:
IRQ_14():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20005f38:	cb2fc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f3c <IRQ_15>:
IRQ_15():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20005f3c:	caefc06f          	j	200023ea <metal_interrupt_vector_handler>

20005f40 <IRQ_LC0>:
IRQ_LC0():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20005f40:	833fc06f          	j	20002772 <metal_lc0_interrupt_vector_handler>

20005f44 <IRQ_LC1>:
IRQ_LC1():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20005f44:	8c1fc06f          	j	20002804 <metal_lc1_interrupt_vector_handler>

20005f48 <IRQ_LC2>:
IRQ_LC2():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20005f48:	94ffc06f          	j	20002896 <metal_lc2_interrupt_vector_handler>

20005f4c <IRQ_LC3>:
IRQ_LC3():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20005f4c:	9ddfc06f          	j	20002928 <metal_lc3_interrupt_vector_handler>

20005f50 <IRQ_LC4>:
IRQ_LC4():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20005f50:	a6bfc06f          	j	200029ba <metal_lc4_interrupt_vector_handler>

20005f54 <IRQ_LC5>:
IRQ_LC5():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20005f54:	af9fc06f          	j	20002a4c <metal_lc5_interrupt_vector_handler>

20005f58 <IRQ_LC6>:
IRQ_LC6():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20005f58:	b87fc06f          	j	20002ade <metal_lc6_interrupt_vector_handler>

20005f5c <IRQ_LC7>:
IRQ_LC7():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20005f5c:	c15fc06f          	j	20002b70 <metal_lc7_interrupt_vector_handler>

20005f60 <IRQ_LC8>:
IRQ_LC8():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20005f60:	ca3fc06f          	j	20002c02 <metal_lc8_interrupt_vector_handler>

20005f64 <IRQ_LC9>:
IRQ_LC9():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20005f64:	d31fc06f          	j	20002c94 <metal_lc9_interrupt_vector_handler>

20005f68 <IRQ_LC10>:
IRQ_LC10():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20005f68:	dbffc06f          	j	20002d26 <metal_lc10_interrupt_vector_handler>

20005f6c <IRQ_LC11>:
IRQ_LC11():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20005f6c:	e4dfc06f          	j	20002db8 <metal_lc11_interrupt_vector_handler>

20005f70 <IRQ_LC12>:
IRQ_LC12():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20005f70:	edbfc06f          	j	20002e4a <metal_lc12_interrupt_vector_handler>

20005f74 <IRQ_LC13>:
IRQ_LC13():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20005f74:	f69fc06f          	j	20002edc <metal_lc13_interrupt_vector_handler>

20005f78 <IRQ_LC14>:
IRQ_LC14():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20005f78:	ff7fc06f          	j	20002f6e <metal_lc14_interrupt_vector_handler>

20005f7c <IRQ_LC15>:
IRQ_LC15():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20005f7c:	884fd06f          	j	20003000 <metal_lc15_interrupt_vector_handler>

20005f80 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:178
{
20005f80:	1101                	addi	sp,sp,-32
20005f82:	ce22                	sw	s0,28(sp)
20005f84:	1000                	addi	s0,sp,32
20005f86:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:179
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20005f8a:	fec42703          	lw	a4,-20(s0)
20005f8e:	800007b7          	lui	a5,0x80000
20005f92:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe8ec>
20005f96:	00f71763          	bne	a4,a5,20005fa4 <__metal_driver_fixed_clock_rate+0x24>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:180
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20005f9a:	00f427b7          	lui	a5,0xf42
20005f9e:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
20005fa2:	a099                	j	20005fe8 <__metal_driver_fixed_clock_rate+0x68>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:182
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20005fa4:	fec42703          	lw	a4,-20(s0)
20005fa8:	800007b7          	lui	a5,0x80000
20005fac:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffe8f8>
20005fb0:	00f71763          	bne	a4,a5,20005fbe <__metal_driver_fixed_clock_rate+0x3e>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:183
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20005fb4:	044aa7b7          	lui	a5,0x44aa
20005fb8:	20078793          	addi	a5,a5,512 # 44aa200 <__heap_size+0x44a9a00>
20005fbc:	a035                	j	20005fe8 <__metal_driver_fixed_clock_rate+0x68>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:185
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
20005fbe:	fec42703          	lw	a4,-20(s0)
20005fc2:	800007b7          	lui	a5,0x80000
20005fc6:	07878793          	addi	a5,a5,120 # 80000078 <metal_segment_heap_target_end+0xffffe904>
20005fca:	00f71463          	bne	a4,a5,20005fd2 <__metal_driver_fixed_clock_rate+0x52>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:186
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
20005fce:	67a1                	lui	a5,0x8
20005fd0:	a821                	j	20005fe8 <__metal_driver_fixed_clock_rate+0x68>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:188
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_6) {
20005fd2:	fec42703          	lw	a4,-20(s0)
20005fd6:	800007b7          	lui	a5,0x80000
20005fda:	08478793          	addi	a5,a5,132 # 80000084 <metal_segment_heap_target_end+0xffffe910>
20005fde:	00f71463          	bne	a4,a5,20005fe6 <__metal_driver_fixed_clock_rate+0x66>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:189
		return METAL_FIXED_CLOCK_6_CLOCK_FREQUENCY;
20005fe2:	67a1                	lui	a5,0x8
20005fe4:	a011                	j	20005fe8 <__metal_driver_fixed_clock_rate+0x68>
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:192
		return 0;
20005fe6:	4781                	li	a5,0
/home/michael/projects/freedom-e-sdk/bsp/lofive-r1-bootloader/build/debug/./metal/machine.h:194
}
20005fe8:	853e                	mv	a0,a5
20005fea:	4472                	lw	s0,28(sp)
20005fec:	6105                	addi	sp,sp,32
20005fee:	8082                	ret

20005ff0 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:12

#include <metal/drivers/fixed-clock.h>
#include <metal/machine.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk) {
20005ff0:	1101                	addi	sp,sp,-32
20005ff2:	ce06                	sw	ra,28(sp)
20005ff4:	cc22                	sw	s0,24(sp)
20005ff6:	1000                	addi	s0,sp,32
20005ff8:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
    return __metal_driver_fixed_clock_rate(gclk);
20005ffc:	fec42503          	lw	a0,-20(s0)
20006000:	3741                	jal	20005f80 <__metal_driver_fixed_clock_rate>
20006002:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
}
20006004:	853e                	mv	a0,a5
20006006:	40f2                	lw	ra,28(sp)
20006008:	4462                	lw	s0,24(sp)
2000600a:	6105                	addi	sp,sp,32
2000600c:	8082                	ret

2000600e <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:17

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk,
                                            long target_hz) {
2000600e:	1101                	addi	sp,sp,-32
20006010:	ce06                	sw	ra,28(sp)
20006012:	cc22                	sw	s0,24(sp)
20006014:	1000                	addi	s0,sp,32
20006016:	fea42623          	sw	a0,-20(s0)
2000601a:	feb42423          	sw	a1,-24(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2000601e:	fec42503          	lw	a0,-20(s0)
20006022:	37f9                	jal	20005ff0 <__metal_driver_fixed_clock_get_rate_hz>
20006024:	87aa                	mv	a5,a0
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
}
20006026:	853e                	mv	a0,a5
20006028:	40f2                	lw	ra,28(sp)
2000602a:	4462                	lw	s0,24(sp)
2000602c:	6105                	addi	sp,sp,32
2000602e:	8082                	ret

20006030 <_exit>:
_exit():
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:3
#include <metal/shutdown.h>

void _exit(int exit_status) {
20006030:	1101                	addi	sp,sp,-32
20006032:	ce06                	sw	ra,28(sp)
20006034:	cc22                	sw	s0,24(sp)
20006036:	1000                	addi	s0,sp,32
20006038:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:4
    metal_shutdown(exit_status);
2000603c:	fec42503          	lw	a0,-20(s0)
20006040:	e4bff0ef          	jal	ra,20005e8a <metal_shutdown>

Disassembly of section .ctors:

20006d48 <metal_tty_init>:
metal_tty_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:35

#ifndef __METAL_DT_STDOUT_UART_BAUD
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

METAL_CONSTRUCTOR(metal_tty_init) {
20006d48:	1141                	addi	sp,sp,-16
20006d4a:	c606                	sw	ra,12(sp)
20006d4c:	c422                	sw	s0,8(sp)
20006d4e:	0800                	addi	s0,sp,16
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:36
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20006d50:	67f1                	lui	a5,0x1c
20006d52:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20006d56:	800017b7          	lui	a5,0x80001
20006d5a:	a2078513          	addi	a0,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2ac>
20006d5e:	cd3fa0ef          	jal	ra,20001a30 <metal_uart_init>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/tty.c:37
}
20006d62:	0001                	nop
20006d64:	40b2                	lw	ra,12(sp)
20006d66:	4422                	lw	s0,8(sp)
20006d68:	0141                	addi	sp,sp,16
20006d6a:	8082                	ret

20006d6c <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
METAL_CONSTRUCTOR(metal_sifive_fe310_g000_pll_init) {
20006d6c:	1101                	addi	sp,sp,-32
20006d6e:	ce06                	sw	ra,28(sp)
20006d70:	cc22                	sw	s0,24(sp)
20006d72:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20006d74:	f44fd0ef          	jal	ra,200044b8 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20006d78:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:153
    if (init_rate != 0)
20006d7c:	fec42783          	lw	a5,-20(s0)
20006d80:	c799                	beqz	a5,20006d8e <metal_sifive_fe310_g000_pll_init+0x22>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:154
        __metal_driver_sifive_fe310_g000_pll_init(
20006d82:	800017b7          	lui	a5,0x80001
20006d86:	a7878513          	addi	a0,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff304>
20006d8a:	fb6fd0ef          	jal	ra,20004540 <__metal_driver_sifive_fe310_g000_pll_init>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156
}
20006d8e:	0001                	nop
20006d90:	40f2                	lw	ra,28(sp)
20006d92:	4462                	lw	s0,24(sp)
20006d94:	6105                	addi	sp,sp,32
20006d96:	8082                	ret

20006d98 <use_hfxosc>:
use_hfxosc():
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:350

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
METAL_CONSTRUCTOR(use_hfxosc) {
20006d98:	1101                	addi	sp,sp,-32
20006d9a:	ce06                	sw	ra,28(sp)
20006d9c:	cc22                	sw	s0,24(sp)
20006d9e:	1000                	addi	s0,sp,32
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:351
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20006da0:	f18fd0ef          	jal	ra,200044b8 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20006da4:	fea42623          	sw	a0,-20(s0)
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:352
    metal_clock_set_rate_hz(&__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock,
20006da8:	fec42583          	lw	a1,-20(s0)
20006dac:	800017b7          	lui	a5,0x80001
20006db0:	a7878513          	addi	a0,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff304>
20006db4:	fbffe0ef          	jal	ra,20005d72 <metal_clock_set_rate_hz>
/home/michael/projects/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:354
                            init_rate);
}
20006db8:	0001                	nop
20006dba:	40f2                	lw	ra,28(sp)
20006dbc:	4462                	lw	s0,24(sp)
20006dbe:	6105                	addi	sp,sp,32
20006dc0:	8082                	ret
